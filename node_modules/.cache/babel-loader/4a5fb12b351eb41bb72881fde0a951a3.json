{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport ap from \"./ap.js\";\nimport map from \"./map.js\";\nimport prepend from \"./prepend.js\";\nimport reduceRight from \"./reduceRight.js\";\n/**\r\n * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)\r\n * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an\r\n * Applicative of Traversable.\r\n *\r\n * Dispatches to the `sequence` method of the second argument, if present.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.19.0\r\n * @category List\r\n * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)\r\n * @param {Function} of\r\n * @param {*} traversable\r\n * @return {*}\r\n * @see R.traverse\r\n * @example\r\n *\r\n *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])\r\n *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()\r\n *\r\n *      R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]\r\n *      R.sequence(R.of, Nothing());       //=> [Nothing()]\r\n */\n\nvar sequence = /*#__PURE__*/_curry2(function sequence(of, traversable) {\n  return typeof traversable.sequence === 'function' ? traversable.sequence(of) : reduceRight(function (x, acc) {\n    return ap(map(prepend, x), acc);\n  }, of([]), traversable);\n});\n\nexport default sequence;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/sequence.js"],"names":["_curry2","ap","map","prepend","reduceRight","sequence","of","traversable","x","acc"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,EAAP,MAAe,SAAf;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,QAAQ,GACZ,aACAL,OAAO,CAAC,SAASK,QAAT,CAAkBC,EAAlB,EAAsBC,WAAtB,EAAmC;AACzC,SAAO,OAAOA,WAAW,CAACF,QAAnB,KAAgC,UAAhC,GAA6CE,WAAW,CAACF,QAAZ,CAAqBC,EAArB,CAA7C,GAAwEF,WAAW,CAAC,UAAUI,CAAV,EAAaC,GAAb,EAAkB;AAC3G,WAAOR,EAAE,CAACC,GAAG,CAACC,OAAD,EAAUK,CAAV,CAAJ,EAAkBC,GAAlB,CAAT;AACD,GAFyF,EAEvFH,EAAE,CAAC,EAAD,CAFqF,EAE/EC,WAF+E,CAA1F;AAGD,CAJM,CAFP;;AAQA,eAAeF,QAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\nimport ap from \"./ap.js\";\r\nimport map from \"./map.js\";\r\nimport prepend from \"./prepend.js\";\r\nimport reduceRight from \"./reduceRight.js\";\r\n/**\r\n * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)\r\n * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an\r\n * Applicative of Traversable.\r\n *\r\n * Dispatches to the `sequence` method of the second argument, if present.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.19.0\r\n * @category List\r\n * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)\r\n * @param {Function} of\r\n * @param {*} traversable\r\n * @return {*}\r\n * @see R.traverse\r\n * @example\r\n *\r\n *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])\r\n *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()\r\n *\r\n *      R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]\r\n *      R.sequence(R.of, Nothing());       //=> [Nothing()]\r\n */\r\n\r\nvar sequence =\r\n/*#__PURE__*/\r\n_curry2(function sequence(of, traversable) {\r\n  return typeof traversable.sequence === 'function' ? traversable.sequence(of) : reduceRight(function (x, acc) {\r\n    return ap(map(prepend, x), acc);\r\n  }, of([]), traversable);\r\n});\r\n\r\nexport default sequence;"]},"metadata":{},"sourceType":"module"}