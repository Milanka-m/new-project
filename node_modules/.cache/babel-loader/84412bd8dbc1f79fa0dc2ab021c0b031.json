{"ast":null,"code":"import _checkForMethod from \"./internal/_checkForMethod.js\";\nimport _curry1 from \"./internal/_curry1.js\";\nimport slice from \"./slice.js\";\n/**\r\n * Returns all but the first element of the given list or string (or object\r\n * with a `tail` method).\r\n *\r\n * Dispatches to the `slice` method of the first argument, if present.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category List\r\n * @sig [a] -> [a]\r\n * @sig String -> String\r\n * @param {*} list\r\n * @return {*}\r\n * @see R.head, R.init, R.last\r\n * @example\r\n *\r\n *      R.tail([1, 2, 3]);  //=> [2, 3]\r\n *      R.tail([1, 2]);     //=> [2]\r\n *      R.tail([1]);        //=> []\r\n *      R.tail([]);         //=> []\r\n *\r\n *      R.tail('abc');  //=> 'bc'\r\n *      R.tail('ab');   //=> 'b'\r\n *      R.tail('a');    //=> ''\r\n *      R.tail('');     //=> ''\r\n */\n\nvar tail = /*#__PURE__*/_curry1( /*#__PURE__*/_checkForMethod('tail', /*#__PURE__*/slice(1, Infinity)));\n\nexport default tail;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/tail.js"],"names":["_checkForMethod","_curry1","slice","tail","Infinity"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,+BAA5B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,IAAI,GACR,aACAF,OAAO,EACP,aACAD,eAAe,CAAC,MAAD,EACf,aACAE,KAAK,CAAC,CAAD,EAAIE,QAAJ,CAFU,CAFR,CAFP;;AAQA,eAAeD,IAAf","sourcesContent":["import _checkForMethod from \"./internal/_checkForMethod.js\";\r\nimport _curry1 from \"./internal/_curry1.js\";\r\nimport slice from \"./slice.js\";\r\n/**\r\n * Returns all but the first element of the given list or string (or object\r\n * with a `tail` method).\r\n *\r\n * Dispatches to the `slice` method of the first argument, if present.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category List\r\n * @sig [a] -> [a]\r\n * @sig String -> String\r\n * @param {*} list\r\n * @return {*}\r\n * @see R.head, R.init, R.last\r\n * @example\r\n *\r\n *      R.tail([1, 2, 3]);  //=> [2, 3]\r\n *      R.tail([1, 2]);     //=> [2]\r\n *      R.tail([1]);        //=> []\r\n *      R.tail([]);         //=> []\r\n *\r\n *      R.tail('abc');  //=> 'bc'\r\n *      R.tail('ab');   //=> 'b'\r\n *      R.tail('a');    //=> ''\r\n *      R.tail('');     //=> ''\r\n */\r\n\r\nvar tail =\r\n/*#__PURE__*/\r\n_curry1(\r\n/*#__PURE__*/\r\n_checkForMethod('tail',\r\n/*#__PURE__*/\r\nslice(1, Infinity)));\r\n\r\nexport default tail;"]},"metadata":{},"sourceType":"module"}