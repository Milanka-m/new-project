{"ast":null,"code":"import _arity from \"./internal/_arity.js\";\nimport _curry1 from \"./internal/_curry1.js\";\nimport map from \"./map.js\";\nimport max from \"./max.js\";\nimport reduce from \"./reduce.js\";\n/**\r\n * Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.\r\n * `R.cond` takes a list of [predicate, transformer] pairs. All of the arguments\r\n * to `fn` are applied to each of the predicates in turn until one returns a\r\n * \"truthy\" value, at which point `fn` returns the result of applying its\r\n * arguments to the corresponding transformer. If none of the predicates\r\n * matches, `fn` returns undefined.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.6.0\r\n * @category Logic\r\n * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)\r\n * @param {Array} pairs A list of [predicate, transformer]\r\n * @return {Function}\r\n * @see R.ifElse, R.unless, R.when\r\n * @example\r\n *\r\n *      const fn = R.cond([\r\n *        [R.equals(0),   R.always('water freezes at 0°C')],\r\n *        [R.equals(100), R.always('water boils at 100°C')],\r\n *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']\r\n *      ]);\r\n *      fn(0); //=> 'water freezes at 0°C'\r\n *      fn(50); //=> 'nothing special happens at 50°C'\r\n *      fn(100); //=> 'water boils at 100°C'\r\n */\n\nvar cond = /*#__PURE__*/_curry1(function cond(pairs) {\n  var arity = reduce(max, 0, map(function (pair) {\n    return pair[0].length;\n  }, pairs));\n  return _arity(arity, function () {\n    var idx = 0;\n\n    while (idx < pairs.length) {\n      if (pairs[idx][0].apply(this, arguments)) {\n        return pairs[idx][1].apply(this, arguments);\n      }\n\n      idx += 1;\n    }\n  });\n});\n\nexport default cond;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/cond.js"],"names":["_arity","_curry1","map","max","reduce","cond","pairs","arity","pair","length","idx","apply","arguments"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,IAAI,GACR,aACAJ,OAAO,CAAC,SAASI,IAAT,CAAcC,KAAd,EAAqB;AAC3B,MAAIC,KAAK,GAAGH,MAAM,CAACD,GAAD,EAAM,CAAN,EAASD,GAAG,CAAC,UAAUM,IAAV,EAAgB;AAC7C,WAAOA,IAAI,CAAC,CAAD,CAAJ,CAAQC,MAAf;AACD,GAF6B,EAE3BH,KAF2B,CAAZ,CAAlB;AAGA,SAAON,MAAM,CAACO,KAAD,EAAQ,YAAY;AAC/B,QAAIG,GAAG,GAAG,CAAV;;AAEA,WAAOA,GAAG,GAAGJ,KAAK,CAACG,MAAnB,EAA2B;AACzB,UAAIH,KAAK,CAACI,GAAD,CAAL,CAAW,CAAX,EAAcC,KAAd,CAAoB,IAApB,EAA0BC,SAA1B,CAAJ,EAA0C;AACxC,eAAON,KAAK,CAACI,GAAD,CAAL,CAAW,CAAX,EAAcC,KAAd,CAAoB,IAApB,EAA0BC,SAA1B,CAAP;AACD;;AAEDF,MAAAA,GAAG,IAAI,CAAP;AACD;AACF,GAVY,CAAb;AAWD,CAfM,CAFP;;AAmBA,eAAeL,IAAf","sourcesContent":["import _arity from \"./internal/_arity.js\";\r\nimport _curry1 from \"./internal/_curry1.js\";\r\nimport map from \"./map.js\";\r\nimport max from \"./max.js\";\r\nimport reduce from \"./reduce.js\";\r\n/**\r\n * Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.\r\n * `R.cond` takes a list of [predicate, transformer] pairs. All of the arguments\r\n * to `fn` are applied to each of the predicates in turn until one returns a\r\n * \"truthy\" value, at which point `fn` returns the result of applying its\r\n * arguments to the corresponding transformer. If none of the predicates\r\n * matches, `fn` returns undefined.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.6.0\r\n * @category Logic\r\n * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)\r\n * @param {Array} pairs A list of [predicate, transformer]\r\n * @return {Function}\r\n * @see R.ifElse, R.unless, R.when\r\n * @example\r\n *\r\n *      const fn = R.cond([\r\n *        [R.equals(0),   R.always('water freezes at 0°C')],\r\n *        [R.equals(100), R.always('water boils at 100°C')],\r\n *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']\r\n *      ]);\r\n *      fn(0); //=> 'water freezes at 0°C'\r\n *      fn(50); //=> 'nothing special happens at 50°C'\r\n *      fn(100); //=> 'water boils at 100°C'\r\n */\r\n\r\nvar cond =\r\n/*#__PURE__*/\r\n_curry1(function cond(pairs) {\r\n  var arity = reduce(max, 0, map(function (pair) {\r\n    return pair[0].length;\r\n  }, pairs));\r\n  return _arity(arity, function () {\r\n    var idx = 0;\r\n\r\n    while (idx < pairs.length) {\r\n      if (pairs[idx][0].apply(this, arguments)) {\r\n        return pairs[idx][1].apply(this, arguments);\r\n      }\r\n\r\n      idx += 1;\r\n    }\r\n  });\r\n});\r\n\r\nexport default cond;"]},"metadata":{},"sourceType":"module"}