{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\n/**\r\n * Calls an input function `n` times, returning an array containing the results\r\n * of those function calls.\r\n *\r\n * `fn` is passed one argument: The current value of `n`, which begins at `0`\r\n * and is gradually incremented to `n - 1`.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.2.3\r\n * @category List\r\n * @sig (Number -> a) -> Number -> [a]\r\n * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.\r\n * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.\r\n * @return {Array} An array containing the return values of all calls to `fn`.\r\n * @see R.repeat\r\n * @example\r\n *\r\n *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]\r\n * @symb R.times(f, 0) = []\r\n * @symb R.times(f, 1) = [f(0)]\r\n * @symb R.times(f, 2) = [f(0), f(1)]\r\n */\n\nvar times = /*#__PURE__*/_curry2(function times(fn, n) {\n  var len = Number(n);\n  var idx = 0;\n  var list;\n\n  if (len < 0 || isNaN(len)) {\n    throw new RangeError('n must be a non-negative number');\n  }\n\n  list = new Array(len);\n\n  while (idx < len) {\n    list[idx] = fn(idx);\n    idx += 1;\n  }\n\n  return list;\n});\n\nexport default times;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/times.js"],"names":["_curry2","times","fn","n","len","Number","idx","list","isNaN","RangeError","Array"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,KAAK,GACT,aACAD,OAAO,CAAC,SAASC,KAAT,CAAeC,EAAf,EAAmBC,CAAnB,EAAsB;AAC5B,MAAIC,GAAG,GAAGC,MAAM,CAACF,CAAD,CAAhB;AACA,MAAIG,GAAG,GAAG,CAAV;AACA,MAAIC,IAAJ;;AAEA,MAAIH,GAAG,GAAG,CAAN,IAAWI,KAAK,CAACJ,GAAD,CAApB,EAA2B;AACzB,UAAM,IAAIK,UAAJ,CAAe,iCAAf,CAAN;AACD;;AAEDF,EAAAA,IAAI,GAAG,IAAIG,KAAJ,CAAUN,GAAV,CAAP;;AAEA,SAAOE,GAAG,GAAGF,GAAb,EAAkB;AAChBG,IAAAA,IAAI,CAACD,GAAD,CAAJ,GAAYJ,EAAE,CAACI,GAAD,CAAd;AACAA,IAAAA,GAAG,IAAI,CAAP;AACD;;AAED,SAAOC,IAAP;AACD,CAjBM,CAFP;;AAqBA,eAAeN,KAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\n/**\r\n * Calls an input function `n` times, returning an array containing the results\r\n * of those function calls.\r\n *\r\n * `fn` is passed one argument: The current value of `n`, which begins at `0`\r\n * and is gradually incremented to `n - 1`.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.2.3\r\n * @category List\r\n * @sig (Number -> a) -> Number -> [a]\r\n * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.\r\n * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.\r\n * @return {Array} An array containing the return values of all calls to `fn`.\r\n * @see R.repeat\r\n * @example\r\n *\r\n *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]\r\n * @symb R.times(f, 0) = []\r\n * @symb R.times(f, 1) = [f(0)]\r\n * @symb R.times(f, 2) = [f(0), f(1)]\r\n */\r\n\r\nvar times =\r\n/*#__PURE__*/\r\n_curry2(function times(fn, n) {\r\n  var len = Number(n);\r\n  var idx = 0;\r\n  var list;\r\n\r\n  if (len < 0 || isNaN(len)) {\r\n    throw new RangeError('n must be a non-negative number');\r\n  }\r\n\r\n  list = new Array(len);\r\n\r\n  while (idx < len) {\r\n    list[idx] = fn(idx);\r\n    idx += 1;\r\n  }\r\n\r\n  return list;\r\n});\r\n\r\nexport default times;"]},"metadata":{},"sourceType":"module"}