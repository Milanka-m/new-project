{"ast":null,"code":"import _objectAssign from \"./internal/_objectAssign.js\";\nimport _curry2 from \"./internal/_curry2.js\";\n/**\r\n * Create a new object with the own properties of the first object merged with\r\n * the own properties of the second object. If a key exists in both objects,\r\n * the value from the first object will be used.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.26.0\r\n * @category Object\r\n * @sig {k: v} -> {k: v} -> {k: v}\r\n * @param {Object} l\r\n * @param {Object} r\r\n * @return {Object}\r\n * @see R.mergeRight, R.mergeDeepLeft, R.mergeWith, R.mergeWithKey\r\n * @example\r\n *\r\n *      R.mergeLeft({ 'age': 40 }, { 'name': 'fred', 'age': 10 });\r\n *      //=> { 'name': 'fred', 'age': 40 }\r\n *\r\n *      const resetToDefault = R.mergeLeft({x: 0});\r\n *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}\r\n * @symb R.mergeLeft(a, b) = {...b, ...a}\r\n */\n\nvar mergeLeft = /*#__PURE__*/_curry2(function mergeLeft(l, r) {\n  return _objectAssign({}, r, l);\n});\n\nexport default mergeLeft;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/mergeLeft.js"],"names":["_objectAssign","_curry2","mergeLeft","l","r"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,6BAA1B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,SAAS,GACb,aACAD,OAAO,CAAC,SAASC,SAAT,CAAmBC,CAAnB,EAAsBC,CAAtB,EAAyB;AAC/B,SAAOJ,aAAa,CAAC,EAAD,EAAKI,CAAL,EAAQD,CAAR,CAApB;AACD,CAFM,CAFP;;AAMA,eAAeD,SAAf","sourcesContent":["import _objectAssign from \"./internal/_objectAssign.js\";\r\nimport _curry2 from \"./internal/_curry2.js\";\r\n/**\r\n * Create a new object with the own properties of the first object merged with\r\n * the own properties of the second object. If a key exists in both objects,\r\n * the value from the first object will be used.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.26.0\r\n * @category Object\r\n * @sig {k: v} -> {k: v} -> {k: v}\r\n * @param {Object} l\r\n * @param {Object} r\r\n * @return {Object}\r\n * @see R.mergeRight, R.mergeDeepLeft, R.mergeWith, R.mergeWithKey\r\n * @example\r\n *\r\n *      R.mergeLeft({ 'age': 40 }, { 'name': 'fred', 'age': 10 });\r\n *      //=> { 'name': 'fred', 'age': 40 }\r\n *\r\n *      const resetToDefault = R.mergeLeft({x: 0});\r\n *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}\r\n * @symb R.mergeLeft(a, b) = {...b, ...a}\r\n */\r\n\r\nvar mergeLeft =\r\n/*#__PURE__*/\r\n_curry2(function mergeLeft(l, r) {\r\n  return _objectAssign({}, r, l);\r\n});\r\n\r\nexport default mergeLeft;"]},"metadata":{},"sourceType":"module"}