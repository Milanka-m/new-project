{"ast":null,"code":"import _curry3 from \"./internal/_curry3.js\";\n/**\r\n * The `mapAccumRight` function behaves like a combination of map and reduce; it\r\n * applies a function to each element of a list, passing an accumulating\r\n * parameter from right to left, and returning a final value of this\r\n * accumulator together with the new list.\r\n *\r\n * Similar to [`mapAccum`](#mapAccum), except moves through the input list from\r\n * the right to the left.\r\n *\r\n * The iterator function receives two arguments, *acc* and *value*, and should\r\n * return a tuple *[acc, value]*.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.10.0\r\n * @category List\r\n * @sig ((acc, x) -> (acc, y)) -> acc -> [x] -> (acc, [y])\r\n * @param {Function} fn The function to be called on every element of the input `list`.\r\n * @param {*} acc The accumulator value.\r\n * @param {Array} list The list to iterate over.\r\n * @return {*} The final, accumulated value.\r\n * @see R.addIndex, R.mapAccum\r\n * @example\r\n *\r\n *      const digits = ['1', '2', '3', '4'];\r\n *      const appender = (a, b) => [b + a, b + a];\r\n *\r\n *      R.mapAccumRight(appender, 5, digits); //=> ['12345', ['12345', '2345', '345', '45']]\r\n * @symb R.mapAccumRight(f, a, [b, c, d]) = [\r\n *   f(f(f(a, d)[0], c)[0], b)[0],\r\n *   [\r\n *     f(a, d)[1],\r\n *     f(f(a, d)[0], c)[1],\r\n *     f(f(f(a, d)[0], c)[0], b)[1]\r\n *   ]\r\n * ]\r\n */\n\nvar mapAccumRight = /*#__PURE__*/_curry3(function mapAccumRight(fn, acc, list) {\n  var idx = list.length - 1;\n  var result = [];\n  var tuple = [acc];\n\n  while (idx >= 0) {\n    tuple = fn(tuple[0], list[idx]);\n    result[idx] = tuple[1];\n    idx -= 1;\n  }\n\n  return [tuple[0], result];\n});\n\nexport default mapAccumRight;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/mapAccumRight.js"],"names":["_curry3","mapAccumRight","fn","acc","list","idx","length","result","tuple"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,aAAa,GACjB,aACAD,OAAO,CAAC,SAASC,aAAT,CAAuBC,EAAvB,EAA2BC,GAA3B,EAAgCC,IAAhC,EAAsC;AAC5C,MAAIC,GAAG,GAAGD,IAAI,CAACE,MAAL,GAAc,CAAxB;AACA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,KAAK,GAAG,CAACL,GAAD,CAAZ;;AAEA,SAAOE,GAAG,IAAI,CAAd,EAAiB;AACfG,IAAAA,KAAK,GAAGN,EAAE,CAACM,KAAK,CAAC,CAAD,CAAN,EAAWJ,IAAI,CAACC,GAAD,CAAf,CAAV;AACAE,IAAAA,MAAM,CAACF,GAAD,CAAN,GAAcG,KAAK,CAAC,CAAD,CAAnB;AACAH,IAAAA,GAAG,IAAI,CAAP;AACD;;AAED,SAAO,CAACG,KAAK,CAAC,CAAD,CAAN,EAAWD,MAAX,CAAP;AACD,CAZM,CAFP;;AAgBA,eAAeN,aAAf","sourcesContent":["import _curry3 from \"./internal/_curry3.js\";\r\n/**\r\n * The `mapAccumRight` function behaves like a combination of map and reduce; it\r\n * applies a function to each element of a list, passing an accumulating\r\n * parameter from right to left, and returning a final value of this\r\n * accumulator together with the new list.\r\n *\r\n * Similar to [`mapAccum`](#mapAccum), except moves through the input list from\r\n * the right to the left.\r\n *\r\n * The iterator function receives two arguments, *acc* and *value*, and should\r\n * return a tuple *[acc, value]*.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.10.0\r\n * @category List\r\n * @sig ((acc, x) -> (acc, y)) -> acc -> [x] -> (acc, [y])\r\n * @param {Function} fn The function to be called on every element of the input `list`.\r\n * @param {*} acc The accumulator value.\r\n * @param {Array} list The list to iterate over.\r\n * @return {*} The final, accumulated value.\r\n * @see R.addIndex, R.mapAccum\r\n * @example\r\n *\r\n *      const digits = ['1', '2', '3', '4'];\r\n *      const appender = (a, b) => [b + a, b + a];\r\n *\r\n *      R.mapAccumRight(appender, 5, digits); //=> ['12345', ['12345', '2345', '345', '45']]\r\n * @symb R.mapAccumRight(f, a, [b, c, d]) = [\r\n *   f(f(f(a, d)[0], c)[0], b)[0],\r\n *   [\r\n *     f(a, d)[1],\r\n *     f(f(a, d)[0], c)[1],\r\n *     f(f(f(a, d)[0], c)[0], b)[1]\r\n *   ]\r\n * ]\r\n */\r\n\r\nvar mapAccumRight =\r\n/*#__PURE__*/\r\n_curry3(function mapAccumRight(fn, acc, list) {\r\n  var idx = list.length - 1;\r\n  var result = [];\r\n  var tuple = [acc];\r\n\r\n  while (idx >= 0) {\r\n    tuple = fn(tuple[0], list[idx]);\r\n    result[idx] = tuple[1];\r\n    idx -= 1;\r\n  }\r\n\r\n  return [tuple[0], result];\r\n});\r\n\r\nexport default mapAccumRight;"]},"metadata":{},"sourceType":"module"}