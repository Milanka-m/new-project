{"ast":null,"code":"import _classCallCheck from \"D:\\\\Lianok\\\\dev\\\\new-project\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Lianok\\\\dev\\\\new-project\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport logger from '../logger';\nimport { IFRAME_ID } from '../constants';\nexport var eventEmitter = function eventEmitter(window) {\n  return {\n    postMessage: function postMessage(message, targetOrigin) {\n      window.postMessage(message, targetOrigin);\n    }\n  };\n}; // TODO: Duplicate types in CivicSign\n// Move to a central repo or use TS paths\n\nexport var CivicSignEventTypeResponse;\n\n(function (CivicSignEventTypeResponse) {\n  CivicSignEventTypeResponse[\"RESPONSE_PUBLIC_KEY\"] = \"RESPONSE_PUBLIC_KEY\";\n  CivicSignEventTypeResponse[\"RESPONSE_DID\"] = \"RESPONSE_DID\";\n  CivicSignEventTypeResponse[\"RESPONSE_SIGNED_PROOF\"] = \"RESPONSE_SIGNED_PROOF\";\n})(CivicSignEventTypeResponse || (CivicSignEventTypeResponse = {}));\n\nexport var CivicSignEventTypeRequest;\n\n(function (CivicSignEventTypeRequest) {\n  CivicSignEventTypeRequest[\"REQUEST_PUBLIC_KEY\"] = \"REQUEST_PUBLIC_KEY\";\n  CivicSignEventTypeRequest[\"REQUEST_DID\"] = \"REQUEST_DID\";\n  CivicSignEventTypeRequest[\"REQUEST_SIGNED_PROOF\"] = \"REQUEST_SIGNED_PROOF\";\n})(CivicSignEventTypeRequest || (CivicSignEventTypeRequest = {}));\n\nexport var RemoteSignWindowEventEmitter = /*#__PURE__*/function () {\n  function RemoteSignWindowEventEmitter(targetWindow) {\n    _classCallCheck(this, RemoteSignWindowEventEmitter);\n\n    this.targetWindow = targetWindow;\n  }\n\n  _createClass(RemoteSignWindowEventEmitter, [{\n    key: \"sendPublicKey\",\n    value: function sendPublicKey(publicKey) {\n      this.emit({\n        event: CivicSignEventTypeResponse.RESPONSE_PUBLIC_KEY,\n        data: publicKey\n      });\n    }\n  }, {\n    key: \"sendDid\",\n    value: function sendDid(did) {\n      this.emit({\n        event: CivicSignEventTypeResponse.RESPONSE_DID,\n        data: did\n      });\n    }\n  }, {\n    key: \"sendSignedProof\",\n    value: function sendSignedProof(proof) {\n      this.emit({\n        event: CivicSignEventTypeResponse.RESPONSE_SIGNED_PROOF,\n        data: proof\n      });\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(event) {\n      this.targetWindow.postMessage(event, '*');\n    }\n  }]);\n\n  return RemoteSignWindowEventEmitter;\n}();\nexport var remoteSignWindowEventEmitterImplementation = function remoteSignWindowEventEmitterImplementation() {\n  var _a;\n\n  var iFrameWindow = (_a = document.getElementById(IFRAME_ID)) === null || _a === void 0 ? void 0 : _a.contentWindow;\n\n  if (!iFrameWindow) {\n    logger.error('no iFrame window present');\n    return null;\n  }\n\n  return new RemoteSignWindowEventEmitter(eventEmitter(iFrameWindow));\n};","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/@civic/solana-gateway-react/dist/esm/utils/remoteSign.js"],"names":["logger","IFRAME_ID","eventEmitter","window","postMessage","message","targetOrigin","CivicSignEventTypeResponse","CivicSignEventTypeRequest","RemoteSignWindowEventEmitter","targetWindow","publicKey","emit","event","RESPONSE_PUBLIC_KEY","data","did","RESPONSE_DID","proof","RESPONSE_SIGNED_PROOF","remoteSignWindowEventEmitterImplementation","_a","iFrameWindow","document","getElementById","contentWindow","error"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,WAAnB;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD,EAAY;AACpC,SAAO;AACHC,IAAAA,WAAW,EAAE,qBAACC,OAAD,EAAUC,YAAV,EAA2B;AACpCH,MAAAA,MAAM,CAACC,WAAP,CAAmBC,OAAnB,EAA4BC,YAA5B;AACH;AAHE,GAAP;AAKH,CANM,C,CAOP;AACA;;AACA,OAAO,IAAIC,0BAAJ;;AACP,CAAC,UAAUA,0BAAV,EAAsC;AACnCA,EAAAA,0BAA0B,CAAC,qBAAD,CAA1B,GAAoD,qBAApD;AACAA,EAAAA,0BAA0B,CAAC,cAAD,CAA1B,GAA6C,cAA7C;AACAA,EAAAA,0BAA0B,CAAC,uBAAD,CAA1B,GAAsD,uBAAtD;AACH,CAJD,EAIGA,0BAA0B,KAAKA,0BAA0B,GAAG,EAAlC,CAJ7B;;AAKA,OAAO,IAAIC,yBAAJ;;AACP,CAAC,UAAUA,yBAAV,EAAqC;AAClCA,EAAAA,yBAAyB,CAAC,oBAAD,CAAzB,GAAkD,oBAAlD;AACAA,EAAAA,yBAAyB,CAAC,aAAD,CAAzB,GAA2C,aAA3C;AACAA,EAAAA,yBAAyB,CAAC,sBAAD,CAAzB,GAAoD,sBAApD;AACH,CAJD,EAIGA,yBAAyB,KAAKA,yBAAyB,GAAG,EAAjC,CAJ5B;;AAKA,WAAaC,4BAAb;AACI,wCAAYC,YAAZ,EAA0B;AAAA;;AACtB,SAAKA,YAAL,GAAoBA,YAApB;AACH;;AAHL;AAAA;AAAA,WAII,uBAAcC,SAAd,EAAyB;AACrB,WAAKC,IAAL,CAAU;AACNC,QAAAA,KAAK,EAAEN,0BAA0B,CAACO,mBAD5B;AAENC,QAAAA,IAAI,EAAEJ;AAFA,OAAV;AAIH;AATL;AAAA;AAAA,WAUI,iBAAQK,GAAR,EAAa;AACT,WAAKJ,IAAL,CAAU;AACNC,QAAAA,KAAK,EAAEN,0BAA0B,CAACU,YAD5B;AAENF,QAAAA,IAAI,EAAEC;AAFA,OAAV;AAIH;AAfL;AAAA;AAAA,WAgBI,yBAAgBE,KAAhB,EAAuB;AACnB,WAAKN,IAAL,CAAU;AACNC,QAAAA,KAAK,EAAEN,0BAA0B,CAACY,qBAD5B;AAENJ,QAAAA,IAAI,EAAEG;AAFA,OAAV;AAIH;AArBL;AAAA;AAAA,WAsBI,cAAKL,KAAL,EAAY;AACR,WAAKH,YAAL,CAAkBN,WAAlB,CAA8BS,KAA9B,EAAqC,GAArC;AACH;AAxBL;;AAAA;AAAA;AA0BA,OAAO,IAAMO,0CAA0C,GAAG,SAA7CA,0CAA6C,GAAM;AAC5D,MAAIC,EAAJ;;AACA,MAAMC,YAAY,GAAG,CAACD,EAAE,GAAGE,QAAQ,CAACC,cAAT,CAAwBvB,SAAxB,CAAN,MAA8C,IAA9C,IAAsDoB,EAAE,KAAK,KAAK,CAAlE,GAAsE,KAAK,CAA3E,GAA+EA,EAAE,CAACI,aAAvG;;AACA,MAAI,CAACH,YAAL,EAAmB;AACftB,IAAAA,MAAM,CAAC0B,KAAP,CAAa,0BAAb;AACA,WAAO,IAAP;AACH;;AACD,SAAO,IAAIjB,4BAAJ,CAAiCP,YAAY,CAACoB,YAAD,CAA7C,CAAP;AACH,CARM","sourcesContent":["import logger from '../logger';\r\nimport { IFRAME_ID } from '../constants';\r\nexport const eventEmitter = (window) => {\r\n    return {\r\n        postMessage: (message, targetOrigin) => {\r\n            window.postMessage(message, targetOrigin);\r\n        },\r\n    };\r\n};\r\n// TODO: Duplicate types in CivicSign\r\n// Move to a central repo or use TS paths\r\nexport var CivicSignEventTypeResponse;\r\n(function (CivicSignEventTypeResponse) {\r\n    CivicSignEventTypeResponse[\"RESPONSE_PUBLIC_KEY\"] = \"RESPONSE_PUBLIC_KEY\";\r\n    CivicSignEventTypeResponse[\"RESPONSE_DID\"] = \"RESPONSE_DID\";\r\n    CivicSignEventTypeResponse[\"RESPONSE_SIGNED_PROOF\"] = \"RESPONSE_SIGNED_PROOF\";\r\n})(CivicSignEventTypeResponse || (CivicSignEventTypeResponse = {}));\r\nexport var CivicSignEventTypeRequest;\r\n(function (CivicSignEventTypeRequest) {\r\n    CivicSignEventTypeRequest[\"REQUEST_PUBLIC_KEY\"] = \"REQUEST_PUBLIC_KEY\";\r\n    CivicSignEventTypeRequest[\"REQUEST_DID\"] = \"REQUEST_DID\";\r\n    CivicSignEventTypeRequest[\"REQUEST_SIGNED_PROOF\"] = \"REQUEST_SIGNED_PROOF\";\r\n})(CivicSignEventTypeRequest || (CivicSignEventTypeRequest = {}));\r\nexport class RemoteSignWindowEventEmitter {\r\n    constructor(targetWindow) {\r\n        this.targetWindow = targetWindow;\r\n    }\r\n    sendPublicKey(publicKey) {\r\n        this.emit({\r\n            event: CivicSignEventTypeResponse.RESPONSE_PUBLIC_KEY,\r\n            data: publicKey,\r\n        });\r\n    }\r\n    sendDid(did) {\r\n        this.emit({\r\n            event: CivicSignEventTypeResponse.RESPONSE_DID,\r\n            data: did,\r\n        });\r\n    }\r\n    sendSignedProof(proof) {\r\n        this.emit({\r\n            event: CivicSignEventTypeResponse.RESPONSE_SIGNED_PROOF,\r\n            data: proof,\r\n        });\r\n    }\r\n    emit(event) {\r\n        this.targetWindow.postMessage(event, '*');\r\n    }\r\n}\r\nexport const remoteSignWindowEventEmitterImplementation = () => {\r\n    var _a;\r\n    const iFrameWindow = (_a = document.getElementById(IFRAME_ID)) === null || _a === void 0 ? void 0 : _a.contentWindow;\r\n    if (!iFrameWindow) {\r\n        logger.error('no iFrame window present');\r\n        return null;\r\n    }\r\n    return new RemoteSignWindowEventEmitter(eventEmitter(iFrameWindow));\r\n};\r\n"]},"metadata":{},"sourceType":"module"}