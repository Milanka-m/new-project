{"ast":null,"code":"import _curry3 from \"./internal/_curry3.js\";\n/**\r\n * `o` is a curried composition function that returns a unary function.\r\n * Like [`compose`](#compose), `o` performs right-to-left function composition.\r\n * Unlike [`compose`](#compose), the rightmost function passed to `o` will be\r\n * invoked with only one argument. Also, unlike [`compose`](#compose), `o` is\r\n * limited to accepting only 2 unary functions. The name o was chosen because\r\n * of its similarity to the mathematical composition operator ∘.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.24.0\r\n * @category Function\r\n * @sig (b -> c) -> (a -> b) -> a -> c\r\n * @param {Function} f\r\n * @param {Function} g\r\n * @return {Function}\r\n * @see R.compose, R.pipe\r\n * @example\r\n *\r\n *      const classyGreeting = name => \"The name's \" + name.last + \", \" + name.first + \" \" + name.last\r\n *      const yellGreeting = R.o(R.toUpper, classyGreeting);\r\n *      yellGreeting({first: 'James', last: 'Bond'}); //=> \"THE NAME'S BOND, JAMES BOND\"\r\n *\r\n *      R.o(R.multiply(10), R.add(10))(-4) //=> 60\r\n *\r\n * @symb R.o(f, g, x) = f(g(x))\r\n */\n\nvar o = /*#__PURE__*/_curry3(function o(f, g, x) {\n  return f(g(x));\n});\n\nexport default o;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/o.js"],"names":["_curry3","o","f","g","x"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,CAAC,GACL,aACAD,OAAO,CAAC,SAASC,CAAT,CAAWC,CAAX,EAAcC,CAAd,EAAiBC,CAAjB,EAAoB;AAC1B,SAAOF,CAAC,CAACC,CAAC,CAACC,CAAD,CAAF,CAAR;AACD,CAFM,CAFP;;AAMA,eAAeH,CAAf","sourcesContent":["import _curry3 from \"./internal/_curry3.js\";\r\n/**\r\n * `o` is a curried composition function that returns a unary function.\r\n * Like [`compose`](#compose), `o` performs right-to-left function composition.\r\n * Unlike [`compose`](#compose), the rightmost function passed to `o` will be\r\n * invoked with only one argument. Also, unlike [`compose`](#compose), `o` is\r\n * limited to accepting only 2 unary functions. The name o was chosen because\r\n * of its similarity to the mathematical composition operator ∘.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.24.0\r\n * @category Function\r\n * @sig (b -> c) -> (a -> b) -> a -> c\r\n * @param {Function} f\r\n * @param {Function} g\r\n * @return {Function}\r\n * @see R.compose, R.pipe\r\n * @example\r\n *\r\n *      const classyGreeting = name => \"The name's \" + name.last + \", \" + name.first + \" \" + name.last\r\n *      const yellGreeting = R.o(R.toUpper, classyGreeting);\r\n *      yellGreeting({first: 'James', last: 'Bond'}); //=> \"THE NAME'S BOND, JAMES BOND\"\r\n *\r\n *      R.o(R.multiply(10), R.add(10))(-4) //=> 60\r\n *\r\n * @symb R.o(f, g, x) = f(g(x))\r\n */\r\n\r\nvar o =\r\n/*#__PURE__*/\r\n_curry3(function o(f, g, x) {\r\n  return f(g(x));\r\n});\r\n\r\nexport default o;"]},"metadata":{},"sourceType":"module"}