{"ast":null,"code":"import _includes from \"./internal/_includes.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport _filter from \"./internal/_filter.js\";\nimport flip from \"./flip.js\";\nimport uniq from \"./uniq.js\";\n/**\r\n * Combines two lists into a set (i.e. no duplicates) composed of those\r\n * elements common to both lists.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Relation\r\n * @sig [*] -> [*] -> [*]\r\n * @param {Array} list1 The first list.\r\n * @param {Array} list2 The second list.\r\n * @return {Array} The list of elements found in both `list1` and `list2`.\r\n * @see R.innerJoin\r\n * @example\r\n *\r\n *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]\r\n */\n\nvar intersection = /*#__PURE__*/_curry2(function intersection(list1, list2) {\n  var lookupList, filteredList;\n\n  if (list1.length > list2.length) {\n    lookupList = list1;\n    filteredList = list2;\n  } else {\n    lookupList = list2;\n    filteredList = list1;\n  }\n\n  return uniq(_filter(flip(_includes)(lookupList), filteredList));\n});\n\nexport default intersection;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/intersection.js"],"names":["_includes","_curry2","_filter","flip","uniq","intersection","list1","list2","lookupList","filteredList","length"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,yBAAtB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,YAAY,GAChB,aACAJ,OAAO,CAAC,SAASI,YAAT,CAAsBC,KAAtB,EAA6BC,KAA7B,EAAoC;AAC1C,MAAIC,UAAJ,EAAgBC,YAAhB;;AAEA,MAAIH,KAAK,CAACI,MAAN,GAAeH,KAAK,CAACG,MAAzB,EAAiC;AAC/BF,IAAAA,UAAU,GAAGF,KAAb;AACAG,IAAAA,YAAY,GAAGF,KAAf;AACD,GAHD,MAGO;AACLC,IAAAA,UAAU,GAAGD,KAAb;AACAE,IAAAA,YAAY,GAAGH,KAAf;AACD;;AAED,SAAOF,IAAI,CAACF,OAAO,CAACC,IAAI,CAACH,SAAD,CAAJ,CAAgBQ,UAAhB,CAAD,EAA8BC,YAA9B,CAAR,CAAX;AACD,CAZM,CAFP;;AAgBA,eAAeJ,YAAf","sourcesContent":["import _includes from \"./internal/_includes.js\";\r\nimport _curry2 from \"./internal/_curry2.js\";\r\nimport _filter from \"./internal/_filter.js\";\r\nimport flip from \"./flip.js\";\r\nimport uniq from \"./uniq.js\";\r\n/**\r\n * Combines two lists into a set (i.e. no duplicates) composed of those\r\n * elements common to both lists.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Relation\r\n * @sig [*] -> [*] -> [*]\r\n * @param {Array} list1 The first list.\r\n * @param {Array} list2 The second list.\r\n * @return {Array} The list of elements found in both `list1` and `list2`.\r\n * @see R.innerJoin\r\n * @example\r\n *\r\n *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]\r\n */\r\n\r\nvar intersection =\r\n/*#__PURE__*/\r\n_curry2(function intersection(list1, list2) {\r\n  var lookupList, filteredList;\r\n\r\n  if (list1.length > list2.length) {\r\n    lookupList = list1;\r\n    filteredList = list2;\r\n  } else {\r\n    lookupList = list2;\r\n    filteredList = list1;\r\n  }\r\n\r\n  return uniq(_filter(flip(_includes)(lookupList), filteredList));\r\n});\r\n\r\nexport default intersection;"]},"metadata":{},"sourceType":"module"}