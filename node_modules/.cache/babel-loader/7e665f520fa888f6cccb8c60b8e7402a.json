{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport curry from \"./curry.js\";\nimport nAry from \"./nAry.js\";\n/**\r\n * Wraps a constructor function inside a curried function that can be called\r\n * with the same arguments and returns the same type. The arity of the function\r\n * returned is specified to allow using variadic constructor functions.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.4.0\r\n * @category Function\r\n * @sig Number -> (* -> {*}) -> (* -> {*})\r\n * @param {Number} n The arity of the constructor function.\r\n * @param {Function} Fn The constructor function to wrap.\r\n * @return {Function} A wrapped, curried constructor function.\r\n * @example\r\n *\r\n *      // Variadic Constructor function\r\n *      function Salad() {\r\n *        this.ingredients = arguments;\r\n *      }\r\n *\r\n *      Salad.prototype.recipe = function() {\r\n *        const instructions = R.map(ingredient => 'Add a dollop of ' + ingredient, this.ingredients);\r\n *        return R.join('\\n', instructions);\r\n *      };\r\n *\r\n *      const ThreeLayerSalad = R.constructN(3, Salad);\r\n *\r\n *      // Notice we no longer need the 'new' keyword, and the constructor is curried for 3 arguments.\r\n *      const salad = ThreeLayerSalad('Mayonnaise')('Potato Chips')('Ketchup');\r\n *\r\n *      console.log(salad.recipe());\r\n *      // Add a dollop of Mayonnaise\r\n *      // Add a dollop of Potato Chips\r\n *      // Add a dollop of Ketchup\r\n */\n\nvar constructN = /*#__PURE__*/_curry2(function constructN(n, Fn) {\n  if (n > 10) {\n    throw new Error('Constructor with greater than ten arguments');\n  }\n\n  if (n === 0) {\n    return function () {\n      return new Fn();\n    };\n  }\n\n  return curry(nAry(n, function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {\n    switch (arguments.length) {\n      case 1:\n        return new Fn($0);\n\n      case 2:\n        return new Fn($0, $1);\n\n      case 3:\n        return new Fn($0, $1, $2);\n\n      case 4:\n        return new Fn($0, $1, $2, $3);\n\n      case 5:\n        return new Fn($0, $1, $2, $3, $4);\n\n      case 6:\n        return new Fn($0, $1, $2, $3, $4, $5);\n\n      case 7:\n        return new Fn($0, $1, $2, $3, $4, $5, $6);\n\n      case 8:\n        return new Fn($0, $1, $2, $3, $4, $5, $6, $7);\n\n      case 9:\n        return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);\n\n      case 10:\n        return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);\n    }\n  }));\n});\n\nexport default constructN;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/constructN.js"],"names":["_curry2","curry","nAry","constructN","n","Fn","Error","$0","$1","$2","$3","$4","$5","$6","$7","$8","$9","arguments","length"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,UAAU,GACd,aACAH,OAAO,CAAC,SAASG,UAAT,CAAoBC,CAApB,EAAuBC,EAAvB,EAA2B;AACjC,MAAID,CAAC,GAAG,EAAR,EAAY;AACV,UAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACD;;AAED,MAAIF,CAAC,KAAK,CAAV,EAAa;AACX,WAAO,YAAY;AACjB,aAAO,IAAIC,EAAJ,EAAP;AACD,KAFD;AAGD;;AAED,SAAOJ,KAAK,CAACC,IAAI,CAACE,CAAD,EAAI,UAAUG,EAAV,EAAcC,EAAd,EAAkBC,EAAlB,EAAsBC,EAAtB,EAA0BC,EAA1B,EAA8BC,EAA9B,EAAkCC,EAAlC,EAAsCC,EAAtC,EAA0CC,EAA1C,EAA8CC,EAA9C,EAAkD;AACrE,YAAQC,SAAS,CAACC,MAAlB;AACE,WAAK,CAAL;AACE,eAAO,IAAIb,EAAJ,CAAOE,EAAP,CAAP;;AAEF,WAAK,CAAL;AACE,eAAO,IAAIF,EAAJ,CAAOE,EAAP,EAAWC,EAAX,CAAP;;AAEF,WAAK,CAAL;AACE,eAAO,IAAIH,EAAJ,CAAOE,EAAP,EAAWC,EAAX,EAAeC,EAAf,CAAP;;AAEF,WAAK,CAAL;AACE,eAAO,IAAIJ,EAAJ,CAAOE,EAAP,EAAWC,EAAX,EAAeC,EAAf,EAAmBC,EAAnB,CAAP;;AAEF,WAAK,CAAL;AACE,eAAO,IAAIL,EAAJ,CAAOE,EAAP,EAAWC,EAAX,EAAeC,EAAf,EAAmBC,EAAnB,EAAuBC,EAAvB,CAAP;;AAEF,WAAK,CAAL;AACE,eAAO,IAAIN,EAAJ,CAAOE,EAAP,EAAWC,EAAX,EAAeC,EAAf,EAAmBC,EAAnB,EAAuBC,EAAvB,EAA2BC,EAA3B,CAAP;;AAEF,WAAK,CAAL;AACE,eAAO,IAAIP,EAAJ,CAAOE,EAAP,EAAWC,EAAX,EAAeC,EAAf,EAAmBC,EAAnB,EAAuBC,EAAvB,EAA2BC,EAA3B,EAA+BC,EAA/B,CAAP;;AAEF,WAAK,CAAL;AACE,eAAO,IAAIR,EAAJ,CAAOE,EAAP,EAAWC,EAAX,EAAeC,EAAf,EAAmBC,EAAnB,EAAuBC,EAAvB,EAA2BC,EAA3B,EAA+BC,EAA/B,EAAmCC,EAAnC,CAAP;;AAEF,WAAK,CAAL;AACE,eAAO,IAAIT,EAAJ,CAAOE,EAAP,EAAWC,EAAX,EAAeC,EAAf,EAAmBC,EAAnB,EAAuBC,EAAvB,EAA2BC,EAA3B,EAA+BC,EAA/B,EAAmCC,EAAnC,EAAuCC,EAAvC,CAAP;;AAEF,WAAK,EAAL;AACE,eAAO,IAAIV,EAAJ,CAAOE,EAAP,EAAWC,EAAX,EAAeC,EAAf,EAAmBC,EAAnB,EAAuBC,EAAvB,EAA2BC,EAA3B,EAA+BC,EAA/B,EAAmCC,EAAnC,EAAuCC,EAAvC,EAA2CC,EAA3C,CAAP;AA7BJ;AA+BD,GAhCgB,CAAL,CAAZ;AAiCD,CA5CM,CAFP;;AAgDA,eAAeb,UAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\nimport curry from \"./curry.js\";\r\nimport nAry from \"./nAry.js\";\r\n/**\r\n * Wraps a constructor function inside a curried function that can be called\r\n * with the same arguments and returns the same type. The arity of the function\r\n * returned is specified to allow using variadic constructor functions.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.4.0\r\n * @category Function\r\n * @sig Number -> (* -> {*}) -> (* -> {*})\r\n * @param {Number} n The arity of the constructor function.\r\n * @param {Function} Fn The constructor function to wrap.\r\n * @return {Function} A wrapped, curried constructor function.\r\n * @example\r\n *\r\n *      // Variadic Constructor function\r\n *      function Salad() {\r\n *        this.ingredients = arguments;\r\n *      }\r\n *\r\n *      Salad.prototype.recipe = function() {\r\n *        const instructions = R.map(ingredient => 'Add a dollop of ' + ingredient, this.ingredients);\r\n *        return R.join('\\n', instructions);\r\n *      };\r\n *\r\n *      const ThreeLayerSalad = R.constructN(3, Salad);\r\n *\r\n *      // Notice we no longer need the 'new' keyword, and the constructor is curried for 3 arguments.\r\n *      const salad = ThreeLayerSalad('Mayonnaise')('Potato Chips')('Ketchup');\r\n *\r\n *      console.log(salad.recipe());\r\n *      // Add a dollop of Mayonnaise\r\n *      // Add a dollop of Potato Chips\r\n *      // Add a dollop of Ketchup\r\n */\r\n\r\nvar constructN =\r\n/*#__PURE__*/\r\n_curry2(function constructN(n, Fn) {\r\n  if (n > 10) {\r\n    throw new Error('Constructor with greater than ten arguments');\r\n  }\r\n\r\n  if (n === 0) {\r\n    return function () {\r\n      return new Fn();\r\n    };\r\n  }\r\n\r\n  return curry(nAry(n, function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {\r\n    switch (arguments.length) {\r\n      case 1:\r\n        return new Fn($0);\r\n\r\n      case 2:\r\n        return new Fn($0, $1);\r\n\r\n      case 3:\r\n        return new Fn($0, $1, $2);\r\n\r\n      case 4:\r\n        return new Fn($0, $1, $2, $3);\r\n\r\n      case 5:\r\n        return new Fn($0, $1, $2, $3, $4);\r\n\r\n      case 6:\r\n        return new Fn($0, $1, $2, $3, $4, $5);\r\n\r\n      case 7:\r\n        return new Fn($0, $1, $2, $3, $4, $5, $6);\r\n\r\n      case 8:\r\n        return new Fn($0, $1, $2, $3, $4, $5, $6, $7);\r\n\r\n      case 9:\r\n        return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);\r\n\r\n      case 10:\r\n        return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);\r\n    }\r\n  }));\r\n});\r\n\r\nexport default constructN;"]},"metadata":{},"sourceType":"module"}