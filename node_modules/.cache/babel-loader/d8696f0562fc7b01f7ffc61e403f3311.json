{"ast":null,"code":"import _clone from \"./internal/_clone.js\";\nimport _curry3 from \"./internal/_curry3.js\";\nimport _isTransformer from \"./internal/_isTransformer.js\";\nimport _reduce from \"./internal/_reduce.js\";\nimport _stepCat from \"./internal/_stepCat.js\";\n/**\r\n * Transforms the items of the list with the transducer and appends the\r\n * transformed items to the accumulator using an appropriate iterator function\r\n * based on the accumulator type.\r\n *\r\n * The accumulator can be an array, string, object or a transformer. Iterated\r\n * items will be appended to arrays and concatenated to strings. Objects will\r\n * be merged directly or 2-item arrays will be merged as key, value pairs.\r\n *\r\n * The accumulator can also be a transformer object that provides a 2-arity\r\n * reducing iterator function, step, 0-arity initial value function, init, and\r\n * 1-arity result extraction function result. The step function is used as the\r\n * iterator function in reduce. The result function is used to convert the\r\n * final accumulator into the return type and in most cases is R.identity. The\r\n * init function is used to provide the initial accumulator.\r\n *\r\n * The iteration is performed with [`R.reduce`](#reduce) after initializing the\r\n * transducer.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.12.0\r\n * @category List\r\n * @sig a -> (b -> b) -> [c] -> a\r\n * @param {*} acc The initial accumulator value.\r\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\r\n * @param {Array} list The list to iterate over.\r\n * @return {*} The final, accumulated value.\r\n * @see R.transduce\r\n * @example\r\n *\r\n *      const numbers = [1, 2, 3, 4];\r\n *      const transducer = R.compose(R.map(R.add(1)), R.take(2));\r\n *\r\n *      R.into([], transducer, numbers); //=> [2, 3]\r\n *\r\n *      const intoArray = R.into([]);\r\n *      intoArray(transducer, numbers); //=> [2, 3]\r\n */\n\nvar into = /*#__PURE__*/_curry3(function into(acc, xf, list) {\n  return _isTransformer(acc) ? _reduce(xf(acc), acc['@@transducer/init'](), list) : _reduce(xf(_stepCat(acc)), _clone(acc, [], [], false), list);\n});\n\nexport default into;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/into.js"],"names":["_clone","_curry3","_isTransformer","_reduce","_stepCat","into","acc","xf","list"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,IAAI,GACR,aACAJ,OAAO,CAAC,SAASI,IAAT,CAAcC,GAAd,EAAmBC,EAAnB,EAAuBC,IAAvB,EAA6B;AACnC,SAAON,cAAc,CAACI,GAAD,CAAd,GAAsBH,OAAO,CAACI,EAAE,CAACD,GAAD,CAAH,EAAUA,GAAG,CAAC,mBAAD,CAAH,EAAV,EAAsCE,IAAtC,CAA7B,GAA2EL,OAAO,CAACI,EAAE,CAACH,QAAQ,CAACE,GAAD,CAAT,CAAH,EAAoBN,MAAM,CAACM,GAAD,EAAM,EAAN,EAAU,EAAV,EAAc,KAAd,CAA1B,EAAgDE,IAAhD,CAAzF;AACD,CAFM,CAFP;;AAMA,eAAeH,IAAf","sourcesContent":["import _clone from \"./internal/_clone.js\";\r\nimport _curry3 from \"./internal/_curry3.js\";\r\nimport _isTransformer from \"./internal/_isTransformer.js\";\r\nimport _reduce from \"./internal/_reduce.js\";\r\nimport _stepCat from \"./internal/_stepCat.js\";\r\n/**\r\n * Transforms the items of the list with the transducer and appends the\r\n * transformed items to the accumulator using an appropriate iterator function\r\n * based on the accumulator type.\r\n *\r\n * The accumulator can be an array, string, object or a transformer. Iterated\r\n * items will be appended to arrays and concatenated to strings. Objects will\r\n * be merged directly or 2-item arrays will be merged as key, value pairs.\r\n *\r\n * The accumulator can also be a transformer object that provides a 2-arity\r\n * reducing iterator function, step, 0-arity initial value function, init, and\r\n * 1-arity result extraction function result. The step function is used as the\r\n * iterator function in reduce. The result function is used to convert the\r\n * final accumulator into the return type and in most cases is R.identity. The\r\n * init function is used to provide the initial accumulator.\r\n *\r\n * The iteration is performed with [`R.reduce`](#reduce) after initializing the\r\n * transducer.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.12.0\r\n * @category List\r\n * @sig a -> (b -> b) -> [c] -> a\r\n * @param {*} acc The initial accumulator value.\r\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\r\n * @param {Array} list The list to iterate over.\r\n * @return {*} The final, accumulated value.\r\n * @see R.transduce\r\n * @example\r\n *\r\n *      const numbers = [1, 2, 3, 4];\r\n *      const transducer = R.compose(R.map(R.add(1)), R.take(2));\r\n *\r\n *      R.into([], transducer, numbers); //=> [2, 3]\r\n *\r\n *      const intoArray = R.into([]);\r\n *      intoArray(transducer, numbers); //=> [2, 3]\r\n */\r\n\r\nvar into =\r\n/*#__PURE__*/\r\n_curry3(function into(acc, xf, list) {\r\n  return _isTransformer(acc) ? _reduce(xf(acc), acc['@@transducer/init'](), list) : _reduce(xf(_stepCat(acc)), _clone(acc, [], [], false), list);\r\n});\r\n\r\nexport default into;"]},"metadata":{},"sourceType":"module"}