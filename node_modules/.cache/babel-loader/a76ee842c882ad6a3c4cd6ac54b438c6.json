{"ast":null,"code":"import _curry1 from \"./internal/_curry1.js\";\nimport curryN from \"./curryN.js\";\nimport max from \"./max.js\";\nimport pluck from \"./pluck.js\";\nimport reduce from \"./reduce.js\";\n/**\r\n * Takes a list of predicates and returns a predicate that returns true for a\r\n * given list of arguments if every one of the provided predicates is satisfied\r\n * by those arguments.\r\n *\r\n * The function returned is a curried function whose arity matches that of the\r\n * highest-arity predicate.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.9.0\r\n * @category Logic\r\n * @sig [(*... -> Boolean)] -> (*... -> Boolean)\r\n * @param {Array} predicates An array of predicates to check\r\n * @return {Function} The combined predicate\r\n * @see R.anyPass\r\n * @example\r\n *\r\n *      const isQueen = R.propEq('rank', 'Q');\r\n *      const isSpade = R.propEq('suit', '♠︎');\r\n *      const isQueenOfSpades = R.allPass([isQueen, isSpade]);\r\n *\r\n *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false\r\n *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true\r\n */\n\nvar allPass = /*#__PURE__*/_curry1(function allPass(preds) {\n  return curryN(reduce(max, 0, pluck('length', preds)), function () {\n    var idx = 0;\n    var len = preds.length;\n\n    while (idx < len) {\n      if (!preds[idx].apply(this, arguments)) {\n        return false;\n      }\n\n      idx += 1;\n    }\n\n    return true;\n  });\n});\n\nexport default allPass;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/allPass.js"],"names":["_curry1","curryN","max","pluck","reduce","allPass","preds","idx","len","length","apply","arguments"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,OAAO,GACX,aACAL,OAAO,CAAC,SAASK,OAAT,CAAiBC,KAAjB,EAAwB;AAC9B,SAAOL,MAAM,CAACG,MAAM,CAACF,GAAD,EAAM,CAAN,EAASC,KAAK,CAAC,QAAD,EAAWG,KAAX,CAAd,CAAP,EAAyC,YAAY;AAChE,QAAIC,GAAG,GAAG,CAAV;AACA,QAAIC,GAAG,GAAGF,KAAK,CAACG,MAAhB;;AAEA,WAAOF,GAAG,GAAGC,GAAb,EAAkB;AAChB,UAAI,CAACF,KAAK,CAACC,GAAD,CAAL,CAAWG,KAAX,CAAiB,IAAjB,EAAuBC,SAAvB,CAAL,EAAwC;AACtC,eAAO,KAAP;AACD;;AAEDJ,MAAAA,GAAG,IAAI,CAAP;AACD;;AAED,WAAO,IAAP;AACD,GAbY,CAAb;AAcD,CAfM,CAFP;;AAmBA,eAAeF,OAAf","sourcesContent":["import _curry1 from \"./internal/_curry1.js\";\r\nimport curryN from \"./curryN.js\";\r\nimport max from \"./max.js\";\r\nimport pluck from \"./pluck.js\";\r\nimport reduce from \"./reduce.js\";\r\n/**\r\n * Takes a list of predicates and returns a predicate that returns true for a\r\n * given list of arguments if every one of the provided predicates is satisfied\r\n * by those arguments.\r\n *\r\n * The function returned is a curried function whose arity matches that of the\r\n * highest-arity predicate.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.9.0\r\n * @category Logic\r\n * @sig [(*... -> Boolean)] -> (*... -> Boolean)\r\n * @param {Array} predicates An array of predicates to check\r\n * @return {Function} The combined predicate\r\n * @see R.anyPass\r\n * @example\r\n *\r\n *      const isQueen = R.propEq('rank', 'Q');\r\n *      const isSpade = R.propEq('suit', '♠︎');\r\n *      const isQueenOfSpades = R.allPass([isQueen, isSpade]);\r\n *\r\n *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false\r\n *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true\r\n */\r\n\r\nvar allPass =\r\n/*#__PURE__*/\r\n_curry1(function allPass(preds) {\r\n  return curryN(reduce(max, 0, pluck('length', preds)), function () {\r\n    var idx = 0;\r\n    var len = preds.length;\r\n\r\n    while (idx < len) {\r\n      if (!preds[idx].apply(this, arguments)) {\r\n        return false;\r\n      }\r\n\r\n      idx += 1;\r\n    }\r\n\r\n    return true;\r\n  });\r\n});\r\n\r\nexport default allPass;"]},"metadata":{},"sourceType":"module"}