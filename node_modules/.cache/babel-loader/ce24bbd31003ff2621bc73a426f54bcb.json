{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xtap from \"./internal/_xtap.js\";\n/**\r\n * Runs the given function with the supplied object, then returns the object.\r\n *\r\n * Acts as a transducer if a transformer is given as second parameter.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Function\r\n * @sig (a -> *) -> a -> a\r\n * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.\r\n * @param {*} x\r\n * @return {*} `x`.\r\n * @example\r\n *\r\n *      const sayX = x => console.log('x is ' + x);\r\n *      R.tap(sayX, 100); //=> 100\r\n *      // logs 'x is 100'\r\n * @symb R.tap(f, a) = a\r\n */\n\nvar tap = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xtap, function tap(fn, x) {\n  fn(x);\n  return x;\n}));\n\nexport default tap;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/tap.js"],"names":["_curry2","_dispatchable","_xtap","tap","fn","x"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,GAAG,GACP,aACAH,OAAO,EACP,aACAC,aAAa,CAAC,EAAD,EAAKC,KAAL,EAAY,SAASC,GAAT,CAAaC,EAAb,EAAiBC,CAAjB,EAAoB;AAC3CD,EAAAA,EAAE,CAACC,CAAD,CAAF;AACA,SAAOA,CAAP;AACD,CAHY,CAFN,CAFP;;AASA,eAAeF,GAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\nimport _dispatchable from \"./internal/_dispatchable.js\";\r\nimport _xtap from \"./internal/_xtap.js\";\r\n/**\r\n * Runs the given function with the supplied object, then returns the object.\r\n *\r\n * Acts as a transducer if a transformer is given as second parameter.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Function\r\n * @sig (a -> *) -> a -> a\r\n * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.\r\n * @param {*} x\r\n * @return {*} `x`.\r\n * @example\r\n *\r\n *      const sayX = x => console.log('x is ' + x);\r\n *      R.tap(sayX, 100); //=> 100\r\n *      // logs 'x is 100'\r\n * @symb R.tap(f, a) = a\r\n */\r\n\r\nvar tap =\r\n/*#__PURE__*/\r\n_curry2(\r\n/*#__PURE__*/\r\n_dispatchable([], _xtap, function tap(fn, x) {\r\n  fn(x);\r\n  return x;\r\n}));\r\n\r\nexport default tap;"]},"metadata":{},"sourceType":"module"}