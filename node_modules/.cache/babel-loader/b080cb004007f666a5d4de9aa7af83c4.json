{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport concat from \"./concat.js\";\nimport difference from \"./difference.js\";\n/**\r\n * Finds the set (i.e. no duplicates) of all elements contained in the first or\r\n * second list, but not both.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.19.0\r\n * @category Relation\r\n * @sig [*] -> [*] -> [*]\r\n * @param {Array} list1 The first list.\r\n * @param {Array} list2 The second list.\r\n * @return {Array} The elements in `list1` or `list2`, but not both.\r\n * @see R.symmetricDifferenceWith, R.difference, R.differenceWith\r\n * @example\r\n *\r\n *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]\r\n *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]\r\n */\n\nvar symmetricDifference = /*#__PURE__*/_curry2(function symmetricDifference(list1, list2) {\n  return concat(difference(list1, list2), difference(list2, list1));\n});\n\nexport default symmetricDifference;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/symmetricDifference.js"],"names":["_curry2","concat","difference","symmetricDifference","list1","list2"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,mBAAmB,GACvB,aACAH,OAAO,CAAC,SAASG,mBAAT,CAA6BC,KAA7B,EAAoCC,KAApC,EAA2C;AACjD,SAAOJ,MAAM,CAACC,UAAU,CAACE,KAAD,EAAQC,KAAR,CAAX,EAA2BH,UAAU,CAACG,KAAD,EAAQD,KAAR,CAArC,CAAb;AACD,CAFM,CAFP;;AAMA,eAAeD,mBAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\nimport concat from \"./concat.js\";\r\nimport difference from \"./difference.js\";\r\n/**\r\n * Finds the set (i.e. no duplicates) of all elements contained in the first or\r\n * second list, but not both.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.19.0\r\n * @category Relation\r\n * @sig [*] -> [*] -> [*]\r\n * @param {Array} list1 The first list.\r\n * @param {Array} list2 The second list.\r\n * @return {Array} The elements in `list1` or `list2`, but not both.\r\n * @see R.symmetricDifferenceWith, R.difference, R.differenceWith\r\n * @example\r\n *\r\n *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]\r\n *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]\r\n */\r\n\r\nvar symmetricDifference =\r\n/*#__PURE__*/\r\n_curry2(function symmetricDifference(list1, list2) {\r\n  return concat(difference(list1, list2), difference(list2, list1));\r\n});\r\n\r\nexport default symmetricDifference;"]},"metadata":{},"sourceType":"module"}