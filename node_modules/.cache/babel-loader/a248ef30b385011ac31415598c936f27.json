{"ast":null,"code":"import filter from \"./filter.js\";\nimport juxt from \"./juxt.js\";\nimport reject from \"./reject.js\";\n/**\r\n * Takes a predicate and a list or other `Filterable` object and returns the\r\n * pair of filterable objects of the same type of elements which do and do not\r\n * satisfy, the predicate, respectively. Filterable objects include plain objects or any object\r\n * that has a filter method such as `Array`.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.4\r\n * @category List\r\n * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]\r\n * @param {Function} pred A predicate to determine which side the element belongs to.\r\n * @param {Array} filterable the list (or other filterable) to partition.\r\n * @return {Array} An array, containing first the subset of elements that satisfy the\r\n *         predicate, and second the subset of elements that do not satisfy.\r\n * @see R.filter, R.reject\r\n * @example\r\n *\r\n *      R.partition(R.includes('s'), ['sss', 'ttt', 'foo', 'bars']);\r\n *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]\r\n *\r\n *      R.partition(R.includes('s'), { a: 'sss', b: 'ttt', foo: 'bars' });\r\n *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]\r\n */\n\nvar partition = /*#__PURE__*/juxt([filter, reject]);\nexport default partition;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/partition.js"],"names":["filter","juxt","reject","partition"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,SAAS,GACb,aACAF,IAAI,CAAC,CAACD,MAAD,EAASE,MAAT,CAAD,CAFJ;AAGA,eAAeC,SAAf","sourcesContent":["import filter from \"./filter.js\";\r\nimport juxt from \"./juxt.js\";\r\nimport reject from \"./reject.js\";\r\n/**\r\n * Takes a predicate and a list or other `Filterable` object and returns the\r\n * pair of filterable objects of the same type of elements which do and do not\r\n * satisfy, the predicate, respectively. Filterable objects include plain objects or any object\r\n * that has a filter method such as `Array`.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.4\r\n * @category List\r\n * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]\r\n * @param {Function} pred A predicate to determine which side the element belongs to.\r\n * @param {Array} filterable the list (or other filterable) to partition.\r\n * @return {Array} An array, containing first the subset of elements that satisfy the\r\n *         predicate, and second the subset of elements that do not satisfy.\r\n * @see R.filter, R.reject\r\n * @example\r\n *\r\n *      R.partition(R.includes('s'), ['sss', 'ttt', 'foo', 'bars']);\r\n *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]\r\n *\r\n *      R.partition(R.includes('s'), { a: 'sss', b: 'ttt', foo: 'bars' });\r\n *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]\r\n */\r\n\r\nvar partition =\r\n/*#__PURE__*/\r\njuxt([filter, reject]);\r\nexport default partition;"]},"metadata":{},"sourceType":"module"}