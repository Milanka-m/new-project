{"ast":null,"code":"import _curry1 from \"./internal/_curry1.js\";\nimport mean from \"./mean.js\";\n/**\r\n * Returns the median of the given list of numbers.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.14.0\r\n * @category Math\r\n * @sig [Number] -> Number\r\n * @param {Array} list\r\n * @return {Number}\r\n * @see R.mean\r\n * @example\r\n *\r\n *      R.median([2, 9, 7]); //=> 7\r\n *      R.median([7, 2, 10, 9]); //=> 8\r\n *      R.median([]); //=> NaN\r\n */\n\nvar median = /*#__PURE__*/_curry1(function median(list) {\n  var len = list.length;\n\n  if (len === 0) {\n    return NaN;\n  }\n\n  var width = 2 - len % 2;\n  var idx = (len - width) / 2;\n  return mean(Array.prototype.slice.call(list, 0).sort(function (a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n  }).slice(idx, idx + width));\n});\n\nexport default median;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/median.js"],"names":["_curry1","mean","median","list","len","length","NaN","width","idx","Array","prototype","slice","call","sort","a","b"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,MAAM,GACV,aACAF,OAAO,CAAC,SAASE,MAAT,CAAgBC,IAAhB,EAAsB;AAC5B,MAAIC,GAAG,GAAGD,IAAI,CAACE,MAAf;;AAEA,MAAID,GAAG,KAAK,CAAZ,EAAe;AACb,WAAOE,GAAP;AACD;;AAED,MAAIC,KAAK,GAAG,IAAIH,GAAG,GAAG,CAAtB;AACA,MAAII,GAAG,GAAG,CAACJ,GAAG,GAAGG,KAAP,IAAgB,CAA1B;AACA,SAAON,IAAI,CAACQ,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BT,IAA3B,EAAiC,CAAjC,EAAoCU,IAApC,CAAyC,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACnE,WAAOD,CAAC,GAAGC,CAAJ,GAAQ,CAAC,CAAT,GAAaD,CAAC,GAAGC,CAAJ,GAAQ,CAAR,GAAY,CAAhC;AACD,GAFW,EAETJ,KAFS,CAEHH,GAFG,EAEEA,GAAG,GAAGD,KAFR,CAAD,CAAX;AAGD,CAZM,CAFP;;AAgBA,eAAeL,MAAf","sourcesContent":["import _curry1 from \"./internal/_curry1.js\";\r\nimport mean from \"./mean.js\";\r\n/**\r\n * Returns the median of the given list of numbers.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.14.0\r\n * @category Math\r\n * @sig [Number] -> Number\r\n * @param {Array} list\r\n * @return {Number}\r\n * @see R.mean\r\n * @example\r\n *\r\n *      R.median([2, 9, 7]); //=> 7\r\n *      R.median([7, 2, 10, 9]); //=> 8\r\n *      R.median([]); //=> NaN\r\n */\r\n\r\nvar median =\r\n/*#__PURE__*/\r\n_curry1(function median(list) {\r\n  var len = list.length;\r\n\r\n  if (len === 0) {\r\n    return NaN;\r\n  }\r\n\r\n  var width = 2 - len % 2;\r\n  var idx = (len - width) / 2;\r\n  return mean(Array.prototype.slice.call(list, 0).sort(function (a, b) {\r\n    return a < b ? -1 : a > b ? 1 : 0;\r\n  }).slice(idx, idx + width));\r\n});\r\n\r\nexport default median;"]},"metadata":{},"sourceType":"module"}