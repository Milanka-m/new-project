{"ast":null,"code":"import _curry3 from \"./internal/_curry3.js\";\n/**\r\n * Scan is similar to [`reduce`](#reduce), but returns a list of successively\r\n * reduced values from the left\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.10.0\r\n * @category List\r\n * @sig ((a, b) -> a) -> a -> [b] -> [a]\r\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\r\n *        current element from the array\r\n * @param {*} acc The accumulator value.\r\n * @param {Array} list The list to iterate over.\r\n * @return {Array} A list of all intermediately reduced values.\r\n * @see R.reduce, R.mapAccum\r\n * @example\r\n *\r\n *      const numbers = [1, 2, 3, 4];\r\n *      const factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]\r\n * @symb R.scan(f, a, [b, c]) = [a, f(a, b), f(f(a, b), c)]\r\n */\n\nvar scan = /*#__PURE__*/_curry3(function scan(fn, acc, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [acc];\n\n  while (idx < len) {\n    acc = fn(acc, list[idx]);\n    result[idx + 1] = acc;\n    idx += 1;\n  }\n\n  return result;\n});\n\nexport default scan;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/scan.js"],"names":["_curry3","scan","fn","acc","list","idx","len","length","result"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,IAAI,GACR,aACAD,OAAO,CAAC,SAASC,IAAT,CAAcC,EAAd,EAAkBC,GAAlB,EAAuBC,IAAvB,EAA6B;AACnC,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAGF,IAAI,CAACG,MAAf;AACA,MAAIC,MAAM,GAAG,CAACL,GAAD,CAAb;;AAEA,SAAOE,GAAG,GAAGC,GAAb,EAAkB;AAChBH,IAAAA,GAAG,GAAGD,EAAE,CAACC,GAAD,EAAMC,IAAI,CAACC,GAAD,CAAV,CAAR;AACAG,IAAAA,MAAM,CAACH,GAAG,GAAG,CAAP,CAAN,GAAkBF,GAAlB;AACAE,IAAAA,GAAG,IAAI,CAAP;AACD;;AAED,SAAOG,MAAP;AACD,CAZM,CAFP;;AAgBA,eAAeP,IAAf","sourcesContent":["import _curry3 from \"./internal/_curry3.js\";\r\n/**\r\n * Scan is similar to [`reduce`](#reduce), but returns a list of successively\r\n * reduced values from the left\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.10.0\r\n * @category List\r\n * @sig ((a, b) -> a) -> a -> [b] -> [a]\r\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\r\n *        current element from the array\r\n * @param {*} acc The accumulator value.\r\n * @param {Array} list The list to iterate over.\r\n * @return {Array} A list of all intermediately reduced values.\r\n * @see R.reduce, R.mapAccum\r\n * @example\r\n *\r\n *      const numbers = [1, 2, 3, 4];\r\n *      const factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]\r\n * @symb R.scan(f, a, [b, c]) = [a, f(a, b), f(f(a, b), c)]\r\n */\r\n\r\nvar scan =\r\n/*#__PURE__*/\r\n_curry3(function scan(fn, acc, list) {\r\n  var idx = 0;\r\n  var len = list.length;\r\n  var result = [acc];\r\n\r\n  while (idx < len) {\r\n    acc = fn(acc, list[idx]);\r\n    result[idx + 1] = acc;\r\n    idx += 1;\r\n  }\r\n\r\n  return result;\r\n});\r\n\r\nexport default scan;"]},"metadata":{},"sourceType":"module"}