{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport slice from \"./slice.js\";\n/**\r\n * Splits a collection into slices of the specified length.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.16.0\r\n * @category List\r\n * @sig Number -> [a] -> [[a]]\r\n * @sig Number -> String -> [String]\r\n * @param {Number} n\r\n * @param {Array} list\r\n * @return {Array}\r\n * @example\r\n *\r\n *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]\r\n *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']\r\n */\n\nvar splitEvery = /*#__PURE__*/_curry2(function splitEvery(n, list) {\n  if (n <= 0) {\n    throw new Error('First argument to splitEvery must be a positive integer');\n  }\n\n  var result = [];\n  var idx = 0;\n\n  while (idx < list.length) {\n    result.push(slice(idx, idx += n, list));\n  }\n\n  return result;\n});\n\nexport default splitEvery;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/splitEvery.js"],"names":["_curry2","slice","splitEvery","n","list","Error","result","idx","length","push"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,UAAU,GACd,aACAF,OAAO,CAAC,SAASE,UAAT,CAAoBC,CAApB,EAAuBC,IAAvB,EAA6B;AACnC,MAAID,CAAC,IAAI,CAAT,EAAY;AACV,UAAM,IAAIE,KAAJ,CAAU,yDAAV,CAAN;AACD;;AAED,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,GAAG,GAAG,CAAV;;AAEA,SAAOA,GAAG,GAAGH,IAAI,CAACI,MAAlB,EAA0B;AACxBF,IAAAA,MAAM,CAACG,IAAP,CAAYR,KAAK,CAACM,GAAD,EAAMA,GAAG,IAAIJ,CAAb,EAAgBC,IAAhB,CAAjB;AACD;;AAED,SAAOE,MAAP;AACD,CAbM,CAFP;;AAiBA,eAAeJ,UAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\nimport slice from \"./slice.js\";\r\n/**\r\n * Splits a collection into slices of the specified length.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.16.0\r\n * @category List\r\n * @sig Number -> [a] -> [[a]]\r\n * @sig Number -> String -> [String]\r\n * @param {Number} n\r\n * @param {Array} list\r\n * @return {Array}\r\n * @example\r\n *\r\n *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]\r\n *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']\r\n */\r\n\r\nvar splitEvery =\r\n/*#__PURE__*/\r\n_curry2(function splitEvery(n, list) {\r\n  if (n <= 0) {\r\n    throw new Error('First argument to splitEvery must be a positive integer');\r\n  }\r\n\r\n  var result = [];\r\n  var idx = 0;\r\n\r\n  while (idx < list.length) {\r\n    result.push(slice(idx, idx += n, list));\r\n  }\r\n\r\n  return result;\r\n});\r\n\r\nexport default splitEvery;"]},"metadata":{},"sourceType":"module"}