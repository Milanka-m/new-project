{"ast":null,"code":"import _concat from \"./internal/_concat.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport _reduce from \"./internal/_reduce.js\";\nimport map from \"./map.js\";\n/**\r\n * ap applies a list of functions to a list of values.\r\n *\r\n * Dispatches to the `ap` method of the second argument, if present. Also\r\n * treats curried functions as applicatives.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.3.0\r\n * @category Function\r\n * @sig [a -> b] -> [a] -> [b]\r\n * @sig Apply f => f (a -> b) -> f a -> f b\r\n * @sig (r -> a -> b) -> (r -> a) -> (r -> b)\r\n * @param {*} applyF\r\n * @param {*} applyX\r\n * @return {*}\r\n * @example\r\n *\r\n *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]\r\n *      R.ap([R.concat('tasty '), R.toUpper], ['pizza', 'salad']); //=> [\"tasty pizza\", \"tasty salad\", \"PIZZA\", \"SALAD\"]\r\n *\r\n *      // R.ap can also be used as S combinator\r\n *      // when only two functions are passed\r\n *      R.ap(R.concat, R.toUpper)('Ramda') //=> 'RamdaRAMDA'\r\n * @symb R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]\r\n */\n\nvar ap = /*#__PURE__*/_curry2(function ap(applyF, applyX) {\n  return typeof applyX['fantasy-land/ap'] === 'function' ? applyX['fantasy-land/ap'](applyF) : typeof applyF.ap === 'function' ? applyF.ap(applyX) : typeof applyF === 'function' ? function (x) {\n    return applyF(x)(applyX(x));\n  } : _reduce(function (acc, f) {\n    return _concat(acc, map(f, applyX));\n  }, [], applyF);\n});\n\nexport default ap;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/ap.js"],"names":["_concat","_curry2","_reduce","map","ap","applyF","applyX","x","acc","f"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,EAAE,GACN,aACAH,OAAO,CAAC,SAASG,EAAT,CAAYC,MAAZ,EAAoBC,MAApB,EAA4B;AAClC,SAAO,OAAOA,MAAM,CAAC,iBAAD,CAAb,KAAqC,UAArC,GAAkDA,MAAM,CAAC,iBAAD,CAAN,CAA0BD,MAA1B,CAAlD,GAAsF,OAAOA,MAAM,CAACD,EAAd,KAAqB,UAArB,GAAkCC,MAAM,CAACD,EAAP,CAAUE,MAAV,CAAlC,GAAsD,OAAOD,MAAP,KAAkB,UAAlB,GAA+B,UAAUE,CAAV,EAAa;AAC7L,WAAOF,MAAM,CAACE,CAAD,CAAN,CAAUD,MAAM,CAACC,CAAD,CAAhB,CAAP;AACD,GAFkJ,GAE/IL,OAAO,CAAC,UAAUM,GAAV,EAAeC,CAAf,EAAkB;AAC5B,WAAOT,OAAO,CAACQ,GAAD,EAAML,GAAG,CAACM,CAAD,EAAIH,MAAJ,CAAT,CAAd;AACD,GAFU,EAER,EAFQ,EAEJD,MAFI,CAFX;AAKD,CANM,CAFP;;AAUA,eAAeD,EAAf","sourcesContent":["import _concat from \"./internal/_concat.js\";\r\nimport _curry2 from \"./internal/_curry2.js\";\r\nimport _reduce from \"./internal/_reduce.js\";\r\nimport map from \"./map.js\";\r\n/**\r\n * ap applies a list of functions to a list of values.\r\n *\r\n * Dispatches to the `ap` method of the second argument, if present. Also\r\n * treats curried functions as applicatives.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.3.0\r\n * @category Function\r\n * @sig [a -> b] -> [a] -> [b]\r\n * @sig Apply f => f (a -> b) -> f a -> f b\r\n * @sig (r -> a -> b) -> (r -> a) -> (r -> b)\r\n * @param {*} applyF\r\n * @param {*} applyX\r\n * @return {*}\r\n * @example\r\n *\r\n *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]\r\n *      R.ap([R.concat('tasty '), R.toUpper], ['pizza', 'salad']); //=> [\"tasty pizza\", \"tasty salad\", \"PIZZA\", \"SALAD\"]\r\n *\r\n *      // R.ap can also be used as S combinator\r\n *      // when only two functions are passed\r\n *      R.ap(R.concat, R.toUpper)('Ramda') //=> 'RamdaRAMDA'\r\n * @symb R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]\r\n */\r\n\r\nvar ap =\r\n/*#__PURE__*/\r\n_curry2(function ap(applyF, applyX) {\r\n  return typeof applyX['fantasy-land/ap'] === 'function' ? applyX['fantasy-land/ap'](applyF) : typeof applyF.ap === 'function' ? applyF.ap(applyX) : typeof applyF === 'function' ? function (x) {\r\n    return applyF(x)(applyX(x));\r\n  } : _reduce(function (acc, f) {\r\n    return _concat(acc, map(f, applyX));\r\n  }, [], applyF);\r\n});\r\n\r\nexport default ap;"]},"metadata":{},"sourceType":"module"}