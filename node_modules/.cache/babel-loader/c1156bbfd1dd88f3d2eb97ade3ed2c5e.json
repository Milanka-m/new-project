{"ast":null,"code":"import _concat from \"./internal/_concat.js\";\nimport _createPartialApplicator from \"./internal/_createPartialApplicator.js\";\n/**\r\n * Takes a function `f` and a list of arguments, and returns a function `g`.\r\n * When applied, `g` returns the result of applying `f` to the arguments\r\n * provided initially followed by the arguments provided to `g`.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.10.0\r\n * @category Function\r\n * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)\r\n * @param {Function} f\r\n * @param {Array} args\r\n * @return {Function}\r\n * @see R.partialRight, R.curry\r\n * @example\r\n *\r\n *      const multiply2 = (a, b) => a * b;\r\n *      const double = R.partial(multiply2, [2]);\r\n *      double(2); //=> 4\r\n *\r\n *      const greet = (salutation, title, firstName, lastName) =>\r\n *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\r\n *\r\n *      const sayHello = R.partial(greet, ['Hello']);\r\n *      const sayHelloToMs = R.partial(sayHello, ['Ms.']);\r\n *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'\r\n * @symb R.partial(f, [a, b])(c, d) = f(a, b, c, d)\r\n */\n\nvar partial = /*#__PURE__*/_createPartialApplicator(_concat);\n\nexport default partial;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/partial.js"],"names":["_concat","_createPartialApplicator","partial"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,wBAAP,MAAqC,wCAArC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,OAAO,GACX,aACAD,wBAAwB,CAACD,OAAD,CAFxB;;AAIA,eAAeE,OAAf","sourcesContent":["import _concat from \"./internal/_concat.js\";\r\nimport _createPartialApplicator from \"./internal/_createPartialApplicator.js\";\r\n/**\r\n * Takes a function `f` and a list of arguments, and returns a function `g`.\r\n * When applied, `g` returns the result of applying `f` to the arguments\r\n * provided initially followed by the arguments provided to `g`.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.10.0\r\n * @category Function\r\n * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)\r\n * @param {Function} f\r\n * @param {Array} args\r\n * @return {Function}\r\n * @see R.partialRight, R.curry\r\n * @example\r\n *\r\n *      const multiply2 = (a, b) => a * b;\r\n *      const double = R.partial(multiply2, [2]);\r\n *      double(2); //=> 4\r\n *\r\n *      const greet = (salutation, title, firstName, lastName) =>\r\n *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\r\n *\r\n *      const sayHello = R.partial(greet, ['Hello']);\r\n *      const sayHelloToMs = R.partial(sayHello, ['Ms.']);\r\n *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'\r\n * @symb R.partial(f, [a, b])(c, d) = f(a, b, c, d)\r\n */\r\n\r\nvar partial =\r\n/*#__PURE__*/\r\n_createPartialApplicator(_concat);\r\n\r\nexport default partial;"]},"metadata":{},"sourceType":"module"}