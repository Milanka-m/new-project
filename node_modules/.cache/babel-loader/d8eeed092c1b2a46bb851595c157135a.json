{"ast":null,"code":"import _curry3 from \"./internal/_curry3.js\";\nimport _has from \"./internal/_has.js\";\nimport _isArray from \"./internal/_isArray.js\";\nimport _isInteger from \"./internal/_isInteger.js\";\nimport assoc from \"./assoc.js\";\nimport isNil from \"./isNil.js\";\n/**\r\n * Makes a shallow clone of an object, setting or overriding the nodes required\r\n * to create the given path, and placing the specific value at the tail end of\r\n * that path. Note that this copies and flattens prototype properties onto the\r\n * new object as well. All non-primitive properties are copied by reference.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.8.0\r\n * @category Object\r\n * @typedefn Idx = String | Int\r\n * @sig [Idx] -> a -> {a} -> {a}\r\n * @param {Array} path the path to set\r\n * @param {*} val The new value\r\n * @param {Object} obj The object to clone\r\n * @return {Object} A new object equivalent to the original except along the specified path.\r\n * @see R.dissocPath\r\n * @example\r\n *\r\n *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}\r\n *\r\n *      // Any missing or non-object keys in path will be overridden\r\n *      R.assocPath(['a', 'b', 'c'], 42, {a: 5}); //=> {a: {b: {c: 42}}}\r\n */\n\nvar assocPath = /*#__PURE__*/_curry3(function assocPath(path, val, obj) {\n  if (path.length === 0) {\n    return val;\n  }\n\n  var idx = path[0];\n\n  if (path.length > 1) {\n    var nextObj = !isNil(obj) && _has(idx, obj) ? obj[idx] : _isInteger(path[1]) ? [] : {};\n    val = assocPath(Array.prototype.slice.call(path, 1), val, nextObj);\n  }\n\n  if (_isInteger(idx) && _isArray(obj)) {\n    var arr = [].concat(obj);\n    arr[idx] = val;\n    return arr;\n  } else {\n    return assoc(idx, val, obj);\n  }\n});\n\nexport default assocPath;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/assocPath.js"],"names":["_curry3","_has","_isArray","_isInteger","assoc","isNil","assocPath","path","val","obj","length","idx","nextObj","Array","prototype","slice","call","arr","concat"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,SAAS,GACb,aACAN,OAAO,CAAC,SAASM,SAAT,CAAmBC,IAAnB,EAAyBC,GAAzB,EAA8BC,GAA9B,EAAmC;AACzC,MAAIF,IAAI,CAACG,MAAL,KAAgB,CAApB,EAAuB;AACrB,WAAOF,GAAP;AACD;;AAED,MAAIG,GAAG,GAAGJ,IAAI,CAAC,CAAD,CAAd;;AAEA,MAAIA,IAAI,CAACG,MAAL,GAAc,CAAlB,EAAqB;AACnB,QAAIE,OAAO,GAAG,CAACP,KAAK,CAACI,GAAD,CAAN,IAAeR,IAAI,CAACU,GAAD,EAAMF,GAAN,CAAnB,GAAgCA,GAAG,CAACE,GAAD,CAAnC,GAA2CR,UAAU,CAACI,IAAI,CAAC,CAAD,CAAL,CAAV,GAAsB,EAAtB,GAA2B,EAApF;AACAC,IAAAA,GAAG,GAAGF,SAAS,CAACO,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BT,IAA3B,EAAiC,CAAjC,CAAD,EAAsCC,GAAtC,EAA2CI,OAA3C,CAAf;AACD;;AAED,MAAIT,UAAU,CAACQ,GAAD,CAAV,IAAmBT,QAAQ,CAACO,GAAD,CAA/B,EAAsC;AACpC,QAAIQ,GAAG,GAAG,GAAGC,MAAH,CAAUT,GAAV,CAAV;AACAQ,IAAAA,GAAG,CAACN,GAAD,CAAH,GAAWH,GAAX;AACA,WAAOS,GAAP;AACD,GAJD,MAIO;AACL,WAAOb,KAAK,CAACO,GAAD,EAAMH,GAAN,EAAWC,GAAX,CAAZ;AACD;AACF,CAnBM,CAFP;;AAuBA,eAAeH,SAAf","sourcesContent":["import _curry3 from \"./internal/_curry3.js\";\r\nimport _has from \"./internal/_has.js\";\r\nimport _isArray from \"./internal/_isArray.js\";\r\nimport _isInteger from \"./internal/_isInteger.js\";\r\nimport assoc from \"./assoc.js\";\r\nimport isNil from \"./isNil.js\";\r\n/**\r\n * Makes a shallow clone of an object, setting or overriding the nodes required\r\n * to create the given path, and placing the specific value at the tail end of\r\n * that path. Note that this copies and flattens prototype properties onto the\r\n * new object as well. All non-primitive properties are copied by reference.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.8.0\r\n * @category Object\r\n * @typedefn Idx = String | Int\r\n * @sig [Idx] -> a -> {a} -> {a}\r\n * @param {Array} path the path to set\r\n * @param {*} val The new value\r\n * @param {Object} obj The object to clone\r\n * @return {Object} A new object equivalent to the original except along the specified path.\r\n * @see R.dissocPath\r\n * @example\r\n *\r\n *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}\r\n *\r\n *      // Any missing or non-object keys in path will be overridden\r\n *      R.assocPath(['a', 'b', 'c'], 42, {a: 5}); //=> {a: {b: {c: 42}}}\r\n */\r\n\r\nvar assocPath =\r\n/*#__PURE__*/\r\n_curry3(function assocPath(path, val, obj) {\r\n  if (path.length === 0) {\r\n    return val;\r\n  }\r\n\r\n  var idx = path[0];\r\n\r\n  if (path.length > 1) {\r\n    var nextObj = !isNil(obj) && _has(idx, obj) ? obj[idx] : _isInteger(path[1]) ? [] : {};\r\n    val = assocPath(Array.prototype.slice.call(path, 1), val, nextObj);\r\n  }\r\n\r\n  if (_isInteger(idx) && _isArray(obj)) {\r\n    var arr = [].concat(obj);\r\n    arr[idx] = val;\r\n    return arr;\r\n  } else {\r\n    return assoc(idx, val, obj);\r\n  }\r\n});\r\n\r\nexport default assocPath;"]},"metadata":{},"sourceType":"module"}