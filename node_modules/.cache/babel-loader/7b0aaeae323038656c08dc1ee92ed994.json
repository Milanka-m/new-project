{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xfindIndex from \"./internal/_xfindIndex.js\";\n/**\r\n * Returns the index of the first element of the list which matches the\r\n * predicate, or `-1` if no element matches.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.1\r\n * @category List\r\n * @sig (a -> Boolean) -> [a] -> Number\r\n * @param {Function} fn The predicate function used to determine if the element is the\r\n * desired one.\r\n * @param {Array} list The array to consider.\r\n * @return {Number} The index of the element found, or `-1`.\r\n * @see R.transduce\r\n * @example\r\n *\r\n *      const xs = [{a: 1}, {a: 2}, {a: 3}];\r\n *      R.findIndex(R.propEq('a', 2))(xs); //=> 1\r\n *      R.findIndex(R.propEq('a', 4))(xs); //=> -1\r\n */\n\nvar findIndex = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xfindIndex, function findIndex(fn, list) {\n  var idx = 0;\n  var len = list.length;\n\n  while (idx < len) {\n    if (fn(list[idx])) {\n      return idx;\n    }\n\n    idx += 1;\n  }\n\n  return -1;\n}));\n\nexport default findIndex;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/findIndex.js"],"names":["_curry2","_dispatchable","_xfindIndex","findIndex","fn","list","idx","len","length"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,SAAS,GACb,aACAH,OAAO,EACP,aACAC,aAAa,CAAC,EAAD,EAAKC,WAAL,EAAkB,SAASC,SAAT,CAAmBC,EAAnB,EAAuBC,IAAvB,EAA6B;AAC1D,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAGF,IAAI,CAACG,MAAf;;AAEA,SAAOF,GAAG,GAAGC,GAAb,EAAkB;AAChB,QAAIH,EAAE,CAACC,IAAI,CAACC,GAAD,CAAL,CAAN,EAAmB;AACjB,aAAOA,GAAP;AACD;;AAEDA,IAAAA,GAAG,IAAI,CAAP;AACD;;AAED,SAAO,CAAC,CAAR;AACD,CAbY,CAFN,CAFP;;AAmBA,eAAeH,SAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\nimport _dispatchable from \"./internal/_dispatchable.js\";\r\nimport _xfindIndex from \"./internal/_xfindIndex.js\";\r\n/**\r\n * Returns the index of the first element of the list which matches the\r\n * predicate, or `-1` if no element matches.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.1\r\n * @category List\r\n * @sig (a -> Boolean) -> [a] -> Number\r\n * @param {Function} fn The predicate function used to determine if the element is the\r\n * desired one.\r\n * @param {Array} list The array to consider.\r\n * @return {Number} The index of the element found, or `-1`.\r\n * @see R.transduce\r\n * @example\r\n *\r\n *      const xs = [{a: 1}, {a: 2}, {a: 3}];\r\n *      R.findIndex(R.propEq('a', 2))(xs); //=> 1\r\n *      R.findIndex(R.propEq('a', 4))(xs); //=> -1\r\n */\r\n\r\nvar findIndex =\r\n/*#__PURE__*/\r\n_curry2(\r\n/*#__PURE__*/\r\n_dispatchable([], _xfindIndex, function findIndex(fn, list) {\r\n  var idx = 0;\r\n  var len = list.length;\r\n\r\n  while (idx < len) {\r\n    if (fn(list[idx])) {\r\n      return idx;\r\n    }\r\n\r\n    idx += 1;\r\n  }\r\n\r\n  return -1;\r\n}));\r\n\r\nexport default findIndex;"]},"metadata":{},"sourceType":"module"}