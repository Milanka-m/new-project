{"ast":null,"code":"import _arity from \"./internal/_arity.js\";\nimport _concat from \"./internal/_concat.js\";\nimport _curry2 from \"./internal/_curry2.js\";\n/**\r\n * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned\r\n * function evaluates the `tryer`; if it does not throw, it simply returns the\r\n * result. If the `tryer` *does* throw, the returned function evaluates the\r\n * `catcher` function and returns its result. Note that for effective\r\n * composition with this function, both the `tryer` and `catcher` functions\r\n * must return the same type of results.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.20.0\r\n * @category Function\r\n * @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)\r\n * @param {Function} tryer The function that may throw.\r\n * @param {Function} catcher The function that will be evaluated if `tryer` throws.\r\n * @return {Function} A new function that will catch exceptions and send then to the catcher.\r\n * @example\r\n *\r\n *      R.tryCatch(R.prop('x'), R.F)({x: true}); //=> true\r\n *      R.tryCatch(() => { throw 'foo'}, R.always('catched'))('bar') // => 'catched'\r\n *      R.tryCatch(R.times(R.identity), R.always([]))('s') // => []\r\n *      R.tryCatch(() => { throw 'this is not a valid value'}, (err, value)=>({error : err,  value }))('bar') // => {'error': 'this is not a valid value', 'value': 'bar'}\r\n */\n\nvar tryCatch = /*#__PURE__*/_curry2(function _tryCatch(tryer, catcher) {\n  return _arity(tryer.length, function () {\n    try {\n      return tryer.apply(this, arguments);\n    } catch (e) {\n      return catcher.apply(this, _concat([e], arguments));\n    }\n  });\n});\n\nexport default tryCatch;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/tryCatch.js"],"names":["_arity","_concat","_curry2","tryCatch","_tryCatch","tryer","catcher","length","apply","arguments","e"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,QAAQ,GACZ,aACAD,OAAO,CAAC,SAASE,SAAT,CAAmBC,KAAnB,EAA0BC,OAA1B,EAAmC;AACzC,SAAON,MAAM,CAACK,KAAK,CAACE,MAAP,EAAe,YAAY;AACtC,QAAI;AACF,aAAOF,KAAK,CAACG,KAAN,CAAY,IAAZ,EAAkBC,SAAlB,CAAP;AACD,KAFD,CAEE,OAAOC,CAAP,EAAU;AACV,aAAOJ,OAAO,CAACE,KAAR,CAAc,IAAd,EAAoBP,OAAO,CAAC,CAACS,CAAD,CAAD,EAAMD,SAAN,CAA3B,CAAP;AACD;AACF,GANY,CAAb;AAOD,CARM,CAFP;;AAYA,eAAeN,QAAf","sourcesContent":["import _arity from \"./internal/_arity.js\";\r\nimport _concat from \"./internal/_concat.js\";\r\nimport _curry2 from \"./internal/_curry2.js\";\r\n/**\r\n * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned\r\n * function evaluates the `tryer`; if it does not throw, it simply returns the\r\n * result. If the `tryer` *does* throw, the returned function evaluates the\r\n * `catcher` function and returns its result. Note that for effective\r\n * composition with this function, both the `tryer` and `catcher` functions\r\n * must return the same type of results.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.20.0\r\n * @category Function\r\n * @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)\r\n * @param {Function} tryer The function that may throw.\r\n * @param {Function} catcher The function that will be evaluated if `tryer` throws.\r\n * @return {Function} A new function that will catch exceptions and send then to the catcher.\r\n * @example\r\n *\r\n *      R.tryCatch(R.prop('x'), R.F)({x: true}); //=> true\r\n *      R.tryCatch(() => { throw 'foo'}, R.always('catched'))('bar') // => 'catched'\r\n *      R.tryCatch(R.times(R.identity), R.always([]))('s') // => []\r\n *      R.tryCatch(() => { throw 'this is not a valid value'}, (err, value)=>({error : err,  value }))('bar') // => {'error': 'this is not a valid value', 'value': 'bar'}\r\n */\r\n\r\nvar tryCatch =\r\n/*#__PURE__*/\r\n_curry2(function _tryCatch(tryer, catcher) {\r\n  return _arity(tryer.length, function () {\r\n    try {\r\n      return tryer.apply(this, arguments);\r\n    } catch (e) {\r\n      return catcher.apply(this, _concat([e], arguments));\r\n    }\r\n  });\r\n});\r\n\r\nexport default tryCatch;"]},"metadata":{},"sourceType":"module"}