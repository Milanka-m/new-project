{"ast":null,"code":"import _curry1 from \"./internal/_curry1.js\";\nimport keys from \"./keys.js\";\n/**\r\n * Returns a new object with the keys of the given object as values, and the\r\n * values of the given object, which are coerced to strings, as keys. Note\r\n * that the last key found is preferred when handling the same value.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.9.0\r\n * @category Object\r\n * @sig {s: x} -> {x: s}\r\n * @param {Object} obj The object or array to invert\r\n * @return {Object} out A new object\r\n * @see R.invert\r\n * @example\r\n *\r\n *      const raceResults = {\r\n *        first: 'alice',\r\n *        second: 'jake'\r\n *      };\r\n *      R.invertObj(raceResults);\r\n *      //=> { 'alice': 'first', 'jake':'second' }\r\n *\r\n *      // Alternatively:\r\n *      const raceResults = ['alice', 'jake'];\r\n *      R.invertObj(raceResults);\r\n *      //=> { 'alice': '0', 'jake':'1' }\r\n */\n\nvar invertObj = /*#__PURE__*/_curry1(function invertObj(obj) {\n  var props = keys(obj);\n  var len = props.length;\n  var idx = 0;\n  var out = {};\n\n  while (idx < len) {\n    var key = props[idx];\n    out[obj[key]] = key;\n    idx += 1;\n  }\n\n  return out;\n});\n\nexport default invertObj;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/invertObj.js"],"names":["_curry1","keys","invertObj","obj","props","len","length","idx","out","key"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,SAAS,GACb,aACAF,OAAO,CAAC,SAASE,SAAT,CAAmBC,GAAnB,EAAwB;AAC9B,MAAIC,KAAK,GAAGH,IAAI,CAACE,GAAD,CAAhB;AACA,MAAIE,GAAG,GAAGD,KAAK,CAACE,MAAhB;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAG,EAAV;;AAEA,SAAOD,GAAG,GAAGF,GAAb,EAAkB;AAChB,QAAII,GAAG,GAAGL,KAAK,CAACG,GAAD,CAAf;AACAC,IAAAA,GAAG,CAACL,GAAG,CAACM,GAAD,CAAJ,CAAH,GAAgBA,GAAhB;AACAF,IAAAA,GAAG,IAAI,CAAP;AACD;;AAED,SAAOC,GAAP;AACD,CAbM,CAFP;;AAiBA,eAAeN,SAAf","sourcesContent":["import _curry1 from \"./internal/_curry1.js\";\r\nimport keys from \"./keys.js\";\r\n/**\r\n * Returns a new object with the keys of the given object as values, and the\r\n * values of the given object, which are coerced to strings, as keys. Note\r\n * that the last key found is preferred when handling the same value.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.9.0\r\n * @category Object\r\n * @sig {s: x} -> {x: s}\r\n * @param {Object} obj The object or array to invert\r\n * @return {Object} out A new object\r\n * @see R.invert\r\n * @example\r\n *\r\n *      const raceResults = {\r\n *        first: 'alice',\r\n *        second: 'jake'\r\n *      };\r\n *      R.invertObj(raceResults);\r\n *      //=> { 'alice': 'first', 'jake':'second' }\r\n *\r\n *      // Alternatively:\r\n *      const raceResults = ['alice', 'jake'];\r\n *      R.invertObj(raceResults);\r\n *      //=> { 'alice': '0', 'jake':'1' }\r\n */\r\n\r\nvar invertObj =\r\n/*#__PURE__*/\r\n_curry1(function invertObj(obj) {\r\n  var props = keys(obj);\r\n  var len = props.length;\r\n  var idx = 0;\r\n  var out = {};\r\n\r\n  while (idx < len) {\r\n    var key = props[idx];\r\n    out[obj[key]] = key;\r\n    idx += 1;\r\n  }\r\n\r\n  return out;\r\n});\r\n\r\nexport default invertObj;"]},"metadata":{},"sourceType":"module"}