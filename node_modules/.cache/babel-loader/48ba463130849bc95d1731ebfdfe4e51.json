{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _dropLastWhile from \"./internal/_dropLastWhile.js\";\nimport _xdropLastWhile from \"./internal/_xdropLastWhile.js\";\n/**\r\n * Returns a new list excluding all the tailing elements of a given list which\r\n * satisfy the supplied predicate function. It passes each value from the right\r\n * to the supplied predicate function, skipping elements until the predicate\r\n * function returns a `falsy` value. The predicate function is applied to one argument:\r\n * *(value)*.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.16.0\r\n * @category List\r\n * @sig (a -> Boolean) -> [a] -> [a]\r\n * @sig (a -> Boolean) -> String -> String\r\n * @param {Function} predicate The function to be called on each element\r\n * @param {Array} xs The collection to iterate over.\r\n * @return {Array} A new array without any trailing elements that return `falsy` values from the `predicate`.\r\n * @see R.takeLastWhile, R.addIndex, R.drop, R.dropWhile\r\n * @example\r\n *\r\n *      const lteThree = x => x <= 3;\r\n *\r\n *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\r\n *\r\n *      R.dropLastWhile(x => x !== 'd' , 'Ramda'); //=> 'Ramd'\r\n */\n\nvar dropLastWhile = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xdropLastWhile, _dropLastWhile));\n\nexport default dropLastWhile;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/dropLastWhile.js"],"names":["_curry2","_dispatchable","_dropLastWhile","_xdropLastWhile","dropLastWhile"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,eAAP,MAA4B,+BAA5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,aAAa,GACjB,aACAJ,OAAO,EACP,aACAC,aAAa,CAAC,EAAD,EAAKE,eAAL,EAAsBD,cAAtB,CAFN,CAFP;;AAMA,eAAeE,aAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\nimport _dispatchable from \"./internal/_dispatchable.js\";\r\nimport _dropLastWhile from \"./internal/_dropLastWhile.js\";\r\nimport _xdropLastWhile from \"./internal/_xdropLastWhile.js\";\r\n/**\r\n * Returns a new list excluding all the tailing elements of a given list which\r\n * satisfy the supplied predicate function. It passes each value from the right\r\n * to the supplied predicate function, skipping elements until the predicate\r\n * function returns a `falsy` value. The predicate function is applied to one argument:\r\n * *(value)*.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.16.0\r\n * @category List\r\n * @sig (a -> Boolean) -> [a] -> [a]\r\n * @sig (a -> Boolean) -> String -> String\r\n * @param {Function} predicate The function to be called on each element\r\n * @param {Array} xs The collection to iterate over.\r\n * @return {Array} A new array without any trailing elements that return `falsy` values from the `predicate`.\r\n * @see R.takeLastWhile, R.addIndex, R.drop, R.dropWhile\r\n * @example\r\n *\r\n *      const lteThree = x => x <= 3;\r\n *\r\n *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\r\n *\r\n *      R.dropLastWhile(x => x !== 'd' , 'Ramda'); //=> 'Ramd'\r\n */\r\n\r\nvar dropLastWhile =\r\n/*#__PURE__*/\r\n_curry2(\r\n/*#__PURE__*/\r\n_dispatchable([], _xdropLastWhile, _dropLastWhile));\r\n\r\nexport default dropLastWhile;"]},"metadata":{},"sourceType":"module"}