{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport pipeWith from \"./pipeWith.js\";\nimport reverse from \"./reverse.js\";\n/**\r\n * Performs right-to-left function composition using transforming function. The last argument may have\r\n * any arity; the remaining arguments must be unary.\r\n *\r\n * **Note:** The result of compose is not automatically curried. Transforming function is not used on the\r\n * last argument.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.26.0\r\n * @category Function\r\n * @sig ((* -> *), [(y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)]) -> ((a, b, ..., n) -> z)\r\n * @param {...Function} ...functions The functions to compose\r\n * @return {Function}\r\n * @see R.compose, R.pipeWith\r\n * @example\r\n *\r\n *      const composeWhileNotNil = R.composeWith((f, res) => R.isNil(res) ? res : f(res));\r\n *\r\n *      composeWhileNotNil([R.inc, R.prop('age')])({age: 1}) //=> 2\r\n *      composeWhileNotNil([R.inc, R.prop('age')])({}) //=> undefined\r\n *\r\n * @symb R.composeWith(f)([g, h, i])(...args) = f(g, f(h, i(...args)))\r\n */\n\nvar composeWith = /*#__PURE__*/_curry2(function composeWith(xf, list) {\n  return pipeWith.apply(this, [xf, reverse(list)]);\n});\n\nexport default composeWith;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/composeWith.js"],"names":["_curry2","pipeWith","reverse","composeWith","xf","list","apply"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,WAAW,GACf,aACAH,OAAO,CAAC,SAASG,WAAT,CAAqBC,EAArB,EAAyBC,IAAzB,EAA+B;AACrC,SAAOJ,QAAQ,CAACK,KAAT,CAAe,IAAf,EAAqB,CAACF,EAAD,EAAKF,OAAO,CAACG,IAAD,CAAZ,CAArB,CAAP;AACD,CAFM,CAFP;;AAMA,eAAeF,WAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\nimport pipeWith from \"./pipeWith.js\";\r\nimport reverse from \"./reverse.js\";\r\n/**\r\n * Performs right-to-left function composition using transforming function. The last argument may have\r\n * any arity; the remaining arguments must be unary.\r\n *\r\n * **Note:** The result of compose is not automatically curried. Transforming function is not used on the\r\n * last argument.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.26.0\r\n * @category Function\r\n * @sig ((* -> *), [(y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)]) -> ((a, b, ..., n) -> z)\r\n * @param {...Function} ...functions The functions to compose\r\n * @return {Function}\r\n * @see R.compose, R.pipeWith\r\n * @example\r\n *\r\n *      const composeWhileNotNil = R.composeWith((f, res) => R.isNil(res) ? res : f(res));\r\n *\r\n *      composeWhileNotNil([R.inc, R.prop('age')])({age: 1}) //=> 2\r\n *      composeWhileNotNil([R.inc, R.prop('age')])({}) //=> undefined\r\n *\r\n * @symb R.composeWith(f)([g, h, i])(...args) = f(g, f(h, i(...args)))\r\n */\r\n\r\nvar composeWith =\r\n/*#__PURE__*/\r\n_curry2(function composeWith(xf, list) {\r\n  return pipeWith.apply(this, [xf, reverse(list)]);\r\n});\r\n\r\nexport default composeWith;"]},"metadata":{},"sourceType":"module"}