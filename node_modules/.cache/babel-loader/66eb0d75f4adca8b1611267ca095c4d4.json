{"ast":null,"code":"import _curry3 from \"./internal/_curry3.js\";\n/**\r\n * Makes a descending comparator function out of a function that returns a value\r\n * that can be compared with `<` and `>`.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.23.0\r\n * @category Function\r\n * @sig Ord b => (a -> b) -> a -> a -> Number\r\n * @param {Function} fn A function of arity one that returns a value that can be compared\r\n * @param {*} a The first item to be compared.\r\n * @param {*} b The second item to be compared.\r\n * @return {Number} `-1` if fn(a) > fn(b), `1` if fn(b) > fn(a), otherwise `0`\r\n * @see R.ascend\r\n * @example\r\n *\r\n *      const byAge = R.descend(R.prop('age'));\r\n *      const people = [\r\n *        { name: 'Emma', age: 70 },\r\n *        { name: 'Peter', age: 78 },\r\n *        { name: 'Mikhail', age: 62 },\r\n *      ];\r\n *      const peopleByOldestFirst = R.sort(byAge, people);\r\n *        //=> [{ name: 'Peter', age: 78 }, { name: 'Emma', age: 70 }, { name: 'Mikhail', age: 62 }]\r\n */\n\nvar descend = /*#__PURE__*/_curry3(function descend(fn, a, b) {\n  var aa = fn(a);\n  var bb = fn(b);\n  return aa > bb ? -1 : aa < bb ? 1 : 0;\n});\n\nexport default descend;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/descend.js"],"names":["_curry3","descend","fn","a","b","aa","bb"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,OAAO,GACX,aACAD,OAAO,CAAC,SAASC,OAAT,CAAiBC,EAAjB,EAAqBC,CAArB,EAAwBC,CAAxB,EAA2B;AACjC,MAAIC,EAAE,GAAGH,EAAE,CAACC,CAAD,CAAX;AACA,MAAIG,EAAE,GAAGJ,EAAE,CAACE,CAAD,CAAX;AACA,SAAOC,EAAE,GAAGC,EAAL,GAAU,CAAC,CAAX,GAAeD,EAAE,GAAGC,EAAL,GAAU,CAAV,GAAc,CAApC;AACD,CAJM,CAFP;;AAQA,eAAeL,OAAf","sourcesContent":["import _curry3 from \"./internal/_curry3.js\";\r\n/**\r\n * Makes a descending comparator function out of a function that returns a value\r\n * that can be compared with `<` and `>`.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.23.0\r\n * @category Function\r\n * @sig Ord b => (a -> b) -> a -> a -> Number\r\n * @param {Function} fn A function of arity one that returns a value that can be compared\r\n * @param {*} a The first item to be compared.\r\n * @param {*} b The second item to be compared.\r\n * @return {Number} `-1` if fn(a) > fn(b), `1` if fn(b) > fn(a), otherwise `0`\r\n * @see R.ascend\r\n * @example\r\n *\r\n *      const byAge = R.descend(R.prop('age'));\r\n *      const people = [\r\n *        { name: 'Emma', age: 70 },\r\n *        { name: 'Peter', age: 78 },\r\n *        { name: 'Mikhail', age: 62 },\r\n *      ];\r\n *      const peopleByOldestFirst = R.sort(byAge, people);\r\n *        //=> [{ name: 'Peter', age: 78 }, { name: 'Emma', age: 70 }, { name: 'Mikhail', age: 62 }]\r\n */\r\n\r\nvar descend =\r\n/*#__PURE__*/\r\n_curry3(function descend(fn, a, b) {\r\n  var aa = fn(a);\r\n  var bb = fn(b);\r\n  return aa > bb ? -1 : aa < bb ? 1 : 0;\r\n});\r\n\r\nexport default descend;"]},"metadata":{},"sourceType":"module"}