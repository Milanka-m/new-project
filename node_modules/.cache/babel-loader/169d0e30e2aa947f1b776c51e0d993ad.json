{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\n/**\r\n * Takes a list and a predicate and returns a pair of lists with the following properties:\r\n *\r\n *  - the result of concatenating the two output lists is equivalent to the input list;\r\n *  - none of the elements of the first output list satisfies the predicate; and\r\n *  - if the second output list is non-empty, its first element satisfies the predicate.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.19.0\r\n * @category List\r\n * @sig (a -> Boolean) -> [a] -> [[a], [a]]\r\n * @param {Function} pred The predicate that determines where the array is split.\r\n * @param {Array} list The array to be split.\r\n * @return {Array}\r\n * @example\r\n *\r\n *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]\r\n */\n\nvar splitWhen = /*#__PURE__*/_curry2(function splitWhen(pred, list) {\n  var idx = 0;\n  var len = list.length;\n  var prefix = [];\n\n  while (idx < len && !pred(list[idx])) {\n    prefix.push(list[idx]);\n    idx += 1;\n  }\n\n  return [prefix, Array.prototype.slice.call(list, idx)];\n});\n\nexport default splitWhen;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/splitWhen.js"],"names":["_curry2","splitWhen","pred","list","idx","len","length","prefix","push","Array","prototype","slice","call"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,SAAS,GACb,aACAD,OAAO,CAAC,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,IAAzB,EAA+B;AACrC,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAGF,IAAI,CAACG,MAAf;AACA,MAAIC,MAAM,GAAG,EAAb;;AAEA,SAAOH,GAAG,GAAGC,GAAN,IAAa,CAACH,IAAI,CAACC,IAAI,CAACC,GAAD,CAAL,CAAzB,EAAsC;AACpCG,IAAAA,MAAM,CAACC,IAAP,CAAYL,IAAI,CAACC,GAAD,CAAhB;AACAA,IAAAA,GAAG,IAAI,CAAP;AACD;;AAED,SAAO,CAACG,MAAD,EAASE,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BT,IAA3B,EAAiCC,GAAjC,CAAT,CAAP;AACD,CAXM,CAFP;;AAeA,eAAeH,SAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\n/**\r\n * Takes a list and a predicate and returns a pair of lists with the following properties:\r\n *\r\n *  - the result of concatenating the two output lists is equivalent to the input list;\r\n *  - none of the elements of the first output list satisfies the predicate; and\r\n *  - if the second output list is non-empty, its first element satisfies the predicate.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.19.0\r\n * @category List\r\n * @sig (a -> Boolean) -> [a] -> [[a], [a]]\r\n * @param {Function} pred The predicate that determines where the array is split.\r\n * @param {Array} list The array to be split.\r\n * @return {Array}\r\n * @example\r\n *\r\n *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]\r\n */\r\n\r\nvar splitWhen =\r\n/*#__PURE__*/\r\n_curry2(function splitWhen(pred, list) {\r\n  var idx = 0;\r\n  var len = list.length;\r\n  var prefix = [];\r\n\r\n  while (idx < len && !pred(list[idx])) {\r\n    prefix.push(list[idx]);\r\n    idx += 1;\r\n  }\r\n\r\n  return [prefix, Array.prototype.slice.call(list, idx)];\r\n});\r\n\r\nexport default splitWhen;"]},"metadata":{},"sourceType":"module"}