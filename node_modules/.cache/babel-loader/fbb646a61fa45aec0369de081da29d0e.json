{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport _isFunction from \"./internal/_isFunction.js\";\nimport curryN from \"./curryN.js\";\nimport toString from \"./toString.js\";\n/**\r\n * Turns a named method with a specified arity into a function that can be\r\n * called directly supplied with arguments and a target object.\r\n *\r\n * The returned function is curried and accepts `arity + 1` parameters where\r\n * the final parameter is the target object.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Function\r\n * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)\r\n * @param {Number} arity Number of arguments the returned function should take\r\n *        before the target object.\r\n * @param {String} method Name of any of the target object's methods to call.\r\n * @return {Function} A new curried function.\r\n * @see R.construct\r\n * @example\r\n *\r\n *      const sliceFrom = R.invoker(1, 'slice');\r\n *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\r\n *      const sliceFrom6 = R.invoker(2, 'slice')(6);\r\n *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\r\n *\r\n *      const dog = {\r\n *        speak: async () => 'Woof!'\r\n *      };\r\n *      const speak = R.invoker(0, 'speak');\r\n *      speak(dog).then(console.log) //~> 'Woof!'\r\n *\r\n * @symb R.invoker(0, 'method')(o) = o['method']()\r\n * @symb R.invoker(1, 'method')(a, o) = o['method'](a)\r\n * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)\r\n */\n\nvar invoker = /*#__PURE__*/_curry2(function invoker(arity, method) {\n  return curryN(arity + 1, function () {\n    var target = arguments[arity];\n\n    if (target != null && _isFunction(target[method])) {\n      return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));\n    }\n\n    throw new TypeError(toString(target) + ' does not have a method named \"' + method + '\"');\n  });\n});\n\nexport default invoker;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/invoker.js"],"names":["_curry2","_isFunction","curryN","toString","invoker","arity","method","target","arguments","apply","Array","prototype","slice","call","TypeError"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,OAAO,GACX,aACAJ,OAAO,CAAC,SAASI,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AACtC,SAAOJ,MAAM,CAACG,KAAK,GAAG,CAAT,EAAY,YAAY;AACnC,QAAIE,MAAM,GAAGC,SAAS,CAACH,KAAD,CAAtB;;AAEA,QAAIE,MAAM,IAAI,IAAV,IAAkBN,WAAW,CAACM,MAAM,CAACD,MAAD,CAAP,CAAjC,EAAmD;AACjD,aAAOC,MAAM,CAACD,MAAD,CAAN,CAAeG,KAAf,CAAqBF,MAArB,EAA6BG,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BL,SAA3B,EAAsC,CAAtC,EAAyCH,KAAzC,CAA7B,CAAP;AACD;;AAED,UAAM,IAAIS,SAAJ,CAAcX,QAAQ,CAACI,MAAD,CAAR,GAAmB,iCAAnB,GAAuDD,MAAvD,GAAgE,GAA9E,CAAN;AACD,GARY,CAAb;AASD,CAVM,CAFP;;AAcA,eAAeF,OAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\nimport _isFunction from \"./internal/_isFunction.js\";\r\nimport curryN from \"./curryN.js\";\r\nimport toString from \"./toString.js\";\r\n/**\r\n * Turns a named method with a specified arity into a function that can be\r\n * called directly supplied with arguments and a target object.\r\n *\r\n * The returned function is curried and accepts `arity + 1` parameters where\r\n * the final parameter is the target object.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Function\r\n * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)\r\n * @param {Number} arity Number of arguments the returned function should take\r\n *        before the target object.\r\n * @param {String} method Name of any of the target object's methods to call.\r\n * @return {Function} A new curried function.\r\n * @see R.construct\r\n * @example\r\n *\r\n *      const sliceFrom = R.invoker(1, 'slice');\r\n *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\r\n *      const sliceFrom6 = R.invoker(2, 'slice')(6);\r\n *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\r\n *\r\n *      const dog = {\r\n *        speak: async () => 'Woof!'\r\n *      };\r\n *      const speak = R.invoker(0, 'speak');\r\n *      speak(dog).then(console.log) //~> 'Woof!'\r\n *\r\n * @symb R.invoker(0, 'method')(o) = o['method']()\r\n * @symb R.invoker(1, 'method')(a, o) = o['method'](a)\r\n * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)\r\n */\r\n\r\nvar invoker =\r\n/*#__PURE__*/\r\n_curry2(function invoker(arity, method) {\r\n  return curryN(arity + 1, function () {\r\n    var target = arguments[arity];\r\n\r\n    if (target != null && _isFunction(target[method])) {\r\n      return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));\r\n    }\r\n\r\n    throw new TypeError(toString(target) + ' does not have a method named \"' + method + '\"');\r\n  });\r\n});\r\n\r\nexport default invoker;"]},"metadata":{},"sourceType":"module"}