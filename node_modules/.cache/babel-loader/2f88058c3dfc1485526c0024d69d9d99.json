{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"D:\\\\Lianok\\\\dev\\\\new-project\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\createClass.js\").default;\n\nvar _classCallCheck = require(\"D:\\\\Lianok\\\\dev\\\\new-project\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\classCallCheck.js\").default;\n\nvar _inherits = require(\"D:\\\\Lianok\\\\dev\\\\new-project\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\inherits.js\").default;\n\nvar _createSuper = require(\"D:\\\\Lianok\\\\dev\\\\new-project\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\createSuper.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateExpiry = exports.unfreeze = exports.freeze = exports.revoke = exports.issueVanilla = exports.revokeGatekeeper = exports.addGatekeeper = exports.GatewayInstruction = void 0;\n\nvar solanaBorsh_1 = require(\"./solanaBorsh\");\n\nvar constants_1 = require(\"./constants\");\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar GatewayTokenData_1 = require(\"./GatewayTokenData\");\n/**\r\n * Creates instructions to send to the gateway program.\r\n *\r\n * Must match solana/program/src/instruction.rs\r\n */\n\n\nvar AddGatekeeper = /*#__PURE__*/function (_solanaBorsh_1$Assign) {\n  _inherits(AddGatekeeper, _solanaBorsh_1$Assign);\n\n  var _super = _createSuper(AddGatekeeper);\n\n  function AddGatekeeper() {\n    _classCallCheck(this, AddGatekeeper);\n\n    return _super.apply(this, arguments);\n  }\n\n  return _createClass(AddGatekeeper);\n}(solanaBorsh_1.Assignable);\n\nvar IssueVanilla = /*#__PURE__*/function (_solanaBorsh_1$Assign2) {\n  _inherits(IssueVanilla, _solanaBorsh_1$Assign2);\n\n  var _super2 = _createSuper(IssueVanilla);\n\n  function IssueVanilla() {\n    _classCallCheck(this, IssueVanilla);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return _createClass(IssueVanilla);\n}(solanaBorsh_1.Assignable);\n\nvar SetState = /*#__PURE__*/function (_solanaBorsh_1$Assign3) {\n  _inherits(SetState, _solanaBorsh_1$Assign3);\n\n  var _super3 = _createSuper(SetState);\n\n  function SetState() {\n    _classCallCheck(this, SetState);\n\n    return _super3.apply(this, arguments);\n  }\n\n  return _createClass(SetState);\n}(solanaBorsh_1.Assignable);\n\nvar UpdateExpiry = /*#__PURE__*/function (_solanaBorsh_1$Assign4) {\n  _inherits(UpdateExpiry, _solanaBorsh_1$Assign4);\n\n  var _super4 = _createSuper(UpdateExpiry);\n\n  function UpdateExpiry() {\n    _classCallCheck(this, UpdateExpiry);\n\n    return _super4.apply(this, arguments);\n  }\n\n  return _createClass(UpdateExpiry);\n}(solanaBorsh_1.Assignable);\n\nvar RevokeGatekeeper = /*#__PURE__*/function (_solanaBorsh_1$Assign5) {\n  _inherits(RevokeGatekeeper, _solanaBorsh_1$Assign5);\n\n  var _super5 = _createSuper(RevokeGatekeeper);\n\n  function RevokeGatekeeper() {\n    _classCallCheck(this, RevokeGatekeeper);\n\n    return _super5.apply(this, arguments);\n  }\n\n  return _createClass(RevokeGatekeeper);\n}(solanaBorsh_1.Assignable);\n\nvar GatewayInstruction = /*#__PURE__*/function (_solanaBorsh_1$Enum) {\n  _inherits(GatewayInstruction, _solanaBorsh_1$Enum);\n\n  var _super6 = _createSuper(GatewayInstruction);\n\n  function GatewayInstruction() {\n    _classCallCheck(this, GatewayInstruction);\n\n    return _super6.apply(this, arguments);\n  }\n\n  _createClass(GatewayInstruction, null, [{\n    key: \"addGatekeeper\",\n    value: function addGatekeeper() {\n      return new GatewayInstruction({\n        addGatekeeper: new AddGatekeeper({})\n      });\n    }\n  }, {\n    key: \"issueVanilla\",\n    value: function issueVanilla(seed, expireTime) {\n      return new GatewayInstruction({\n        issueVanilla: new IssueVanilla({\n          seed: seed,\n          expireTime: expireTime\n        })\n      });\n    }\n  }, {\n    key: \"revoke\",\n    value: function revoke() {\n      return new GatewayInstruction({\n        setState: new SetState({\n          state: new GatewayTokenData_1.GatewayTokenState({\n            revoked: new GatewayTokenData_1.Revoked({})\n          })\n        })\n      });\n    }\n  }, {\n    key: \"freeze\",\n    value: function freeze() {\n      return new GatewayInstruction({\n        setState: new SetState({\n          state: new GatewayTokenData_1.GatewayTokenState({\n            frozen: new GatewayTokenData_1.Frozen({})\n          })\n        })\n      });\n    }\n  }, {\n    key: \"unfreeze\",\n    value: function unfreeze() {\n      return new GatewayInstruction({\n        setState: new SetState({\n          state: new GatewayTokenData_1.GatewayTokenState({\n            active: new GatewayTokenData_1.Active({})\n          })\n        })\n      });\n    }\n  }, {\n    key: \"updateExpiry\",\n    value: function updateExpiry(expireTime) {\n      return new GatewayInstruction({\n        updateExpiry: new UpdateExpiry({\n          expireTime: expireTime\n        })\n      });\n    }\n  }, {\n    key: \"revokeGatekeeper\",\n    value: function revokeGatekeeper() {\n      return new GatewayInstruction({\n        revokeGatekeeper: new RevokeGatekeeper({})\n      });\n    }\n  }]);\n\n  return GatewayInstruction;\n}(solanaBorsh_1.Enum);\n\nexports.GatewayInstruction = GatewayInstruction;\n/**\r\n * Add a gatekeeper to a gatekeeper network.\r\n * Returns a Solana instruction that must be signed by the gatekeeper network authority.\r\n *\r\n * @param payer The payer of the transaction (used to pay rent into the gatekeeper account)\r\n * @param gatekeeperAccount An uninitialised gatekeeper account PDA. The address must be derived via getGatekeeperAccountKeyFromGatekeeperAuthority()\r\n * @param gatekeeperAuthority The gatekeeper to add to the network\r\n * @param network The gatekeeper network that the account is being added to.\r\n */\n\nfunction addGatekeeper(payer, gatekeeperAccount, gatekeeperAuthority, network) {\n  var keys = [{\n    pubkey: payer,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: gatekeeperAccount,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: gatekeeperAuthority,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: network,\n    isSigner: true,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }];\n  var data = GatewayInstruction.addGatekeeper().encode();\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: constants_1.PROGRAM_ID,\n    data: data\n  });\n}\n\nexports.addGatekeeper = addGatekeeper;\n/**\r\n * Removes a gatekeeper from a gatekeeper network.\r\n * Returns a Solana instruction that must be signed by the gatekeeper network authority.\r\n *\r\n * @param funds_to The account the gatekeeper account's rent goes to\r\n * @param gatekeeperAccount The gatekeeper account PDA. The address must be derived via getGatekeeperAccountKeyFromGatekeeperAuthority()\r\n * @param gatekeeperAuthority The gatekeeper to remove from the network\r\n * @param network The gatekeeper network that the account is being removed from.\r\n */\n\nfunction revokeGatekeeper(funds_to, gatekeeperAccount, gatekeeperAuthority, network) {\n  var keys = [{\n    pubkey: funds_to,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: gatekeeperAccount,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: gatekeeperAuthority,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: network,\n    isSigner: true,\n    isWritable: false\n  }];\n  var data = GatewayInstruction.revokeGatekeeper().encode();\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: constants_1.PROGRAM_ID,\n    data: data\n  });\n}\n\nexports.revokeGatekeeper = revokeGatekeeper;\n/**\r\n * Issue a gateway token to the owner publicKey. This is a 'vanilla' token, in that it does not\r\n * rely on any other accounts (e.g. identity accounts) to validate.\r\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\r\n * @param gatewayTokenAccount An uninitialised gateway token account PDA. The address must be derived via getGatewayTokenKeyForOwner\r\n * @param payer The payer of the transaction (used to pay rent into the gatekeeper account).\r\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper issuing the token\r\n * @param owner The recipient of the token\r\n * @param gatekeeperAuthority The gatekeeper issuing the token\r\n * @param gatekeeperNetwork The network that the gatekeeper belongs to\r\n * @param seed An 8-byte seed array, used to add multiple tokens to the same owner. Must be unique to each token, if present\r\n * @param expireTime The unix timestamp at which the token is no longer valid\r\n */\n\nfunction issueVanilla(gatewayTokenAccount, payer, gatekeeperAccount, owner, gatekeeperAuthority, gatekeeperNetwork, seed, expireTime) {\n  var keys = [{\n    pubkey: payer,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: gatewayTokenAccount,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: owner,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: gatekeeperAccount,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: gatekeeperAuthority,\n    isSigner: true,\n    isWritable: false\n  }, {\n    pubkey: gatekeeperNetwork,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }];\n  var data = GatewayInstruction.issueVanilla(seed, expireTime).encode();\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: constants_1.PROGRAM_ID,\n    data: data\n  });\n}\n\nexports.issueVanilla = issueVanilla;\n\nvar getStateChangeAccountMeta = function getStateChangeAccountMeta(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) {\n  return [{\n    pubkey: gatewayTokenAccount,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: gatekeeperAuthority,\n    isSigner: true,\n    isWritable: false\n  }, {\n    pubkey: gatekeeperAccount,\n    isSigner: false,\n    isWritable: false\n  }];\n};\n/**\r\n * Revoke a gateway token.\r\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\r\n * @param gatewayTokenAccount The gateway token to revoke\r\n * @param gatekeeperAuthority The gatekeeper revoking the token (must be in the same network as the issuing gatekeeper)\r\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper revoking the token\r\n */\n\n\nfunction revoke(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) {\n  var keys = getStateChangeAccountMeta(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount);\n  var data = GatewayInstruction.revoke().encode();\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: constants_1.PROGRAM_ID,\n    data: data\n  });\n}\n\nexports.revoke = revoke;\n/**\r\n * Freeze a gateway token.\r\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\r\n * @param gatewayTokenAccount The gateway token to freeze\r\n * @param gatekeeperAuthority The gatekeeper freezing the token (must be equal to the issuing gatekeeper)\r\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper freezing the token\r\n */\n\nfunction freeze(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) {\n  var keys = getStateChangeAccountMeta(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount);\n  var data = GatewayInstruction.freeze().encode();\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: constants_1.PROGRAM_ID,\n    data: data\n  });\n}\n\nexports.freeze = freeze;\n/**\r\n * Unfreeze a gateway token.\r\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\r\n * @param gatewayTokenAccount The gateway token to unfreeze\r\n * @param gatekeeperAuthority The gatekeeper unfreezing the token (must be equal to the issuing gatekeeper)\r\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper unfreezing the token\r\n */\n\nfunction unfreeze(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) {\n  var keys = getStateChangeAccountMeta(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount);\n  var data = GatewayInstruction.unfreeze().encode();\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: constants_1.PROGRAM_ID,\n    data: data\n  });\n}\n\nexports.unfreeze = unfreeze;\n/**\r\n * Update the expiry time of a gateway token.\r\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\r\n * @param gatewayTokenAccount The gateway token to be updated (must have an expiry time)\r\n * @param gatekeeperAuthority The gatekeeper (must be equal to the issuing gatekeeper)\r\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper\r\n * @param expireTime The new expiry time\r\n */\n\nfunction updateExpiry(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount, expireTime) {\n  var keys = [{\n    pubkey: gatewayTokenAccount,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: gatekeeperAuthority,\n    isSigner: true,\n    isWritable: false\n  }, {\n    pubkey: gatekeeperAccount,\n    isSigner: false,\n    isWritable: false\n  }];\n  var data = GatewayInstruction.updateExpiry(expireTime).encode();\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: constants_1.PROGRAM_ID,\n    data: data\n  });\n}\n\nexports.updateExpiry = updateExpiry;\nsolanaBorsh_1.SCHEMA.set(GatewayInstruction, {\n  kind: \"enum\",\n  field: \"enum\",\n  values: [[\"addGatekeeper\", AddGatekeeper], [\"issueVanilla\", IssueVanilla], [\"setState\", SetState], [\"updateExpiry\", UpdateExpiry], [\"revokeGatekeeper\", RevokeGatekeeper]]\n});\nsolanaBorsh_1.SCHEMA.set(AddGatekeeper, {\n  kind: \"struct\",\n  fields: []\n});\nsolanaBorsh_1.SCHEMA.set(IssueVanilla, {\n  kind: \"struct\",\n  fields: [[\"seed\", {\n    kind: \"option\",\n    type: [8]\n  }], [\"expireTime\", {\n    kind: \"option\",\n    type: \"u64\"\n  }]]\n});\nsolanaBorsh_1.SCHEMA.set(SetState, {\n  kind: \"struct\",\n  fields: [[\"state\", GatewayTokenData_1.GatewayTokenState]]\n});\nsolanaBorsh_1.SCHEMA.set(UpdateExpiry, {\n  kind: \"struct\",\n  fields: [[\"expireTime\", \"u64\"]]\n});\nsolanaBorsh_1.SCHEMA.set(RevokeGatekeeper, {\n  kind: \"struct\",\n  fields: []\n});","map":{"version":3,"sources":["../../src/lib/instruction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.updateExpiry = exports.unfreeze = exports.freeze = exports.revoke = exports.issueVanilla = exports.revokeGatekeeper = exports.addGatekeeper = exports.GatewayInstruction = void 0;\r\nconst solanaBorsh_1 = require(\"./solanaBorsh\");\r\nconst constants_1 = require(\"./constants\");\r\nconst web3_js_1 = require(\"@solana/web3.js\");\r\nconst GatewayTokenData_1 = require(\"./GatewayTokenData\");\r\n/**\r\n * Creates instructions to send to the gateway program.\r\n *\r\n * Must match solana/program/src/instruction.rs\r\n */\r\nclass AddGatekeeper extends solanaBorsh_1.Assignable {\r\n}\r\nclass IssueVanilla extends solanaBorsh_1.Assignable {\r\n}\r\nclass SetState extends solanaBorsh_1.Assignable {\r\n}\r\nclass UpdateExpiry extends solanaBorsh_1.Assignable {\r\n}\r\nclass RevokeGatekeeper extends solanaBorsh_1.Assignable {\r\n}\r\nclass GatewayInstruction extends solanaBorsh_1.Enum {\r\n    static addGatekeeper() {\r\n        return new GatewayInstruction({\r\n            addGatekeeper: new AddGatekeeper({}),\r\n        });\r\n    }\r\n    static issueVanilla(seed, expireTime) {\r\n        return new GatewayInstruction({\r\n            issueVanilla: new IssueVanilla({ seed, expireTime }),\r\n        });\r\n    }\r\n    static revoke() {\r\n        return new GatewayInstruction({\r\n            setState: new SetState({\r\n                state: new GatewayTokenData_1.GatewayTokenState({ revoked: new GatewayTokenData_1.Revoked({}) }),\r\n            }),\r\n        });\r\n    }\r\n    static freeze() {\r\n        return new GatewayInstruction({\r\n            setState: new SetState({\r\n                state: new GatewayTokenData_1.GatewayTokenState({ frozen: new GatewayTokenData_1.Frozen({}) }),\r\n            }),\r\n        });\r\n    }\r\n    static unfreeze() {\r\n        return new GatewayInstruction({\r\n            setState: new SetState({\r\n                state: new GatewayTokenData_1.GatewayTokenState({ active: new GatewayTokenData_1.Active({}) }),\r\n            }),\r\n        });\r\n    }\r\n    static updateExpiry(expireTime) {\r\n        return new GatewayInstruction({\r\n            updateExpiry: new UpdateExpiry({\r\n                expireTime,\r\n            }),\r\n        });\r\n    }\r\n    static revokeGatekeeper() {\r\n        return new GatewayInstruction({\r\n            revokeGatekeeper: new RevokeGatekeeper({}),\r\n        });\r\n    }\r\n}\r\nexports.GatewayInstruction = GatewayInstruction;\r\n/**\r\n * Add a gatekeeper to a gatekeeper network.\r\n * Returns a Solana instruction that must be signed by the gatekeeper network authority.\r\n *\r\n * @param payer The payer of the transaction (used to pay rent into the gatekeeper account)\r\n * @param gatekeeperAccount An uninitialised gatekeeper account PDA. The address must be derived via getGatekeeperAccountKeyFromGatekeeperAuthority()\r\n * @param gatekeeperAuthority The gatekeeper to add to the network\r\n * @param network The gatekeeper network that the account is being added to.\r\n */\r\nfunction addGatekeeper(payer, gatekeeperAccount, gatekeeperAuthority, network) {\r\n    const keys = [\r\n        { pubkey: payer, isSigner: true, isWritable: true },\r\n        { pubkey: gatekeeperAccount, isSigner: false, isWritable: true },\r\n        { pubkey: gatekeeperAuthority, isSigner: false, isWritable: false },\r\n        { pubkey: network, isSigner: true, isWritable: false },\r\n        { pubkey: web3_js_1.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\r\n        { pubkey: web3_js_1.SystemProgram.programId, isSigner: false, isWritable: false },\r\n    ];\r\n    const data = GatewayInstruction.addGatekeeper().encode();\r\n    return new web3_js_1.TransactionInstruction({\r\n        keys,\r\n        programId: constants_1.PROGRAM_ID,\r\n        data,\r\n    });\r\n}\r\nexports.addGatekeeper = addGatekeeper;\r\n/**\r\n * Removes a gatekeeper from a gatekeeper network.\r\n * Returns a Solana instruction that must be signed by the gatekeeper network authority.\r\n *\r\n * @param funds_to The account the gatekeeper account's rent goes to\r\n * @param gatekeeperAccount The gatekeeper account PDA. The address must be derived via getGatekeeperAccountKeyFromGatekeeperAuthority()\r\n * @param gatekeeperAuthority The gatekeeper to remove from the network\r\n * @param network The gatekeeper network that the account is being removed from.\r\n */\r\nfunction revokeGatekeeper(funds_to, gatekeeperAccount, gatekeeperAuthority, network) {\r\n    const keys = [\r\n        { pubkey: funds_to, isSigner: false, isWritable: true },\r\n        { pubkey: gatekeeperAccount, isSigner: false, isWritable: true },\r\n        { pubkey: gatekeeperAuthority, isSigner: false, isWritable: false },\r\n        { pubkey: network, isSigner: true, isWritable: false },\r\n    ];\r\n    const data = GatewayInstruction.revokeGatekeeper().encode();\r\n    return new web3_js_1.TransactionInstruction({\r\n        keys,\r\n        programId: constants_1.PROGRAM_ID,\r\n        data,\r\n    });\r\n}\r\nexports.revokeGatekeeper = revokeGatekeeper;\r\n/**\r\n * Issue a gateway token to the owner publicKey. This is a 'vanilla' token, in that it does not\r\n * rely on any other accounts (e.g. identity accounts) to validate.\r\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\r\n * @param gatewayTokenAccount An uninitialised gateway token account PDA. The address must be derived via getGatewayTokenKeyForOwner\r\n * @param payer The payer of the transaction (used to pay rent into the gatekeeper account).\r\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper issuing the token\r\n * @param owner The recipient of the token\r\n * @param gatekeeperAuthority The gatekeeper issuing the token\r\n * @param gatekeeperNetwork The network that the gatekeeper belongs to\r\n * @param seed An 8-byte seed array, used to add multiple tokens to the same owner. Must be unique to each token, if present\r\n * @param expireTime The unix timestamp at which the token is no longer valid\r\n */\r\nfunction issueVanilla(gatewayTokenAccount, payer, gatekeeperAccount, owner, gatekeeperAuthority, gatekeeperNetwork, seed, expireTime) {\r\n    const keys = [\r\n        { pubkey: payer, isSigner: true, isWritable: true },\r\n        { pubkey: gatewayTokenAccount, isSigner: false, isWritable: true },\r\n        { pubkey: owner, isSigner: false, isWritable: false },\r\n        { pubkey: gatekeeperAccount, isSigner: false, isWritable: false },\r\n        { pubkey: gatekeeperAuthority, isSigner: true, isWritable: false },\r\n        { pubkey: gatekeeperNetwork, isSigner: false, isWritable: false },\r\n        { pubkey: web3_js_1.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\r\n        { pubkey: web3_js_1.SystemProgram.programId, isSigner: false, isWritable: false },\r\n    ];\r\n    const data = GatewayInstruction.issueVanilla(seed, expireTime).encode();\r\n    return new web3_js_1.TransactionInstruction({\r\n        keys,\r\n        programId: constants_1.PROGRAM_ID,\r\n        data,\r\n    });\r\n}\r\nexports.issueVanilla = issueVanilla;\r\nconst getStateChangeAccountMeta = (gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) => [\r\n    { pubkey: gatewayTokenAccount, isSigner: false, isWritable: true },\r\n    { pubkey: gatekeeperAuthority, isSigner: true, isWritable: false },\r\n    { pubkey: gatekeeperAccount, isSigner: false, isWritable: false },\r\n];\r\n/**\r\n * Revoke a gateway token.\r\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\r\n * @param gatewayTokenAccount The gateway token to revoke\r\n * @param gatekeeperAuthority The gatekeeper revoking the token (must be in the same network as the issuing gatekeeper)\r\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper revoking the token\r\n */\r\nfunction revoke(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) {\r\n    const keys = getStateChangeAccountMeta(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount);\r\n    const data = GatewayInstruction.revoke().encode();\r\n    return new web3_js_1.TransactionInstruction({\r\n        keys,\r\n        programId: constants_1.PROGRAM_ID,\r\n        data,\r\n    });\r\n}\r\nexports.revoke = revoke;\r\n/**\r\n * Freeze a gateway token.\r\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\r\n * @param gatewayTokenAccount The gateway token to freeze\r\n * @param gatekeeperAuthority The gatekeeper freezing the token (must be equal to the issuing gatekeeper)\r\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper freezing the token\r\n */\r\nfunction freeze(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) {\r\n    const keys = getStateChangeAccountMeta(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount);\r\n    const data = GatewayInstruction.freeze().encode();\r\n    return new web3_js_1.TransactionInstruction({\r\n        keys,\r\n        programId: constants_1.PROGRAM_ID,\r\n        data,\r\n    });\r\n}\r\nexports.freeze = freeze;\r\n/**\r\n * Unfreeze a gateway token.\r\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\r\n * @param gatewayTokenAccount The gateway token to unfreeze\r\n * @param gatekeeperAuthority The gatekeeper unfreezing the token (must be equal to the issuing gatekeeper)\r\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper unfreezing the token\r\n */\r\nfunction unfreeze(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) {\r\n    const keys = getStateChangeAccountMeta(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount);\r\n    const data = GatewayInstruction.unfreeze().encode();\r\n    return new web3_js_1.TransactionInstruction({\r\n        keys,\r\n        programId: constants_1.PROGRAM_ID,\r\n        data,\r\n    });\r\n}\r\nexports.unfreeze = unfreeze;\r\n/**\r\n * Update the expiry time of a gateway token.\r\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\r\n * @param gatewayTokenAccount The gateway token to be updated (must have an expiry time)\r\n * @param gatekeeperAuthority The gatekeeper (must be equal to the issuing gatekeeper)\r\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper\r\n * @param expireTime The new expiry time\r\n */\r\nfunction updateExpiry(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount, expireTime) {\r\n    const keys = [\r\n        { pubkey: gatewayTokenAccount, isSigner: false, isWritable: true },\r\n        { pubkey: gatekeeperAuthority, isSigner: true, isWritable: false },\r\n        { pubkey: gatekeeperAccount, isSigner: false, isWritable: false },\r\n    ];\r\n    const data = GatewayInstruction.updateExpiry(expireTime).encode();\r\n    return new web3_js_1.TransactionInstruction({\r\n        keys,\r\n        programId: constants_1.PROGRAM_ID,\r\n        data,\r\n    });\r\n}\r\nexports.updateExpiry = updateExpiry;\r\nsolanaBorsh_1.SCHEMA.set(GatewayInstruction, {\r\n    kind: \"enum\",\r\n    field: \"enum\",\r\n    values: [\r\n        [\"addGatekeeper\", AddGatekeeper],\r\n        [\"issueVanilla\", IssueVanilla],\r\n        [\"setState\", SetState],\r\n        [\"updateExpiry\", UpdateExpiry],\r\n        [\"revokeGatekeeper\", RevokeGatekeeper],\r\n    ],\r\n});\r\nsolanaBorsh_1.SCHEMA.set(AddGatekeeper, {\r\n    kind: \"struct\",\r\n    fields: [],\r\n});\r\nsolanaBorsh_1.SCHEMA.set(IssueVanilla, {\r\n    kind: \"struct\",\r\n    fields: [\r\n        [\"seed\", { kind: \"option\", type: [8] }],\r\n        [\"expireTime\", { kind: \"option\", type: \"u64\" }],\r\n    ],\r\n});\r\nsolanaBorsh_1.SCHEMA.set(SetState, {\r\n    kind: \"struct\",\r\n    fields: [[\"state\", GatewayTokenData_1.GatewayTokenState]],\r\n});\r\nsolanaBorsh_1.SCHEMA.set(UpdateExpiry, {\r\n    kind: \"struct\",\r\n    fields: [[\"expireTime\", \"u64\"]],\r\n});\r\nsolanaBorsh_1.SCHEMA.set(RevokeGatekeeper, {\r\n    kind: \"struct\",\r\n    fields: [],\r\n});\r\n//# sourceMappingURL=instruction.js.map"]},"metadata":{},"sourceType":"script"}