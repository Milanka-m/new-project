{"ast":null,"code":"import { useEffect } from 'react';\nimport { CivicSignEventTypeRequest, remoteSignWindowEventEmitterImplementation } from '../utils/remoteSign';\nimport logger from '../logger';\n\nconst logDebug = function (message) {\n  let obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return logger.debug(`[useCivicPassEventListener] ${message}`, obj);\n};\n\nconst logError = function (message) {\n  let obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return logger.error(`[useCivicPassEventListener] ${message}`, obj);\n};\n\nconst useCivicPassEventListener = _ref => {\n  let {\n    wallet,\n    chainImplementation,\n    remoteSign\n  } = _ref;\n\n  const dispatchEvent = async response => {\n    if (!wallet) return;\n    const remoteSigner = remoteSign !== null && remoteSign !== void 0 ? remoteSign : remoteSignWindowEventEmitterImplementation();\n    const events = {\n      [CivicSignEventTypeRequest.REQUEST_PUBLIC_KEY]: () => new Promise(resolve => {\n        remoteSigner === null || remoteSigner === void 0 ? void 0 : remoteSigner.sendPublicKey(wallet.publicKey);\n        resolve();\n      }),\n      [CivicSignEventTypeRequest.REQUEST_DID]: () => new Promise(resolve => {\n        remoteSigner === null || remoteSigner === void 0 ? void 0 : remoteSigner.sendDid(`did:sol:${wallet.publicKey}`);\n        resolve();\n      }),\n      [CivicSignEventTypeRequest.REQUEST_SIGNED_PROOF]: async () => {\n        try {\n          const proof = await chainImplementation.proveWalletOwnership();\n          remoteSigner === null || remoteSigner === void 0 ? void 0 : remoteSigner.sendSignedProof(proof);\n        } catch (err) {\n          logError('Error signing proof', err);\n        }\n      }\n    };\n    const event = events[response];\n\n    if (event) {\n      await event();\n      logDebug('Successfully emitted compliance event', response);\n    }\n  };\n  /**\r\n   * Listen for post messages from the compliance iframe and dispatch events\r\n   * based on the event type\r\n   */\n\n\n  useEffect(() => {\n    const handler = async response => {\n      await dispatchEvent(response.data);\n    };\n\n    window.addEventListener('message', handler);\n    return () => {\n      logDebug('Removing event listener for compliance');\n      return window.removeEventListener('message', handler);\n    };\n  }, []);\n  return {\n    dispatchEvent\n  };\n};\n\nexport default useCivicPassEventListener;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/@civic/solana-gateway-react/dist/esm/useHooks/useCivicPassEventListener.js"],"names":["useEffect","CivicSignEventTypeRequest","remoteSignWindowEventEmitterImplementation","logger","logDebug","message","obj","debug","logError","error","useCivicPassEventListener","wallet","chainImplementation","remoteSign","dispatchEvent","response","remoteSigner","events","REQUEST_PUBLIC_KEY","Promise","resolve","sendPublicKey","publicKey","REQUEST_DID","sendDid","REQUEST_SIGNED_PROOF","proof","proveWalletOwnership","sendSignedProof","err","event","handler","data","window","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\r\nimport { CivicSignEventTypeRequest, remoteSignWindowEventEmitterImplementation } from '../utils/remoteSign';\r\nimport logger from '../logger';\r\nconst logDebug = (message, obj = null) => logger.debug(`[useCivicPassEventListener] ${message}`, obj);\r\nconst logError = (message, obj = null) => logger.error(`[useCivicPassEventListener] ${message}`, obj);\r\nconst useCivicPassEventListener = ({ wallet, chainImplementation, remoteSign, }) => {\r\n    const dispatchEvent = async (response) => {\r\n        if (!wallet)\r\n            return;\r\n        const remoteSigner = remoteSign !== null && remoteSign !== void 0 ? remoteSign : remoteSignWindowEventEmitterImplementation();\r\n        const events = {\r\n            [CivicSignEventTypeRequest.REQUEST_PUBLIC_KEY]: () => new Promise((resolve) => {\r\n                remoteSigner === null || remoteSigner === void 0 ? void 0 : remoteSigner.sendPublicKey(wallet.publicKey);\r\n                resolve();\r\n            }),\r\n            [CivicSignEventTypeRequest.REQUEST_DID]: () => new Promise((resolve) => {\r\n                remoteSigner === null || remoteSigner === void 0 ? void 0 : remoteSigner.sendDid(`did:sol:${wallet.publicKey}`);\r\n                resolve();\r\n            }),\r\n            [CivicSignEventTypeRequest.REQUEST_SIGNED_PROOF]: async () => {\r\n                try {\r\n                    const proof = await chainImplementation.proveWalletOwnership();\r\n                    remoteSigner === null || remoteSigner === void 0 ? void 0 : remoteSigner.sendSignedProof(proof);\r\n                }\r\n                catch (err) {\r\n                    logError('Error signing proof', err);\r\n                }\r\n            },\r\n        };\r\n        const event = events[response];\r\n        if (event) {\r\n            await event();\r\n            logDebug('Successfully emitted compliance event', response);\r\n        }\r\n    };\r\n    /**\r\n     * Listen for post messages from the compliance iframe and dispatch events\r\n     * based on the event type\r\n     */\r\n    useEffect(() => {\r\n        const handler = async (response) => {\r\n            await dispatchEvent(response.data);\r\n        };\r\n        window.addEventListener('message', handler);\r\n        return () => {\r\n            logDebug('Removing event listener for compliance');\r\n            return window.removeEventListener('message', handler);\r\n        };\r\n    }, []);\r\n    return { dispatchEvent };\r\n};\r\nexport default useCivicPassEventListener;\r\n"]},"metadata":{},"sourceType":"module"}