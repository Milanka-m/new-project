{"ast":null,"code":"import _curry3 from \"./internal/_curry3.js\"; // `Identity` is a functor that holds a single value, where `map` simply\n// transforms the held value with the provided function.\n\nvar Identity = function (x) {\n  return {\n    value: x,\n    map: function (f) {\n      return Identity(f(x));\n    }\n  };\n};\n/**\r\n * Returns the result of \"setting\" the portion of the given data structure\r\n * focused by the given lens to the result of applying the given function to\r\n * the focused value.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.16.0\r\n * @category Object\r\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\r\n * @sig Lens s a -> (a -> a) -> s -> s\r\n * @param {Lens} lens\r\n * @param {*} v\r\n * @param {*} x\r\n * @return {*}\r\n * @see R.prop, R.lensIndex, R.lensProp\r\n * @example\r\n *\r\n *      const headLens = R.lensIndex(0);\r\n *\r\n *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']\r\n */\n\n\nvar over = /*#__PURE__*/_curry3(function over(lens, f, x) {\n  // The value returned by the getter function is first transformed with `f`,\n  // then set as the value of an `Identity`. This is then mapped over with the\n  // setter function of the lens.\n  return lens(function (y) {\n    return Identity(f(y));\n  })(x).value;\n});\n\nexport default over;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/over.js"],"names":["_curry3","Identity","x","value","map","f","over","lens","y"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB,C,CAA6C;AAC7C;;AAEA,IAAIC,QAAQ,GAAG,UAAUC,CAAV,EAAa;AAC1B,SAAO;AACLC,IAAAA,KAAK,EAAED,CADF;AAELE,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AAChB,aAAOJ,QAAQ,CAACI,CAAC,CAACH,CAAD,CAAF,CAAf;AACD;AAJI,GAAP;AAMD,CAPD;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAII,IAAI,GACR,aACAN,OAAO,CAAC,SAASM,IAAT,CAAcC,IAAd,EAAoBF,CAApB,EAAuBH,CAAvB,EAA0B;AAChC;AACA;AACA;AACA,SAAOK,IAAI,CAAC,UAAUC,CAAV,EAAa;AACvB,WAAOP,QAAQ,CAACI,CAAC,CAACG,CAAD,CAAF,CAAf;AACD,GAFU,CAAJ,CAEJN,CAFI,EAEDC,KAFN;AAGD,CAPM,CAFP;;AAWA,eAAeG,IAAf","sourcesContent":["import _curry3 from \"./internal/_curry3.js\"; // `Identity` is a functor that holds a single value, where `map` simply\r\n// transforms the held value with the provided function.\r\n\r\nvar Identity = function (x) {\r\n  return {\r\n    value: x,\r\n    map: function (f) {\r\n      return Identity(f(x));\r\n    }\r\n  };\r\n};\r\n/**\r\n * Returns the result of \"setting\" the portion of the given data structure\r\n * focused by the given lens to the result of applying the given function to\r\n * the focused value.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.16.0\r\n * @category Object\r\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\r\n * @sig Lens s a -> (a -> a) -> s -> s\r\n * @param {Lens} lens\r\n * @param {*} v\r\n * @param {*} x\r\n * @return {*}\r\n * @see R.prop, R.lensIndex, R.lensProp\r\n * @example\r\n *\r\n *      const headLens = R.lensIndex(0);\r\n *\r\n *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']\r\n */\r\n\r\n\r\nvar over =\r\n/*#__PURE__*/\r\n_curry3(function over(lens, f, x) {\r\n  // The value returned by the getter function is first transformed with `f`,\r\n  // then set as the value of an `Identity`. This is then mapped over with the\r\n  // setter function of the lens.\r\n  return lens(function (y) {\r\n    return Identity(f(y));\r\n  })(x).value;\r\n});\r\n\r\nexport default over;"]},"metadata":{},"sourceType":"module"}