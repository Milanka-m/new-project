{"ast":null,"code":"import _cloneRegExp from \"./internal/_cloneRegExp.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport _isRegExp from \"./internal/_isRegExp.js\";\nimport toString from \"./toString.js\";\n/**\r\n * Determines whether a given string matches a given regular expression.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.12.0\r\n * @category String\r\n * @sig RegExp -> String -> Boolean\r\n * @param {RegExp} pattern\r\n * @param {String} str\r\n * @return {Boolean}\r\n * @see R.match\r\n * @example\r\n *\r\n *      R.test(/^x/, 'xyz'); //=> true\r\n *      R.test(/^y/, 'xyz'); //=> false\r\n */\n\nvar test = /*#__PURE__*/_curry2(function test(pattern, str) {\n  if (!_isRegExp(pattern)) {\n    throw new TypeError('‘test’ requires a value of type RegExp as its first argument; received ' + toString(pattern));\n  }\n\n  return _cloneRegExp(pattern).test(str);\n});\n\nexport default test;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/test.js"],"names":["_cloneRegExp","_curry2","_isRegExp","toString","test","pattern","str","TypeError"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,4BAAzB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,IAAI,GACR,aACAH,OAAO,CAAC,SAASG,IAAT,CAAcC,OAAd,EAAuBC,GAAvB,EAA4B;AAClC,MAAI,CAACJ,SAAS,CAACG,OAAD,CAAd,EAAyB;AACvB,UAAM,IAAIE,SAAJ,CAAc,4EAA4EJ,QAAQ,CAACE,OAAD,CAAlG,CAAN;AACD;;AAED,SAAOL,YAAY,CAACK,OAAD,CAAZ,CAAsBD,IAAtB,CAA2BE,GAA3B,CAAP;AACD,CANM,CAFP;;AAUA,eAAeF,IAAf","sourcesContent":["import _cloneRegExp from \"./internal/_cloneRegExp.js\";\r\nimport _curry2 from \"./internal/_curry2.js\";\r\nimport _isRegExp from \"./internal/_isRegExp.js\";\r\nimport toString from \"./toString.js\";\r\n/**\r\n * Determines whether a given string matches a given regular expression.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.12.0\r\n * @category String\r\n * @sig RegExp -> String -> Boolean\r\n * @param {RegExp} pattern\r\n * @param {String} str\r\n * @return {Boolean}\r\n * @see R.match\r\n * @example\r\n *\r\n *      R.test(/^x/, 'xyz'); //=> true\r\n *      R.test(/^y/, 'xyz'); //=> false\r\n */\r\n\r\nvar test =\r\n/*#__PURE__*/\r\n_curry2(function test(pattern, str) {\r\n  if (!_isRegExp(pattern)) {\r\n    throw new TypeError('‘test’ requires a value of type RegExp as its first argument; received ' + toString(pattern));\r\n  }\r\n\r\n  return _cloneRegExp(pattern).test(str);\r\n});\r\n\r\nexport default test;"]},"metadata":{},"sourceType":"module"}