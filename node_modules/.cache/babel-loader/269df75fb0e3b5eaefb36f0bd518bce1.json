{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xfind from \"./internal/_xfind.js\";\n/**\r\n * Returns the first element of the list which matches the predicate, or\r\n * `undefined` if no element matches.\r\n *\r\n * Dispatches to the `find` method of the second argument, if present.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category List\r\n * @sig (a -> Boolean) -> [a] -> a | undefined\r\n * @param {Function} fn The predicate function used to determine if the element is the\r\n *        desired one.\r\n * @param {Array} list The array to consider.\r\n * @return {Object} The element found, or `undefined`.\r\n * @see R.transduce\r\n * @example\r\n *\r\n *      const xs = [{a: 1}, {a: 2}, {a: 3}];\r\n *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}\r\n *      R.find(R.propEq('a', 4))(xs); //=> undefined\r\n */\n\nvar find = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['find'], _xfind, function find(fn, list) {\n  var idx = 0;\n  var len = list.length;\n\n  while (idx < len) {\n    if (fn(list[idx])) {\n      return list[idx];\n    }\n\n    idx += 1;\n  }\n}));\n\nexport default find;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/find.js"],"names":["_curry2","_dispatchable","_xfind","find","fn","list","idx","len","length"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,IAAI,GACR,aACAH,OAAO,EACP,aACAC,aAAa,CAAC,CAAC,MAAD,CAAD,EAAWC,MAAX,EAAmB,SAASC,IAAT,CAAcC,EAAd,EAAkBC,IAAlB,EAAwB;AACtD,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAGF,IAAI,CAACG,MAAf;;AAEA,SAAOF,GAAG,GAAGC,GAAb,EAAkB;AAChB,QAAIH,EAAE,CAACC,IAAI,CAACC,GAAD,CAAL,CAAN,EAAmB;AACjB,aAAOD,IAAI,CAACC,GAAD,CAAX;AACD;;AAEDA,IAAAA,GAAG,IAAI,CAAP;AACD;AACF,CAXY,CAFN,CAFP;;AAiBA,eAAeH,IAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\nimport _dispatchable from \"./internal/_dispatchable.js\";\r\nimport _xfind from \"./internal/_xfind.js\";\r\n/**\r\n * Returns the first element of the list which matches the predicate, or\r\n * `undefined` if no element matches.\r\n *\r\n * Dispatches to the `find` method of the second argument, if present.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category List\r\n * @sig (a -> Boolean) -> [a] -> a | undefined\r\n * @param {Function} fn The predicate function used to determine if the element is the\r\n *        desired one.\r\n * @param {Array} list The array to consider.\r\n * @return {Object} The element found, or `undefined`.\r\n * @see R.transduce\r\n * @example\r\n *\r\n *      const xs = [{a: 1}, {a: 2}, {a: 3}];\r\n *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}\r\n *      R.find(R.propEq('a', 4))(xs); //=> undefined\r\n */\r\n\r\nvar find =\r\n/*#__PURE__*/\r\n_curry2(\r\n/*#__PURE__*/\r\n_dispatchable(['find'], _xfind, function find(fn, list) {\r\n  var idx = 0;\r\n  var len = list.length;\r\n\r\n  while (idx < len) {\r\n    if (fn(list[idx])) {\r\n      return list[idx];\r\n    }\r\n\r\n    idx += 1;\r\n  }\r\n}));\r\n\r\nexport default find;"]},"metadata":{},"sourceType":"module"}