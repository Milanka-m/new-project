{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _makeFlat from \"./internal/_makeFlat.js\";\nimport _xchain from \"./internal/_xchain.js\";\nimport map from \"./map.js\";\n/**\r\n * `chain` maps a function over a list and concatenates the results. `chain`\r\n * is also known as `flatMap` in some libraries.\r\n *\r\n * Dispatches to the `chain` method of the second argument, if present,\r\n * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).\r\n *\r\n * If second argument is a function, `chain(f, g)(x)` is equivalent to `f(g(x), x)`.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.3.0\r\n * @category List\r\n * @sig Chain m => (a -> m b) -> m a -> m b\r\n * @param {Function} fn The function to map with\r\n * @param {Array} list The list to map over\r\n * @return {Array} The result of flat-mapping `list` with `fn`\r\n * @example\r\n *\r\n *      const duplicate = n => [n, n];\r\n *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\r\n *\r\n *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]\r\n */\n\nvar chain = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['fantasy-land/chain', 'chain'], _xchain, function chain(fn, monad) {\n  if (typeof monad === 'function') {\n    return function (x) {\n      return fn(monad(x))(x);\n    };\n  }\n\n  return _makeFlat(false)(map(fn, monad));\n}));\n\nexport default chain;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/chain.js"],"names":["_curry2","_dispatchable","_makeFlat","_xchain","map","chain","fn","monad","x"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,KAAK,GACT,aACAL,OAAO,EACP,aACAC,aAAa,CAAC,CAAC,oBAAD,EAAuB,OAAvB,CAAD,EAAkCE,OAAlC,EAA2C,SAASE,KAAT,CAAeC,EAAf,EAAmBC,KAAnB,EAA0B;AAChF,MAAI,OAAOA,KAAP,KAAiB,UAArB,EAAiC;AAC/B,WAAO,UAAUC,CAAV,EAAa;AAClB,aAAOF,EAAE,CAACC,KAAK,CAACC,CAAD,CAAN,CAAF,CAAaA,CAAb,CAAP;AACD,KAFD;AAGD;;AAED,SAAON,SAAS,CAAC,KAAD,CAAT,CAAiBE,GAAG,CAACE,EAAD,EAAKC,KAAL,CAApB,CAAP;AACD,CARY,CAFN,CAFP;;AAcA,eAAeF,KAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\nimport _dispatchable from \"./internal/_dispatchable.js\";\r\nimport _makeFlat from \"./internal/_makeFlat.js\";\r\nimport _xchain from \"./internal/_xchain.js\";\r\nimport map from \"./map.js\";\r\n/**\r\n * `chain` maps a function over a list and concatenates the results. `chain`\r\n * is also known as `flatMap` in some libraries.\r\n *\r\n * Dispatches to the `chain` method of the second argument, if present,\r\n * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).\r\n *\r\n * If second argument is a function, `chain(f, g)(x)` is equivalent to `f(g(x), x)`.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.3.0\r\n * @category List\r\n * @sig Chain m => (a -> m b) -> m a -> m b\r\n * @param {Function} fn The function to map with\r\n * @param {Array} list The list to map over\r\n * @return {Array} The result of flat-mapping `list` with `fn`\r\n * @example\r\n *\r\n *      const duplicate = n => [n, n];\r\n *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\r\n *\r\n *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]\r\n */\r\n\r\nvar chain =\r\n/*#__PURE__*/\r\n_curry2(\r\n/*#__PURE__*/\r\n_dispatchable(['fantasy-land/chain', 'chain'], _xchain, function chain(fn, monad) {\r\n  if (typeof monad === 'function') {\r\n    return function (x) {\r\n      return fn(monad(x))(x);\r\n    };\r\n  }\r\n\r\n  return _makeFlat(false)(map(fn, monad));\r\n}));\r\n\r\nexport default chain;"]},"metadata":{},"sourceType":"module"}