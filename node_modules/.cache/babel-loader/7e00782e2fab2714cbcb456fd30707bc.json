{"ast":null,"code":"import _aperture from \"./internal/_aperture.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xaperture from \"./internal/_xaperture.js\";\n/**\r\n * Returns a new list, composed of n-tuples of consecutive elements. If `n` is\r\n * greater than the length of the list, an empty list is returned.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.12.0\r\n * @category List\r\n * @sig Number -> [a] -> [[a]]\r\n * @param {Number} n The size of the tuples to create\r\n * @param {Array} list The list to split into `n`-length tuples\r\n * @return {Array} The resulting list of `n`-length tuples\r\n * @see R.transduce\r\n * @example\r\n *\r\n *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]\r\n *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\r\n *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []\r\n */\n\nvar aperture = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xaperture, _aperture));\n\nexport default aperture;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/aperture.js"],"names":["_aperture","_curry2","_dispatchable","_xaperture","aperture"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,yBAAtB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,QAAQ,GACZ,aACAH,OAAO,EACP,aACAC,aAAa,CAAC,EAAD,EAAKC,UAAL,EAAiBH,SAAjB,CAFN,CAFP;;AAMA,eAAeI,QAAf","sourcesContent":["import _aperture from \"./internal/_aperture.js\";\r\nimport _curry2 from \"./internal/_curry2.js\";\r\nimport _dispatchable from \"./internal/_dispatchable.js\";\r\nimport _xaperture from \"./internal/_xaperture.js\";\r\n/**\r\n * Returns a new list, composed of n-tuples of consecutive elements. If `n` is\r\n * greater than the length of the list, an empty list is returned.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.12.0\r\n * @category List\r\n * @sig Number -> [a] -> [[a]]\r\n * @param {Number} n The size of the tuples to create\r\n * @param {Array} list The list to split into `n`-length tuples\r\n * @return {Array} The resulting list of `n`-length tuples\r\n * @see R.transduce\r\n * @example\r\n *\r\n *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]\r\n *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\r\n *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []\r\n */\r\n\r\nvar aperture =\r\n/*#__PURE__*/\r\n_curry2(\r\n/*#__PURE__*/\r\n_dispatchable([], _xaperture, _aperture));\r\n\r\nexport default aperture;"]},"metadata":{},"sourceType":"module"}