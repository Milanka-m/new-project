{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\n/**\r\n * Sorts the list according to the supplied function.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Relation\r\n * @sig Ord b => (a -> b) -> [a] -> [a]\r\n * @param {Function} fn\r\n * @param {Array} list The list to sort.\r\n * @return {Array} A new list sorted by the keys generated by `fn`.\r\n * @example\r\n *\r\n *      const sortByFirstItem = R.sortBy(R.prop(0));\r\n *      const pairs = [[-1, 1], [-2, 2], [-3, 3]];\r\n *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]\r\n *\r\n *      const sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));\r\n *      const alice = {\r\n *        name: 'ALICE',\r\n *        age: 101\r\n *      };\r\n *      const bob = {\r\n *        name: 'Bob',\r\n *        age: -10\r\n *      };\r\n *      const clara = {\r\n *        name: 'clara',\r\n *        age: 314.159\r\n *      };\r\n *      const people = [clara, bob, alice];\r\n *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]\r\n */\n\nvar sortBy = /*#__PURE__*/_curry2(function sortBy(fn, list) {\n  return Array.prototype.slice.call(list, 0).sort(function (a, b) {\n    var aa = fn(a);\n    var bb = fn(b);\n    return aa < bb ? -1 : aa > bb ? 1 : 0;\n  });\n});\n\nexport default sortBy;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/sortBy.js"],"names":["_curry2","sortBy","fn","list","Array","prototype","slice","call","sort","a","b","aa","bb"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,MAAM,GACV,aACAD,OAAO,CAAC,SAASC,MAAT,CAAgBC,EAAhB,EAAoBC,IAApB,EAA0B;AAChC,SAAOC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BJ,IAA3B,EAAiC,CAAjC,EAAoCK,IAApC,CAAyC,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC9D,QAAIC,EAAE,GAAGT,EAAE,CAACO,CAAD,CAAX;AACA,QAAIG,EAAE,GAAGV,EAAE,CAACQ,CAAD,CAAX;AACA,WAAOC,EAAE,GAAGC,EAAL,GAAU,CAAC,CAAX,GAAeD,EAAE,GAAGC,EAAL,GAAU,CAAV,GAAc,CAApC;AACD,GAJM,CAAP;AAKD,CANM,CAFP;;AAUA,eAAeX,MAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\n/**\r\n * Sorts the list according to the supplied function.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Relation\r\n * @sig Ord b => (a -> b) -> [a] -> [a]\r\n * @param {Function} fn\r\n * @param {Array} list The list to sort.\r\n * @return {Array} A new list sorted by the keys generated by `fn`.\r\n * @example\r\n *\r\n *      const sortByFirstItem = R.sortBy(R.prop(0));\r\n *      const pairs = [[-1, 1], [-2, 2], [-3, 3]];\r\n *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]\r\n *\r\n *      const sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));\r\n *      const alice = {\r\n *        name: 'ALICE',\r\n *        age: 101\r\n *      };\r\n *      const bob = {\r\n *        name: 'Bob',\r\n *        age: -10\r\n *      };\r\n *      const clara = {\r\n *        name: 'clara',\r\n *        age: 314.159\r\n *      };\r\n *      const people = [clara, bob, alice];\r\n *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]\r\n */\r\n\r\nvar sortBy =\r\n/*#__PURE__*/\r\n_curry2(function sortBy(fn, list) {\r\n  return Array.prototype.slice.call(list, 0).sort(function (a, b) {\r\n    var aa = fn(a);\r\n    var bb = fn(b);\r\n    return aa < bb ? -1 : aa > bb ? 1 : 0;\r\n  });\r\n});\r\n\r\nexport default sortBy;"]},"metadata":{},"sourceType":"module"}