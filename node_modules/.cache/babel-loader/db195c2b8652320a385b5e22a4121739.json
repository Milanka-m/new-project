{"ast":null,"code":"var SemVer = require('../classes/semver');\n\nvar Comparator = require('../classes/comparator');\n\nvar ANY = Comparator.ANY;\n\nvar Range = require('../classes/range');\n\nvar satisfies = require('../functions/satisfies');\n\nvar gt = require('../functions/gt');\n\nvar lt = require('../functions/lt');\n\nvar lte = require('../functions/lte');\n\nvar gte = require('../functions/gte');\n\nvar outside = function outside(version, range, hilo, options) {\n  version = new SemVer(version, options);\n  range = new Range(range, options);\n  var gtfn, ltefn, ltfn, comp, ecomp;\n\n  switch (hilo) {\n    case '>':\n      gtfn = gt;\n      ltefn = lte;\n      ltfn = lt;\n      comp = '>';\n      ecomp = '>=';\n      break;\n\n    case '<':\n      gtfn = lt;\n      ltefn = gte;\n      ltfn = gt;\n      comp = '<';\n      ecomp = '<=';\n      break;\n\n    default:\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"');\n  } // If it satisfies the range it is not outside\n\n\n  if (satisfies(version, range, options)) {\n    return false;\n  } // From now on, variable terms are as if we're in \"gtr\" mode.\n  // but note that everything is flipped for the \"ltr\" function.\n\n\n  var _loop = function _loop(i) {\n    var comparators = range.set[i];\n    var high = null;\n    var low = null;\n    comparators.forEach(function (comparator) {\n      if (comparator.semver === ANY) {\n        comparator = new Comparator('>=0.0.0');\n      }\n\n      high = high || comparator;\n      low = low || comparator;\n\n      if (gtfn(comparator.semver, high.semver, options)) {\n        high = comparator;\n      } else if (ltfn(comparator.semver, low.semver, options)) {\n        low = comparator;\n      }\n    }); // If the edge version comparator has a operator then our version\n    // isn't outside it\n\n    if (high.operator === comp || high.operator === ecomp) {\n      return {\n        v: false\n      };\n    } // If the lowest version comparator has an operator and our version\n    // is less than it then it isn't higher than the range\n\n\n    if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {\n      return {\n        v: false\n      };\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n      return {\n        v: false\n      };\n    }\n  };\n\n  for (var i = 0; i < range.set.length; ++i) {\n    var _ret = _loop(i);\n\n    if (typeof _ret === \"object\") return _ret.v;\n  }\n\n  return true;\n};\n\nmodule.exports = outside;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/@ledgerhq/devices/node_modules/semver/ranges/outside.js"],"names":["SemVer","require","Comparator","ANY","Range","satisfies","gt","lt","lte","gte","outside","version","range","hilo","options","gtfn","ltefn","ltfn","comp","ecomp","TypeError","i","comparators","set","high","low","forEach","comparator","semver","operator","length","module","exports"],"mappings":"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","sourcesContent":["const SemVer = require('../classes/semver')\r\nconst Comparator = require('../classes/comparator')\r\nconst {ANY} = Comparator\r\nconst Range = require('../classes/range')\r\nconst satisfies = require('../functions/satisfies')\r\nconst gt = require('../functions/gt')\r\nconst lt = require('../functions/lt')\r\nconst lte = require('../functions/lte')\r\nconst gte = require('../functions/gte')\r\n\r\nconst outside = (version, range, hilo, options) => {\r\n  version = new SemVer(version, options)\r\n  range = new Range(range, options)\r\n\r\n  let gtfn, ltefn, ltfn, comp, ecomp\r\n  switch (hilo) {\r\n    case '>':\r\n      gtfn = gt\r\n      ltefn = lte\r\n      ltfn = lt\r\n      comp = '>'\r\n      ecomp = '>='\r\n      break\r\n    case '<':\r\n      gtfn = lt\r\n      ltefn = gte\r\n      ltfn = gt\r\n      comp = '<'\r\n      ecomp = '<='\r\n      break\r\n    default:\r\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"')\r\n  }\r\n\r\n  // If it satisfies the range it is not outside\r\n  if (satisfies(version, range, options)) {\r\n    return false\r\n  }\r\n\r\n  // From now on, variable terms are as if we're in \"gtr\" mode.\r\n  // but note that everything is flipped for the \"ltr\" function.\r\n\r\n  for (let i = 0; i < range.set.length; ++i) {\r\n    const comparators = range.set[i]\r\n\r\n    let high = null\r\n    let low = null\r\n\r\n    comparators.forEach((comparator) => {\r\n      if (comparator.semver === ANY) {\r\n        comparator = new Comparator('>=0.0.0')\r\n      }\r\n      high = high || comparator\r\n      low = low || comparator\r\n      if (gtfn(comparator.semver, high.semver, options)) {\r\n        high = comparator\r\n      } else if (ltfn(comparator.semver, low.semver, options)) {\r\n        low = comparator\r\n      }\r\n    })\r\n\r\n    // If the edge version comparator has a operator then our version\r\n    // isn't outside it\r\n    if (high.operator === comp || high.operator === ecomp) {\r\n      return false\r\n    }\r\n\r\n    // If the lowest version comparator has an operator and our version\r\n    // is less than it then it isn't higher than the range\r\n    if ((!low.operator || low.operator === comp) &&\r\n        ltefn(version, low.semver)) {\r\n      return false\r\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nmodule.exports = outside\r\n"]},"metadata":{},"sourceType":"script"}