{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _dropLast from \"./internal/_dropLast.js\";\nimport _xdropLast from \"./internal/_xdropLast.js\";\n/**\r\n * Returns a list containing all but the last `n` elements of the given `list`.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.16.0\r\n * @category List\r\n * @sig Number -> [a] -> [a]\r\n * @sig Number -> String -> String\r\n * @param {Number} n The number of elements of `list` to skip.\r\n * @param {Array} list The list of elements to consider.\r\n * @return {Array} A copy of the list with only the first `list.length - n` elements\r\n * @see R.takeLast, R.drop, R.dropWhile, R.dropLastWhile\r\n * @example\r\n *\r\n *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\r\n *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']\r\n *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []\r\n *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []\r\n *      R.dropLast(3, 'ramda');               //=> 'ra'\r\n */\n\nvar dropLast = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xdropLast, _dropLast));\n\nexport default dropLast;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/dropLast.js"],"names":["_curry2","_dispatchable","_dropLast","_xdropLast","dropLast"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,QAAQ,GACZ,aACAJ,OAAO,EACP,aACAC,aAAa,CAAC,EAAD,EAAKE,UAAL,EAAiBD,SAAjB,CAFN,CAFP;;AAMA,eAAeE,QAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\nimport _dispatchable from \"./internal/_dispatchable.js\";\r\nimport _dropLast from \"./internal/_dropLast.js\";\r\nimport _xdropLast from \"./internal/_xdropLast.js\";\r\n/**\r\n * Returns a list containing all but the last `n` elements of the given `list`.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.16.0\r\n * @category List\r\n * @sig Number -> [a] -> [a]\r\n * @sig Number -> String -> String\r\n * @param {Number} n The number of elements of `list` to skip.\r\n * @param {Array} list The list of elements to consider.\r\n * @return {Array} A copy of the list with only the first `list.length - n` elements\r\n * @see R.takeLast, R.drop, R.dropWhile, R.dropLastWhile\r\n * @example\r\n *\r\n *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\r\n *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']\r\n *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []\r\n *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []\r\n *      R.dropLast(3, 'ramda');               //=> 'ra'\r\n */\r\n\r\nvar dropLast =\r\n/*#__PURE__*/\r\n_curry2(\r\n/*#__PURE__*/\r\n_dispatchable([], _xdropLast, _dropLast));\r\n\r\nexport default dropLast;"]},"metadata":{},"sourceType":"module"}