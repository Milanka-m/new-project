{"ast":null,"code":"import _curry3 from \"./internal/_curry3.js\";\nimport adjust from \"./adjust.js\";\nimport always from \"./always.js\";\n/**\r\n * Returns a new copy of the array with the element at the provided index\r\n * replaced with the given value.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.14.0\r\n * @category List\r\n * @sig Number -> a -> [a] -> [a]\r\n * @param {Number} idx The index to update.\r\n * @param {*} x The value to exist at the given index of the returned array.\r\n * @param {Array|Arguments} list The source array-like object to be updated.\r\n * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.\r\n * @see R.adjust\r\n * @example\r\n *\r\n *      R.update(1, '_', ['a', 'b', 'c']);      //=> ['a', '_', 'c']\r\n *      R.update(-1, '_', ['a', 'b', 'c']);     //=> ['a', 'b', '_']\r\n * @symb R.update(-1, a, [b, c]) = [b, a]\r\n * @symb R.update(0, a, [b, c]) = [a, c]\r\n * @symb R.update(1, a, [b, c]) = [b, a]\r\n */\n\nvar update = /*#__PURE__*/_curry3(function update(idx, x, list) {\n  return adjust(idx, always(x), list);\n});\n\nexport default update;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/update.js"],"names":["_curry3","adjust","always","update","idx","x","list"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,MAAM,GACV,aACAH,OAAO,CAAC,SAASG,MAAT,CAAgBC,GAAhB,EAAqBC,CAArB,EAAwBC,IAAxB,EAA8B;AACpC,SAAOL,MAAM,CAACG,GAAD,EAAMF,MAAM,CAACG,CAAD,CAAZ,EAAiBC,IAAjB,CAAb;AACD,CAFM,CAFP;;AAMA,eAAeH,MAAf","sourcesContent":["import _curry3 from \"./internal/_curry3.js\";\r\nimport adjust from \"./adjust.js\";\r\nimport always from \"./always.js\";\r\n/**\r\n * Returns a new copy of the array with the element at the provided index\r\n * replaced with the given value.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.14.0\r\n * @category List\r\n * @sig Number -> a -> [a] -> [a]\r\n * @param {Number} idx The index to update.\r\n * @param {*} x The value to exist at the given index of the returned array.\r\n * @param {Array|Arguments} list The source array-like object to be updated.\r\n * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.\r\n * @see R.adjust\r\n * @example\r\n *\r\n *      R.update(1, '_', ['a', 'b', 'c']);      //=> ['a', '_', 'c']\r\n *      R.update(-1, '_', ['a', 'b', 'c']);     //=> ['a', 'b', '_']\r\n * @symb R.update(-1, a, [b, c]) = [b, a]\r\n * @symb R.update(0, a, [b, c]) = [a, c]\r\n * @symb R.update(1, a, [b, c]) = [b, a]\r\n */\r\n\r\nvar update =\r\n/*#__PURE__*/\r\n_curry3(function update(idx, x, list) {\r\n  return adjust(idx, always(x), list);\r\n});\r\n\r\nexport default update;"]},"metadata":{},"sourceType":"module"}