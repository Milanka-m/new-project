{"ast":null,"code":"import _curry1 from \"./internal/_curry1.js\";\nimport assocPath from \"./assocPath.js\";\nimport lens from \"./lens.js\";\nimport path from \"./path.js\";\n/**\r\n * Returns a lens whose focus is the specified path.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.19.0\r\n * @category Object\r\n * @typedefn Idx = String | Int\r\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\r\n * @sig [Idx] -> Lens s a\r\n * @param {Array} path The path to use.\r\n * @return {Lens}\r\n * @see R.view, R.set, R.over\r\n * @example\r\n *\r\n *      const xHeadYLens = R.lensPath(['x', 0, 'y']);\r\n *\r\n *      R.view(xHeadYLens, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\r\n *      //=> 2\r\n *      R.set(xHeadYLens, 1, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\r\n *      //=> {x: [{y: 1, z: 3}, {y: 4, z: 5}]}\r\n *      R.over(xHeadYLens, R.negate, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\r\n *      //=> {x: [{y: -2, z: 3}, {y: 4, z: 5}]}\r\n */\n\nvar lensPath = /*#__PURE__*/_curry1(function lensPath(p) {\n  return lens(path(p), assocPath(p));\n});\n\nexport default lensPath;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/lensPath.js"],"names":["_curry1","assocPath","lens","path","lensPath","p"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,QAAQ,GACZ,aACAJ,OAAO,CAAC,SAASI,QAAT,CAAkBC,CAAlB,EAAqB;AAC3B,SAAOH,IAAI,CAACC,IAAI,CAACE,CAAD,CAAL,EAAUJ,SAAS,CAACI,CAAD,CAAnB,CAAX;AACD,CAFM,CAFP;;AAMA,eAAeD,QAAf","sourcesContent":["import _curry1 from \"./internal/_curry1.js\";\r\nimport assocPath from \"./assocPath.js\";\r\nimport lens from \"./lens.js\";\r\nimport path from \"./path.js\";\r\n/**\r\n * Returns a lens whose focus is the specified path.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.19.0\r\n * @category Object\r\n * @typedefn Idx = String | Int\r\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\r\n * @sig [Idx] -> Lens s a\r\n * @param {Array} path The path to use.\r\n * @return {Lens}\r\n * @see R.view, R.set, R.over\r\n * @example\r\n *\r\n *      const xHeadYLens = R.lensPath(['x', 0, 'y']);\r\n *\r\n *      R.view(xHeadYLens, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\r\n *      //=> 2\r\n *      R.set(xHeadYLens, 1, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\r\n *      //=> {x: [{y: 1, z: 3}, {y: 4, z: 5}]}\r\n *      R.over(xHeadYLens, R.negate, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\r\n *      //=> {x: [{y: -2, z: 3}, {y: 4, z: 5}]}\r\n */\r\n\r\nvar lensPath =\r\n/*#__PURE__*/\r\n_curry1(function lensPath(p) {\r\n  return lens(path(p), assocPath(p));\r\n});\r\n\r\nexport default lensPath;"]},"metadata":{},"sourceType":"module"}