{"ast":null,"code":"import _curry3 from \"./internal/_curry3.js\";\nimport map from \"./map.js\";\nimport sequence from \"./sequence.js\";\n/**\r\n * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning\r\n * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),\r\n * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative\r\n * into an Applicative of Traversable.\r\n *\r\n * Dispatches to the `traverse` method of the third argument, if present.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.19.0\r\n * @category List\r\n * @sig (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)\r\n * @param {Function} of\r\n * @param {Function} f\r\n * @param {*} traversable\r\n * @return {*}\r\n * @see R.sequence\r\n * @example\r\n *\r\n *      // Returns `Maybe.Nothing` if the given divisor is `0`\r\n *      const safeDiv = n => d => d === 0 ? Maybe.Nothing() : Maybe.Just(n / d)\r\n *\r\n *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Maybe.Just([5, 2.5, 2])\r\n *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Maybe.Nothing\r\n */\n\nvar traverse = /*#__PURE__*/_curry3(function traverse(of, f, traversable) {\n  return typeof traversable['fantasy-land/traverse'] === 'function' ? traversable['fantasy-land/traverse'](f, of) : sequence(of, map(f, traversable));\n});\n\nexport default traverse;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/traverse.js"],"names":["_curry3","map","sequence","traverse","of","f","traversable"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,QAAQ,GACZ,aACAH,OAAO,CAAC,SAASG,QAAT,CAAkBC,EAAlB,EAAsBC,CAAtB,EAAyBC,WAAzB,EAAsC;AAC5C,SAAO,OAAOA,WAAW,CAAC,uBAAD,CAAlB,KAAgD,UAAhD,GAA6DA,WAAW,CAAC,uBAAD,CAAX,CAAqCD,CAArC,EAAwCD,EAAxC,CAA7D,GAA2GF,QAAQ,CAACE,EAAD,EAAKH,GAAG,CAACI,CAAD,EAAIC,WAAJ,CAAR,CAA1H;AACD,CAFM,CAFP;;AAMA,eAAeH,QAAf","sourcesContent":["import _curry3 from \"./internal/_curry3.js\";\r\nimport map from \"./map.js\";\r\nimport sequence from \"./sequence.js\";\r\n/**\r\n * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning\r\n * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),\r\n * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative\r\n * into an Applicative of Traversable.\r\n *\r\n * Dispatches to the `traverse` method of the third argument, if present.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.19.0\r\n * @category List\r\n * @sig (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)\r\n * @param {Function} of\r\n * @param {Function} f\r\n * @param {*} traversable\r\n * @return {*}\r\n * @see R.sequence\r\n * @example\r\n *\r\n *      // Returns `Maybe.Nothing` if the given divisor is `0`\r\n *      const safeDiv = n => d => d === 0 ? Maybe.Nothing() : Maybe.Just(n / d)\r\n *\r\n *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Maybe.Just([5, 2.5, 2])\r\n *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Maybe.Nothing\r\n */\r\n\r\nvar traverse =\r\n/*#__PURE__*/\r\n_curry3(function traverse(of, f, traversable) {\r\n  return typeof traversable['fantasy-land/traverse'] === 'function' ? traversable['fantasy-land/traverse'](f, of) : sequence(of, map(f, traversable));\r\n});\r\n\r\nexport default traverse;"]},"metadata":{},"sourceType":"module"}