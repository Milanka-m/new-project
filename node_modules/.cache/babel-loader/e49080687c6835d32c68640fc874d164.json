{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _map from \"./internal/_map.js\";\nimport _reduce from \"./internal/_reduce.js\";\nimport _xmap from \"./internal/_xmap.js\";\nimport curryN from \"./curryN.js\";\nimport keys from \"./keys.js\";\n/**\r\n * Takes a function and\r\n * a [functor](https://github.com/fantasyland/fantasy-land#functor),\r\n * applies the function to each of the functor's values, and returns\r\n * a functor of the same shape.\r\n *\r\n * Ramda provides suitable `map` implementations for `Array` and `Object`,\r\n * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\r\n *\r\n * Dispatches to the `map` method of the second argument, if present.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * Also treats functions as functors and will compose them together.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category List\r\n * @sig Functor f => (a -> b) -> f a -> f b\r\n * @param {Function} fn The function to be called on every element of the input `list`.\r\n * @param {Array} list The list to be iterated over.\r\n * @return {Array} The new list.\r\n * @see R.transduce, R.addIndex\r\n * @example\r\n *\r\n *      const double = x => x * 2;\r\n *\r\n *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]\r\n *\r\n *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\r\n * @symb R.map(f, [a, b]) = [f(a), f(b)]\r\n * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }\r\n * @symb R.map(f, functor_o) = functor_o.map(f)\r\n */\n\nvar map = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['fantasy-land/map', 'map'], _xmap, function map(fn, functor) {\n  switch (Object.prototype.toString.call(functor)) {\n    case '[object Function]':\n      return curryN(functor.length, function () {\n        return fn.call(this, functor.apply(this, arguments));\n      });\n\n    case '[object Object]':\n      return _reduce(function (acc, key) {\n        acc[key] = fn(functor[key]);\n        return acc;\n      }, {}, keys(functor));\n\n    default:\n      return _map(fn, functor);\n  }\n}));\n\nexport default map;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/map.js"],"names":["_curry2","_dispatchable","_map","_reduce","_xmap","curryN","keys","map","fn","functor","Object","prototype","toString","call","length","apply","arguments","acc","key"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,GAAG,GACP,aACAP,OAAO,EACP,aACAC,aAAa,CAAC,CAAC,kBAAD,EAAqB,KAArB,CAAD,EAA8BG,KAA9B,EAAqC,SAASG,GAAT,CAAaC,EAAb,EAAiBC,OAAjB,EAA0B;AAC1E,UAAQC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,OAA/B,CAAR;AACE,SAAK,mBAAL;AACE,aAAOJ,MAAM,CAACI,OAAO,CAACK,MAAT,EAAiB,YAAY;AACxC,eAAON,EAAE,CAACK,IAAH,CAAQ,IAAR,EAAcJ,OAAO,CAACM,KAAR,CAAc,IAAd,EAAoBC,SAApB,CAAd,CAAP;AACD,OAFY,CAAb;;AAIF,SAAK,iBAAL;AACE,aAAOb,OAAO,CAAC,UAAUc,GAAV,EAAeC,GAAf,EAAoB;AACjCD,QAAAA,GAAG,CAACC,GAAD,CAAH,GAAWV,EAAE,CAACC,OAAO,CAACS,GAAD,CAAR,CAAb;AACA,eAAOD,GAAP;AACD,OAHa,EAGX,EAHW,EAGPX,IAAI,CAACG,OAAD,CAHG,CAAd;;AAKF;AACE,aAAOP,IAAI,CAACM,EAAD,EAAKC,OAAL,CAAX;AAbJ;AAeD,CAhBY,CAFN,CAFP;;AAsBA,eAAeF,GAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\nimport _dispatchable from \"./internal/_dispatchable.js\";\r\nimport _map from \"./internal/_map.js\";\r\nimport _reduce from \"./internal/_reduce.js\";\r\nimport _xmap from \"./internal/_xmap.js\";\r\nimport curryN from \"./curryN.js\";\r\nimport keys from \"./keys.js\";\r\n/**\r\n * Takes a function and\r\n * a [functor](https://github.com/fantasyland/fantasy-land#functor),\r\n * applies the function to each of the functor's values, and returns\r\n * a functor of the same shape.\r\n *\r\n * Ramda provides suitable `map` implementations for `Array` and `Object`,\r\n * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\r\n *\r\n * Dispatches to the `map` method of the second argument, if present.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * Also treats functions as functors and will compose them together.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category List\r\n * @sig Functor f => (a -> b) -> f a -> f b\r\n * @param {Function} fn The function to be called on every element of the input `list`.\r\n * @param {Array} list The list to be iterated over.\r\n * @return {Array} The new list.\r\n * @see R.transduce, R.addIndex\r\n * @example\r\n *\r\n *      const double = x => x * 2;\r\n *\r\n *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]\r\n *\r\n *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\r\n * @symb R.map(f, [a, b]) = [f(a), f(b)]\r\n * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }\r\n * @symb R.map(f, functor_o) = functor_o.map(f)\r\n */\r\n\r\nvar map =\r\n/*#__PURE__*/\r\n_curry2(\r\n/*#__PURE__*/\r\n_dispatchable(['fantasy-land/map', 'map'], _xmap, function map(fn, functor) {\r\n  switch (Object.prototype.toString.call(functor)) {\r\n    case '[object Function]':\r\n      return curryN(functor.length, function () {\r\n        return fn.call(this, functor.apply(this, arguments));\r\n      });\r\n\r\n    case '[object Object]':\r\n      return _reduce(function (acc, key) {\r\n        acc[key] = fn(functor[key]);\r\n        return acc;\r\n      }, {}, keys(functor));\r\n\r\n    default:\r\n      return _map(fn, functor);\r\n  }\r\n}));\r\n\r\nexport default map;"]},"metadata":{},"sourceType":"module"}