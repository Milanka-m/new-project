{"ast":null,"code":"import _objectAssign from \"./internal/_objectAssign.js\";\nimport _curry2 from \"./internal/_curry2.js\";\n/**\r\n * Create a new object with the own properties of the first object merged with\r\n * the own properties of the second object. If a key exists in both objects,\r\n * the value from the second object will be used.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Object\r\n * @sig {k: v} -> {k: v} -> {k: v}\r\n * @param {Object} l\r\n * @param {Object} r\r\n * @return {Object}\r\n * @see R.mergeRight, R.mergeDeepRight, R.mergeWith, R.mergeWithKey\r\n * @deprecated since v0.26.0\r\n * @example\r\n *\r\n *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });\r\n *      //=> { 'name': 'fred', 'age': 40 }\r\n *\r\n *      const withDefaults = R.merge({x: 0, y: 0});\r\n *      withDefaults({y: 2}); //=> {x: 0, y: 2}\r\n * @symb R.merge(a, b) = {...a, ...b}\r\n */\n\nvar merge = /*#__PURE__*/_curry2(function merge(l, r) {\n  return _objectAssign({}, l, r);\n});\n\nexport default merge;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/merge.js"],"names":["_objectAssign","_curry2","merge","l","r"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,6BAA1B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,KAAK,GACT,aACAD,OAAO,CAAC,SAASC,KAAT,CAAeC,CAAf,EAAkBC,CAAlB,EAAqB;AAC3B,SAAOJ,aAAa,CAAC,EAAD,EAAKG,CAAL,EAAQC,CAAR,CAApB;AACD,CAFM,CAFP;;AAMA,eAAeF,KAAf","sourcesContent":["import _objectAssign from \"./internal/_objectAssign.js\";\r\nimport _curry2 from \"./internal/_curry2.js\";\r\n/**\r\n * Create a new object with the own properties of the first object merged with\r\n * the own properties of the second object. If a key exists in both objects,\r\n * the value from the second object will be used.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Object\r\n * @sig {k: v} -> {k: v} -> {k: v}\r\n * @param {Object} l\r\n * @param {Object} r\r\n * @return {Object}\r\n * @see R.mergeRight, R.mergeDeepRight, R.mergeWith, R.mergeWithKey\r\n * @deprecated since v0.26.0\r\n * @example\r\n *\r\n *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });\r\n *      //=> { 'name': 'fred', 'age': 40 }\r\n *\r\n *      const withDefaults = R.merge({x: 0, y: 0});\r\n *      withDefaults({y: 2}); //=> {x: 0, y: 2}\r\n * @symb R.merge(a, b) = {...a, ...b}\r\n */\r\n\r\nvar merge =\r\n/*#__PURE__*/\r\n_curry2(function merge(l, r) {\r\n  return _objectAssign({}, l, r);\r\n});\r\n\r\nexport default merge;"]},"metadata":{},"sourceType":"module"}