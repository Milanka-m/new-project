{"ast":null,"code":"import _curry3 from \"./internal/_curry3.js\";\n/**\r\n * Replace a substring or regex match in a string with a replacement.\r\n *\r\n * The first two parameters correspond to the parameters of the\r\n * `String.prototype.replace()` function, so the second parameter can also be a\r\n * function.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.7.0\r\n * @category String\r\n * @sig RegExp|String -> String -> String -> String\r\n * @param {RegExp|String} pattern A regular expression or a substring to match.\r\n * @param {String} replacement The string to replace the matches with.\r\n * @param {String} str The String to do the search and replacement in.\r\n * @return {String} The result.\r\n * @example\r\n *\r\n *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'\r\n *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'\r\n *\r\n *      // Use the \"g\" (global) flag to replace all occurrences:\r\n *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'\r\n */\n\nvar replace = /*#__PURE__*/_curry3(function replace(regex, replacement, str) {\n  return str.replace(regex, replacement);\n});\n\nexport default replace;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/replace.js"],"names":["_curry3","replace","regex","replacement","str"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,OAAO,GACX,aACAD,OAAO,CAAC,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,WAAxB,EAAqCC,GAArC,EAA0C;AAChD,SAAOA,GAAG,CAACH,OAAJ,CAAYC,KAAZ,EAAmBC,WAAnB,CAAP;AACD,CAFM,CAFP;;AAMA,eAAeF,OAAf","sourcesContent":["import _curry3 from \"./internal/_curry3.js\";\r\n/**\r\n * Replace a substring or regex match in a string with a replacement.\r\n *\r\n * The first two parameters correspond to the parameters of the\r\n * `String.prototype.replace()` function, so the second parameter can also be a\r\n * function.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.7.0\r\n * @category String\r\n * @sig RegExp|String -> String -> String -> String\r\n * @param {RegExp|String} pattern A regular expression or a substring to match.\r\n * @param {String} replacement The string to replace the matches with.\r\n * @param {String} str The String to do the search and replacement in.\r\n * @return {String} The result.\r\n * @example\r\n *\r\n *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'\r\n *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'\r\n *\r\n *      // Use the \"g\" (global) flag to replace all occurrences:\r\n *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'\r\n */\r\n\r\nvar replace =\r\n/*#__PURE__*/\r\n_curry3(function replace(regex, replacement, str) {\r\n  return str.replace(regex, replacement);\r\n});\r\n\r\nexport default replace;"]},"metadata":{},"sourceType":"module"}