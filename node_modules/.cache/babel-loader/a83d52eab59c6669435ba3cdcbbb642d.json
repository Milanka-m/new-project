{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xtake from \"./internal/_xtake.js\";\nimport slice from \"./slice.js\";\n/**\r\n * Returns the first `n` elements of the given list, string, or\r\n * transducer/transformer (or object with a `take` method).\r\n *\r\n * Dispatches to the `take` method of the second argument, if present.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category List\r\n * @sig Number -> [a] -> [a]\r\n * @sig Number -> String -> String\r\n * @param {Number} n\r\n * @param {*} list\r\n * @return {*}\r\n * @see R.drop\r\n * @example\r\n *\r\n *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']\r\n *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\r\n *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\r\n *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\r\n *      R.take(3, 'ramda');               //=> 'ram'\r\n *\r\n *      const personnel = [\r\n *        'Dave Brubeck',\r\n *        'Paul Desmond',\r\n *        'Eugene Wright',\r\n *        'Joe Morello',\r\n *        'Gerry Mulligan',\r\n *        'Bob Bates',\r\n *        'Joe Dodge',\r\n *        'Ron Crotty'\r\n *      ];\r\n *\r\n *      const takeFive = R.take(5);\r\n *      takeFive(personnel);\r\n *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']\r\n * @symb R.take(-1, [a, b]) = [a, b]\r\n * @symb R.take(0, [a, b]) = []\r\n * @symb R.take(1, [a, b]) = [a]\r\n * @symb R.take(2, [a, b]) = [a, b]\r\n */\n\nvar take = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['take'], _xtake, function take(n, xs) {\n  return slice(0, n < 0 ? Infinity : n, xs);\n}));\n\nexport default take;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/take.js"],"names":["_curry2","_dispatchable","_xtake","slice","take","n","xs","Infinity"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,IAAI,GACR,aACAJ,OAAO,EACP,aACAC,aAAa,CAAC,CAAC,MAAD,CAAD,EAAWC,MAAX,EAAmB,SAASE,IAAT,CAAcC,CAAd,EAAiBC,EAAjB,EAAqB;AACnD,SAAOH,KAAK,CAAC,CAAD,EAAIE,CAAC,GAAG,CAAJ,GAAQE,QAAR,GAAmBF,CAAvB,EAA0BC,EAA1B,CAAZ;AACD,CAFY,CAFN,CAFP;;AAQA,eAAeF,IAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\nimport _dispatchable from \"./internal/_dispatchable.js\";\r\nimport _xtake from \"./internal/_xtake.js\";\r\nimport slice from \"./slice.js\";\r\n/**\r\n * Returns the first `n` elements of the given list, string, or\r\n * transducer/transformer (or object with a `take` method).\r\n *\r\n * Dispatches to the `take` method of the second argument, if present.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category List\r\n * @sig Number -> [a] -> [a]\r\n * @sig Number -> String -> String\r\n * @param {Number} n\r\n * @param {*} list\r\n * @return {*}\r\n * @see R.drop\r\n * @example\r\n *\r\n *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']\r\n *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\r\n *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\r\n *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\r\n *      R.take(3, 'ramda');               //=> 'ram'\r\n *\r\n *      const personnel = [\r\n *        'Dave Brubeck',\r\n *        'Paul Desmond',\r\n *        'Eugene Wright',\r\n *        'Joe Morello',\r\n *        'Gerry Mulligan',\r\n *        'Bob Bates',\r\n *        'Joe Dodge',\r\n *        'Ron Crotty'\r\n *      ];\r\n *\r\n *      const takeFive = R.take(5);\r\n *      takeFive(personnel);\r\n *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']\r\n * @symb R.take(-1, [a, b]) = [a, b]\r\n * @symb R.take(0, [a, b]) = []\r\n * @symb R.take(1, [a, b]) = [a]\r\n * @symb R.take(2, [a, b]) = [a, b]\r\n */\r\n\r\nvar take =\r\n/*#__PURE__*/\r\n_curry2(\r\n/*#__PURE__*/\r\n_dispatchable(['take'], _xtake, function take(n, xs) {\r\n  return slice(0, n < 0 ? Infinity : n, xs);\r\n}));\r\n\r\nexport default take;"]},"metadata":{},"sourceType":"module"}