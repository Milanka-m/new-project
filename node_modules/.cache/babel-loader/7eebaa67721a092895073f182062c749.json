{"ast":null,"code":"import _curry3 from \"./internal/_curry3.js\";\nimport _isObject from \"./internal/_isObject.js\";\nimport mergeWithKey from \"./mergeWithKey.js\";\n/**\r\n * Creates a new object with the own properties of the two provided objects.\r\n * If a key exists in both objects:\r\n * - and both associated values are also objects then the values will be\r\n *   recursively merged.\r\n * - otherwise the provided function is applied to the key and associated values\r\n *   using the resulting value as the new value associated with the key.\r\n * If a key only exists in one object, the value will be associated with the key\r\n * of the resulting object.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.24.0\r\n * @category Object\r\n * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}\r\n * @param {Function} fn\r\n * @param {Object} lObj\r\n * @param {Object} rObj\r\n * @return {Object}\r\n * @see R.mergeWithKey, R.mergeDeepWith\r\n * @example\r\n *\r\n *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\r\n *      R.mergeDeepWithKey(concatValues,\r\n *                         { a: true, c: { thing: 'foo', values: [10, 20] }},\r\n *                         { b: true, c: { thing: 'bar', values: [15, 35] }});\r\n *      //=> { a: true, b: true, c: { thing: 'bar', values: [10, 20, 15, 35] }}\r\n */\n\nvar mergeDeepWithKey = /*#__PURE__*/_curry3(function mergeDeepWithKey(fn, lObj, rObj) {\n  return mergeWithKey(function (k, lVal, rVal) {\n    if (_isObject(lVal) && _isObject(rVal)) {\n      return mergeDeepWithKey(fn, lVal, rVal);\n    } else {\n      return fn(k, lVal, rVal);\n    }\n  }, lObj, rObj);\n});\n\nexport default mergeDeepWithKey;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/mergeDeepWithKey.js"],"names":["_curry3","_isObject","mergeWithKey","mergeDeepWithKey","fn","lObj","rObj","k","lVal","rVal"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,gBAAgB,GACpB,aACAH,OAAO,CAAC,SAASG,gBAAT,CAA0BC,EAA1B,EAA8BC,IAA9B,EAAoCC,IAApC,EAA0C;AAChD,SAAOJ,YAAY,CAAC,UAAUK,CAAV,EAAaC,IAAb,EAAmBC,IAAnB,EAAyB;AAC3C,QAAIR,SAAS,CAACO,IAAD,CAAT,IAAmBP,SAAS,CAACQ,IAAD,CAAhC,EAAwC;AACtC,aAAON,gBAAgB,CAACC,EAAD,EAAKI,IAAL,EAAWC,IAAX,CAAvB;AACD,KAFD,MAEO;AACL,aAAOL,EAAE,CAACG,CAAD,EAAIC,IAAJ,EAAUC,IAAV,CAAT;AACD;AACF,GANkB,EAMhBJ,IANgB,EAMVC,IANU,CAAnB;AAOD,CARM,CAFP;;AAYA,eAAeH,gBAAf","sourcesContent":["import _curry3 from \"./internal/_curry3.js\";\r\nimport _isObject from \"./internal/_isObject.js\";\r\nimport mergeWithKey from \"./mergeWithKey.js\";\r\n/**\r\n * Creates a new object with the own properties of the two provided objects.\r\n * If a key exists in both objects:\r\n * - and both associated values are also objects then the values will be\r\n *   recursively merged.\r\n * - otherwise the provided function is applied to the key and associated values\r\n *   using the resulting value as the new value associated with the key.\r\n * If a key only exists in one object, the value will be associated with the key\r\n * of the resulting object.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.24.0\r\n * @category Object\r\n * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}\r\n * @param {Function} fn\r\n * @param {Object} lObj\r\n * @param {Object} rObj\r\n * @return {Object}\r\n * @see R.mergeWithKey, R.mergeDeepWith\r\n * @example\r\n *\r\n *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\r\n *      R.mergeDeepWithKey(concatValues,\r\n *                         { a: true, c: { thing: 'foo', values: [10, 20] }},\r\n *                         { b: true, c: { thing: 'bar', values: [15, 35] }});\r\n *      //=> { a: true, b: true, c: { thing: 'bar', values: [10, 20, 15, 35] }}\r\n */\r\n\r\nvar mergeDeepWithKey =\r\n/*#__PURE__*/\r\n_curry3(function mergeDeepWithKey(fn, lObj, rObj) {\r\n  return mergeWithKey(function (k, lVal, rVal) {\r\n    if (_isObject(lVal) && _isObject(rVal)) {\r\n      return mergeDeepWithKey(fn, lVal, rVal);\r\n    } else {\r\n      return fn(k, lVal, rVal);\r\n    }\r\n  }, lObj, rObj);\r\n});\r\n\r\nexport default mergeDeepWithKey;"]},"metadata":{},"sourceType":"module"}