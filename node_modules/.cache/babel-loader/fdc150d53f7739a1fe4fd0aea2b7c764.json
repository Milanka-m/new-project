{"ast":null,"code":"import chain from \"./chain.js\";\nimport compose from \"./compose.js\";\nimport map from \"./map.js\";\n/**\r\n * Returns the right-to-left Kleisli composition of the provided functions,\r\n * each of which must return a value of a type supported by [`chain`](#chain).\r\n *\r\n * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), f)`.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.16.0\r\n * @category Function\r\n * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (a -> m z)\r\n * @param {...Function} ...functions The functions to compose\r\n * @return {Function}\r\n * @see R.pipeK\r\n * @deprecated since v0.26.0\r\n * @example\r\n *\r\n *       //  get :: String -> Object -> Maybe *\r\n *       const get = R.curry((propName, obj) => Maybe(obj[propName]))\r\n *\r\n *       //  getStateCode :: Maybe String -> Maybe String\r\n *       const getStateCode = R.composeK(\r\n *         R.compose(Maybe.of, R.toUpper),\r\n *         get('state'),\r\n *         get('address'),\r\n *         get('user'),\r\n *       );\r\n *       getStateCode({\"user\":{\"address\":{\"state\":\"ny\"}}}); //=> Maybe.Just(\"NY\")\r\n *       getStateCode({}); //=> Maybe.Nothing()\r\n * @symb R.composeK(f, g, h)(a) = R.chain(f, R.chain(g, h(a)))\r\n */\n\nexport default function composeK() {\n  if (arguments.length === 0) {\n    throw new Error('composeK requires at least one argument');\n  }\n\n  var init = Array.prototype.slice.call(arguments);\n  var last = init.pop();\n  return compose(compose.apply(this, map(chain, init)), last);\n}","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/composeK.js"],"names":["chain","compose","map","composeK","arguments","length","Error","init","Array","prototype","slice","call","last","pop","apply"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,QAAT,GAAoB;AACjC,MAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAED,MAAIC,IAAI,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BP,SAA3B,CAAX;AACA,MAAIQ,IAAI,GAAGL,IAAI,CAACM,GAAL,EAAX;AACA,SAAOZ,OAAO,CAACA,OAAO,CAACa,KAAR,CAAc,IAAd,EAAoBZ,GAAG,CAACF,KAAD,EAAQO,IAAR,CAAvB,CAAD,EAAwCK,IAAxC,CAAd;AACD","sourcesContent":["import chain from \"./chain.js\";\r\nimport compose from \"./compose.js\";\r\nimport map from \"./map.js\";\r\n/**\r\n * Returns the right-to-left Kleisli composition of the provided functions,\r\n * each of which must return a value of a type supported by [`chain`](#chain).\r\n *\r\n * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), f)`.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.16.0\r\n * @category Function\r\n * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (a -> m z)\r\n * @param {...Function} ...functions The functions to compose\r\n * @return {Function}\r\n * @see R.pipeK\r\n * @deprecated since v0.26.0\r\n * @example\r\n *\r\n *       //  get :: String -> Object -> Maybe *\r\n *       const get = R.curry((propName, obj) => Maybe(obj[propName]))\r\n *\r\n *       //  getStateCode :: Maybe String -> Maybe String\r\n *       const getStateCode = R.composeK(\r\n *         R.compose(Maybe.of, R.toUpper),\r\n *         get('state'),\r\n *         get('address'),\r\n *         get('user'),\r\n *       );\r\n *       getStateCode({\"user\":{\"address\":{\"state\":\"ny\"}}}); //=> Maybe.Just(\"NY\")\r\n *       getStateCode({}); //=> Maybe.Nothing()\r\n * @symb R.composeK(f, g, h)(a) = R.chain(f, R.chain(g, h(a)))\r\n */\r\n\r\nexport default function composeK() {\r\n  if (arguments.length === 0) {\r\n    throw new Error('composeK requires at least one argument');\r\n  }\r\n\r\n  var init = Array.prototype.slice.call(arguments);\r\n  var last = init.pop();\r\n  return compose(compose.apply(this, map(chain, init)), last);\r\n}"]},"metadata":{},"sourceType":"module"}