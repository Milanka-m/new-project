{"ast":null,"code":"import _curry3 from \"./internal/_curry3.js\";\nimport mergeWithKey from \"./mergeWithKey.js\";\n/**\r\n * Creates a new object with the own properties of the two provided objects. If\r\n * a key exists in both objects, the provided function is applied to the values\r\n * associated with the key in each object, with the result being used as the\r\n * value associated with the key in the returned object.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.19.0\r\n * @category Object\r\n * @sig ((a, a) -> a) -> {a} -> {a} -> {a}\r\n * @param {Function} fn\r\n * @param {Object} l\r\n * @param {Object} r\r\n * @return {Object}\r\n * @see R.mergeDeepWith, R.merge, R.mergeWithKey\r\n * @example\r\n *\r\n *      R.mergeWith(R.concat,\r\n *                  { a: true, values: [10, 20] },\r\n *                  { b: true, values: [15, 35] });\r\n *      //=> { a: true, b: true, values: [10, 20, 15, 35] }\r\n */\n\nvar mergeWith = /*#__PURE__*/_curry3(function mergeWith(fn, l, r) {\n  return mergeWithKey(function (_, _l, _r) {\n    return fn(_l, _r);\n  }, l, r);\n});\n\nexport default mergeWith;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/mergeWith.js"],"names":["_curry3","mergeWithKey","mergeWith","fn","l","r","_","_l","_r"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,SAAS,GACb,aACAF,OAAO,CAAC,SAASE,SAAT,CAAmBC,EAAnB,EAAuBC,CAAvB,EAA0BC,CAA1B,EAA6B;AACnC,SAAOJ,YAAY,CAAC,UAAUK,CAAV,EAAaC,EAAb,EAAiBC,EAAjB,EAAqB;AACvC,WAAOL,EAAE,CAACI,EAAD,EAAKC,EAAL,CAAT;AACD,GAFkB,EAEhBJ,CAFgB,EAEbC,CAFa,CAAnB;AAGD,CAJM,CAFP;;AAQA,eAAeH,SAAf","sourcesContent":["import _curry3 from \"./internal/_curry3.js\";\r\nimport mergeWithKey from \"./mergeWithKey.js\";\r\n/**\r\n * Creates a new object with the own properties of the two provided objects. If\r\n * a key exists in both objects, the provided function is applied to the values\r\n * associated with the key in each object, with the result being used as the\r\n * value associated with the key in the returned object.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.19.0\r\n * @category Object\r\n * @sig ((a, a) -> a) -> {a} -> {a} -> {a}\r\n * @param {Function} fn\r\n * @param {Object} l\r\n * @param {Object} r\r\n * @return {Object}\r\n * @see R.mergeDeepWith, R.merge, R.mergeWithKey\r\n * @example\r\n *\r\n *      R.mergeWith(R.concat,\r\n *                  { a: true, values: [10, 20] },\r\n *                  { b: true, values: [15, 35] });\r\n *      //=> { a: true, b: true, values: [10, 20, 15, 35] }\r\n */\r\n\r\nvar mergeWith =\r\n/*#__PURE__*/\r\n_curry3(function mergeWith(fn, l, r) {\r\n  return mergeWithKey(function (_, _l, _r) {\r\n    return fn(_l, _r);\r\n  }, l, r);\r\n});\r\n\r\nexport default mergeWith;"]},"metadata":{},"sourceType":"module"}