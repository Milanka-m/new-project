{"ast":null,"code":"import _curry1 from \"./internal/_curry1.js\";\nimport curryN from \"./curryN.js\";\n/**\r\n * Returns a curried equivalent of the provided function. The curried function\r\n * has two unusual capabilities. First, its arguments needn't be provided one\r\n * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\r\n * following are equivalent:\r\n *\r\n *   - `g(1)(2)(3)`\r\n *   - `g(1)(2, 3)`\r\n *   - `g(1, 2)(3)`\r\n *   - `g(1, 2, 3)`\r\n *\r\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\r\n * \"gaps\", allowing partial application of any combination of arguments,\r\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\r\n * the following are equivalent:\r\n *\r\n *   - `g(1, 2, 3)`\r\n *   - `g(_, 2, 3)(1)`\r\n *   - `g(_, _, 3)(1)(2)`\r\n *   - `g(_, _, 3)(1, 2)`\r\n *   - `g(_, 2)(1)(3)`\r\n *   - `g(_, 2)(1, 3)`\r\n *   - `g(_, 2)(_, 3)(1)`\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Function\r\n * @sig (* -> a) -> (* -> a)\r\n * @param {Function} fn The function to curry.\r\n * @return {Function} A new, curried function.\r\n * @see R.curryN, R.partial\r\n * @example\r\n *\r\n *      const addFourNumbers = (a, b, c, d) => a + b + c + d;\r\n *\r\n *      const curriedAddFourNumbers = R.curry(addFourNumbers);\r\n *      const f = curriedAddFourNumbers(1, 2);\r\n *      const g = f(3);\r\n *      g(4); //=> 10\r\n */\n\nvar curry = /*#__PURE__*/_curry1(function curry(fn) {\n  return curryN(fn.length, fn);\n});\n\nexport default curry;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/curry.js"],"names":["_curry1","curryN","curry","fn","length"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,KAAK,GACT,aACAF,OAAO,CAAC,SAASE,KAAT,CAAeC,EAAf,EAAmB;AACzB,SAAOF,MAAM,CAACE,EAAE,CAACC,MAAJ,EAAYD,EAAZ,CAAb;AACD,CAFM,CAFP;;AAMA,eAAeD,KAAf","sourcesContent":["import _curry1 from \"./internal/_curry1.js\";\r\nimport curryN from \"./curryN.js\";\r\n/**\r\n * Returns a curried equivalent of the provided function. The curried function\r\n * has two unusual capabilities. First, its arguments needn't be provided one\r\n * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\r\n * following are equivalent:\r\n *\r\n *   - `g(1)(2)(3)`\r\n *   - `g(1)(2, 3)`\r\n *   - `g(1, 2)(3)`\r\n *   - `g(1, 2, 3)`\r\n *\r\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\r\n * \"gaps\", allowing partial application of any combination of arguments,\r\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\r\n * the following are equivalent:\r\n *\r\n *   - `g(1, 2, 3)`\r\n *   - `g(_, 2, 3)(1)`\r\n *   - `g(_, _, 3)(1)(2)`\r\n *   - `g(_, _, 3)(1, 2)`\r\n *   - `g(_, 2)(1)(3)`\r\n *   - `g(_, 2)(1, 3)`\r\n *   - `g(_, 2)(_, 3)(1)`\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Function\r\n * @sig (* -> a) -> (* -> a)\r\n * @param {Function} fn The function to curry.\r\n * @return {Function} A new, curried function.\r\n * @see R.curryN, R.partial\r\n * @example\r\n *\r\n *      const addFourNumbers = (a, b, c, d) => a + b + c + d;\r\n *\r\n *      const curriedAddFourNumbers = R.curry(addFourNumbers);\r\n *      const f = curriedAddFourNumbers(1, 2);\r\n *      const g = f(3);\r\n *      g(4); //=> 10\r\n */\r\n\r\nvar curry =\r\n/*#__PURE__*/\r\n_curry1(function curry(fn) {\r\n  return curryN(fn.length, fn);\r\n});\r\n\r\nexport default curry;"]},"metadata":{},"sourceType":"module"}