{"ast":null,"code":"import _curry1 from \"./internal/_curry1.js\";\nimport apply from \"./apply.js\";\nimport curryN from \"./curryN.js\";\nimport max from \"./max.js\";\nimport pluck from \"./pluck.js\";\nimport reduce from \"./reduce.js\";\nimport keys from \"./keys.js\";\nimport values from \"./values.js\"; // Use custom mapValues function to avoid issues with specs that include a \"map\" key and R.map\n// delegating calls to .map\n\nfunction mapValues(fn, obj) {\n  return keys(obj).reduce(function (acc, key) {\n    acc[key] = fn(obj[key]);\n    return acc;\n  }, {});\n}\n/**\r\n * Given a spec object recursively mapping properties to functions, creates a\r\n * function producing an object of the same structure, by mapping each property\r\n * to the result of calling its associated function with the supplied arguments.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.20.0\r\n * @category Function\r\n * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})\r\n * @param {Object} spec an object recursively mapping properties to functions for\r\n *        producing the values for these properties.\r\n * @return {Function} A function that returns an object of the same structure\r\n * as `spec', with each property set to the value returned by calling its\r\n * associated function with the supplied arguments.\r\n * @see R.converge, R.juxt\r\n * @example\r\n *\r\n *      const getMetrics = R.applySpec({\r\n *        sum: R.add,\r\n *        nested: { mul: R.multiply }\r\n *      });\r\n *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }\r\n * @symb R.applySpec({ x: f, y: { z: g } })(a, b) = { x: f(a, b), y: { z: g(a, b) } }\r\n */\n\n\nvar applySpec = /*#__PURE__*/_curry1(function applySpec(spec) {\n  spec = mapValues(function (v) {\n    return typeof v == 'function' ? v : applySpec(v);\n  }, spec);\n  return curryN(reduce(max, 0, pluck('length', values(spec))), function () {\n    var args = arguments;\n    return mapValues(function (f) {\n      return apply(f, args);\n    }, spec);\n  });\n});\n\nexport default applySpec;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/applySpec.js"],"names":["_curry1","apply","curryN","max","pluck","reduce","keys","values","mapValues","fn","obj","acc","key","applySpec","spec","v","args","arguments","f"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB,C,CAAkC;AAClC;;AAEA,SAASC,SAAT,CAAmBC,EAAnB,EAAuBC,GAAvB,EAA4B;AAC1B,SAAOJ,IAAI,CAACI,GAAD,CAAJ,CAAUL,MAAV,CAAiB,UAAUM,GAAV,EAAeC,GAAf,EAAoB;AAC1CD,IAAAA,GAAG,CAACC,GAAD,CAAH,GAAWH,EAAE,CAACC,GAAG,CAACE,GAAD,CAAJ,CAAb;AACA,WAAOD,GAAP;AACD,GAHM,EAGJ,EAHI,CAAP;AAID;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAIE,SAAS,GACb,aACAb,OAAO,CAAC,SAASa,SAAT,CAAmBC,IAAnB,EAAyB;AAC/BA,EAAAA,IAAI,GAAGN,SAAS,CAAC,UAAUO,CAAV,EAAa;AAC5B,WAAO,OAAOA,CAAP,IAAY,UAAZ,GAAyBA,CAAzB,GAA6BF,SAAS,CAACE,CAAD,CAA7C;AACD,GAFe,EAEbD,IAFa,CAAhB;AAGA,SAAOZ,MAAM,CAACG,MAAM,CAACF,GAAD,EAAM,CAAN,EAASC,KAAK,CAAC,QAAD,EAAWG,MAAM,CAACO,IAAD,CAAjB,CAAd,CAAP,EAAgD,YAAY;AACvE,QAAIE,IAAI,GAAGC,SAAX;AACA,WAAOT,SAAS,CAAC,UAAUU,CAAV,EAAa;AAC5B,aAAOjB,KAAK,CAACiB,CAAD,EAAIF,IAAJ,CAAZ;AACD,KAFe,EAEbF,IAFa,CAAhB;AAGD,GALY,CAAb;AAMD,CAVM,CAFP;;AAcA,eAAeD,SAAf","sourcesContent":["import _curry1 from \"./internal/_curry1.js\";\r\nimport apply from \"./apply.js\";\r\nimport curryN from \"./curryN.js\";\r\nimport max from \"./max.js\";\r\nimport pluck from \"./pluck.js\";\r\nimport reduce from \"./reduce.js\";\r\nimport keys from \"./keys.js\";\r\nimport values from \"./values.js\"; // Use custom mapValues function to avoid issues with specs that include a \"map\" key and R.map\r\n// delegating calls to .map\r\n\r\nfunction mapValues(fn, obj) {\r\n  return keys(obj).reduce(function (acc, key) {\r\n    acc[key] = fn(obj[key]);\r\n    return acc;\r\n  }, {});\r\n}\r\n/**\r\n * Given a spec object recursively mapping properties to functions, creates a\r\n * function producing an object of the same structure, by mapping each property\r\n * to the result of calling its associated function with the supplied arguments.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.20.0\r\n * @category Function\r\n * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})\r\n * @param {Object} spec an object recursively mapping properties to functions for\r\n *        producing the values for these properties.\r\n * @return {Function} A function that returns an object of the same structure\r\n * as `spec', with each property set to the value returned by calling its\r\n * associated function with the supplied arguments.\r\n * @see R.converge, R.juxt\r\n * @example\r\n *\r\n *      const getMetrics = R.applySpec({\r\n *        sum: R.add,\r\n *        nested: { mul: R.multiply }\r\n *      });\r\n *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }\r\n * @symb R.applySpec({ x: f, y: { z: g } })(a, b) = { x: f(a, b), y: { z: g(a, b) } }\r\n */\r\n\r\n\r\nvar applySpec =\r\n/*#__PURE__*/\r\n_curry1(function applySpec(spec) {\r\n  spec = mapValues(function (v) {\r\n    return typeof v == 'function' ? v : applySpec(v);\r\n  }, spec);\r\n  return curryN(reduce(max, 0, pluck('length', values(spec))), function () {\r\n    var args = arguments;\r\n    return mapValues(function (f) {\r\n      return apply(f, args);\r\n    }, spec);\r\n  });\r\n});\r\n\r\nexport default applySpec;"]},"metadata":{},"sourceType":"module"}