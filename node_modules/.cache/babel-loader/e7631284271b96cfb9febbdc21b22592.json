{"ast":null,"code":"import reduceBy from \"./reduceBy.js\";\n/**\r\n * Counts the elements of a list according to how many match each value of a\r\n * key generated by the supplied function. Returns an object mapping the keys\r\n * produced by `fn` to the number of occurrences in the list. Note that all\r\n * keys are coerced to strings because of how JavaScript objects work.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Relation\r\n * @sig (a -> String) -> [a] -> {*}\r\n * @param {Function} fn The function used to map values to keys.\r\n * @param {Array} list The list to count elements from.\r\n * @return {Object} An object mapping keys to number of occurrences in the list.\r\n * @example\r\n *\r\n *      const numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];\r\n *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}\r\n *\r\n *      const letters = ['a', 'b', 'A', 'a', 'B', 'c'];\r\n *      R.countBy(R.toLower)(letters);   //=> {'a': 3, 'b': 2, 'c': 1}\r\n */\n\nvar countBy = /*#__PURE__*/reduceBy(function (acc, elem) {\n  return acc + 1;\n}, 0);\nexport default countBy;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/countBy.js"],"names":["reduceBy","countBy","acc","elem"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,eAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,OAAO,GACX,aACAD,QAAQ,CAAC,UAAUE,GAAV,EAAeC,IAAf,EAAqB;AAC5B,SAAOD,GAAG,GAAG,CAAb;AACD,CAFO,EAEL,CAFK,CAFR;AAKA,eAAeD,OAAf","sourcesContent":["import reduceBy from \"./reduceBy.js\";\r\n/**\r\n * Counts the elements of a list according to how many match each value of a\r\n * key generated by the supplied function. Returns an object mapping the keys\r\n * produced by `fn` to the number of occurrences in the list. Note that all\r\n * keys are coerced to strings because of how JavaScript objects work.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Relation\r\n * @sig (a -> String) -> [a] -> {*}\r\n * @param {Function} fn The function used to map values to keys.\r\n * @param {Array} list The list to count elements from.\r\n * @return {Object} An object mapping keys to number of occurrences in the list.\r\n * @example\r\n *\r\n *      const numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];\r\n *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}\r\n *\r\n *      const letters = ['a', 'b', 'A', 'a', 'B', 'c'];\r\n *      R.countBy(R.toLower)(letters);   //=> {'a': 3, 'b': 2, 'c': 1}\r\n */\r\n\r\nvar countBy =\r\n/*#__PURE__*/\r\nreduceBy(function (acc, elem) {\r\n  return acc + 1;\r\n}, 0);\r\nexport default countBy;"]},"metadata":{},"sourceType":"module"}