{"ast":null,"code":"import _slicedToArray from \"D:\\\\Lianok\\\\dev\\\\new-project\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";\nimport _asyncToGenerator from \"D:\\\\Lianok\\\\dev\\\\new-project\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport _classCallCheck from \"D:\\\\Lianok\\\\dev\\\\new-project\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Lianok\\\\dev\\\\new-project\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _regeneratorRuntime from \"D:\\\\Lianok\\\\dev\\\\new-project\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport { splitArgsAndCtx } from \"../context\";\nimport { EventParser } from \"../event\";\nimport { ProgramError } from \"../../error\";\n\nvar SimulateFactory = /*#__PURE__*/function () {\n  function SimulateFactory() {\n    _classCallCheck(this, SimulateFactory);\n  }\n\n  _createClass(SimulateFactory, null, [{\n    key: \"build\",\n    value: function build(idlIx, txFn, idlErrors, provider, coder, programId, idl) {\n      var simulate = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var _len,\n              args,\n              _key,\n              tx,\n              _splitArgsAndCtx,\n              _splitArgsAndCtx2,\n              ctx,\n              resp,\n              translatedErr,\n              logs,\n              events,\n              parser,\n              _args = arguments;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                    args[_key] = _args[_key];\n                  }\n\n                  tx = txFn.apply(void 0, args);\n                  _splitArgsAndCtx = splitArgsAndCtx(idlIx, [].concat(args)), _splitArgsAndCtx2 = _slicedToArray(_splitArgsAndCtx, 2), ctx = _splitArgsAndCtx2[1];\n                  resp = undefined;\n                  _context.prev = 4;\n                  _context.next = 7;\n                  return provider.simulate(tx, ctx.signers, ctx.options);\n\n                case 7:\n                  resp = _context.sent;\n                  _context.next = 17;\n                  break;\n\n                case 10:\n                  _context.prev = 10;\n                  _context.t0 = _context[\"catch\"](4);\n                  console.log(\"Translating error\", _context.t0);\n                  translatedErr = ProgramError.parse(_context.t0, idlErrors);\n\n                  if (!(translatedErr === null)) {\n                    _context.next = 16;\n                    break;\n                  }\n\n                  throw _context.t0;\n\n                case 16:\n                  throw translatedErr;\n\n                case 17:\n                  if (!(resp === undefined)) {\n                    _context.next = 19;\n                    break;\n                  }\n\n                  throw new Error(\"Unable to simulate transaction\");\n\n                case 19:\n                  if (!resp.value.err) {\n                    _context.next = 21;\n                    break;\n                  }\n\n                  throw new Error(\"Simulate error: \".concat(resp.value.err.toString()));\n\n                case 21:\n                  logs = resp.value.logs;\n\n                  if (logs) {\n                    _context.next = 24;\n                    break;\n                  }\n\n                  throw new Error(\"Simulated logs not found\");\n\n                case 24:\n                  events = [];\n\n                  if (idl.events) {\n                    parser = new EventParser(programId, coder);\n                    parser.parseLogs(logs, function (event) {\n                      events.push(event);\n                    });\n                  }\n\n                  return _context.abrupt(\"return\", {\n                    events: events,\n                    raw: logs\n                  });\n\n                case 27:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[4, 10]]);\n        }));\n\n        return function simulate() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n\n      return simulate;\n    }\n  }]);\n\n  return SimulateFactory;\n}();\n\nexport { SimulateFactory as default };","map":{"version":3,"sources":["../../../../src/program/namespace/simulate.ts"],"names":[],"mappings":";;;;;AAGA,SAAS,eAAT,QAAgC,YAAhC;AAEA,SAAS,WAAT,QAAmC,UAAnC;AAGA,SAAS,YAAT,QAA6B,aAA7B;;IAEqB,e;;;;;;;WACZ,eACL,KADK,EAEL,IAFK,EAGL,SAHK,EAIL,QAJK,EAKL,KALK,EAML,SANK,EAOL,GAPK,EAOG;AAER,UAAM,QAAQ;AAAA,4EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4CAAU,IAAV;AAAU,oBAAA,IAAV;AAAA;;AACT,kBAAA,EADS,GACJ,IAAI,MAAJ,SAAQ,IAAR,CADI;AAAA,qCAEC,eAAe,CAAC,KAAD,YAAY,IAAZ,EAFhB,2DAEN,GAFM;AAGX,kBAAA,IAHW,GAGJ,SAHI;AAAA;AAAA;AAAA,yBAKA,QAAQ,CAAC,QAAT,CAAkB,EAAlB,EAAsB,GAAG,CAAC,OAA1B,EAAmC,GAAG,CAAC,OAAvC,CALA;;AAAA;AAKb,kBAAA,IALa;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOb,kBAAA,OAAO,CAAC,GAAR,CAAY,mBAAZ;AACI,kBAAA,aARS,GAQO,YAAY,CAAC,KAAb,cAAwB,SAAxB,CARP;;AAAA,wBAST,aAAa,KAAK,IATT;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,wBAYP,aAZO;;AAAA;AAAA,wBAcX,IAAI,KAAK,SAdE;AAAA;AAAA;AAAA;;AAAA,wBAeP,IAAI,KAAJ,CAAU,gCAAV,CAfO;;AAAA;AAAA,uBAiBX,IAAI,CAAC,KAAL,CAAW,GAjBA;AAAA;AAAA;AAAA;;AAAA,wBAkBP,IAAI,KAAJ,2BAA6B,IAAI,CAAC,KAAL,CAAW,GAAX,CAAe,QAAf,EAA7B,EAlBO;;AAAA;AAoBT,kBAAA,IApBS,GAoBF,IAAI,CAAC,KAAL,CAAW,IApBT;;AAAA,sBAqBV,IArBU;AAAA;AAAA;AAAA;;AAAA,wBAsBP,IAAI,KAAJ,CAAU,0BAAV,CAtBO;;AAAA;AAyBT,kBAAA,MAzBS,GAyBA,EAzBA;;AA0Bf,sBAAI,GAAG,CAAC,MAAR,EAAgB;AACV,oBAAA,MADU,GACD,IAAI,WAAJ,CAAgB,SAAhB,EAA2B,KAA3B,CADC;AAEd,oBAAA,MAAM,CAAC,SAAP,CAAiB,IAAjB,EAAuB,UAAC,KAAD,EAAU;AAC/B,sBAAA,MAAM,CAAC,IAAP,CAAY,KAAZ;AACD,qBAFD;AAGD;;AA/Bc,mDAgCR;AAAE,oBAAA,MAAM,EAAN,MAAF;AAAU,oBAAA,GAAG,EAAE;AAAf,mBAhCQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAH;;AAAA,wBAAR,QAAQ;AAAA;AAAA;AAAA,SAAd;;AAmCA,aAAO,QAAP;AACD;;;;;;SA9CkB,e","sourceRoot":"","sourcesContent":["import { splitArgsAndCtx } from \"../context\";\r\nimport { EventParser } from \"../event\";\r\nimport { ProgramError } from \"../../error\";\r\nexport default class SimulateFactory {\r\n    static build(idlIx, txFn, idlErrors, provider, coder, programId, idl) {\r\n        const simulate = async (...args) => {\r\n            const tx = txFn(...args);\r\n            const [, ctx] = splitArgsAndCtx(idlIx, [...args]);\r\n            let resp = undefined;\r\n            try {\r\n                resp = await provider.simulate(tx, ctx.signers, ctx.options);\r\n            }\r\n            catch (err) {\r\n                console.log(\"Translating error\", err);\r\n                let translatedErr = ProgramError.parse(err, idlErrors);\r\n                if (translatedErr === null) {\r\n                    throw err;\r\n                }\r\n                throw translatedErr;\r\n            }\r\n            if (resp === undefined) {\r\n                throw new Error(\"Unable to simulate transaction\");\r\n            }\r\n            if (resp.value.err) {\r\n                throw new Error(`Simulate error: ${resp.value.err.toString()}`);\r\n            }\r\n            const logs = resp.value.logs;\r\n            if (!logs) {\r\n                throw new Error(\"Simulated logs not found\");\r\n            }\r\n            const events = [];\r\n            if (idl.events) {\r\n                let parser = new EventParser(programId, coder);\r\n                parser.parseLogs(logs, (event) => {\r\n                    events.push(event);\r\n                });\r\n            }\r\n            return { events, raw: logs };\r\n        };\r\n        return simulate;\r\n    }\r\n}\r\n//# sourceMappingURL=simulate.js.map"]},"metadata":{},"sourceType":"module"}