{"ast":null,"code":"import _curry3 from \"./internal/_curry3.js\";\nimport equals from \"./equals.js\";\n/**\r\n * Takes a function and two values in its domain and returns `true` if the\r\n * values map to the same value in the codomain; `false` otherwise.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.18.0\r\n * @category Relation\r\n * @sig (a -> b) -> a -> a -> Boolean\r\n * @param {Function} f\r\n * @param {*} x\r\n * @param {*} y\r\n * @return {Boolean}\r\n * @example\r\n *\r\n *      R.eqBy(Math.abs, 5, -5); //=> true\r\n */\n\nvar eqBy = /*#__PURE__*/_curry3(function eqBy(f, x, y) {\n  return equals(f(x), f(y));\n});\n\nexport default eqBy;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/eqBy.js"],"names":["_curry3","equals","eqBy","f","x","y"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,IAAI,GACR,aACAF,OAAO,CAAC,SAASE,IAAT,CAAcC,CAAd,EAAiBC,CAAjB,EAAoBC,CAApB,EAAuB;AAC7B,SAAOJ,MAAM,CAACE,CAAC,CAACC,CAAD,CAAF,EAAOD,CAAC,CAACE,CAAD,CAAR,CAAb;AACD,CAFM,CAFP;;AAMA,eAAeH,IAAf","sourcesContent":["import _curry3 from \"./internal/_curry3.js\";\r\nimport equals from \"./equals.js\";\r\n/**\r\n * Takes a function and two values in its domain and returns `true` if the\r\n * values map to the same value in the codomain; `false` otherwise.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.18.0\r\n * @category Relation\r\n * @sig (a -> b) -> a -> a -> Boolean\r\n * @param {Function} f\r\n * @param {*} x\r\n * @param {*} y\r\n * @return {Boolean}\r\n * @example\r\n *\r\n *      R.eqBy(Math.abs, 5, -5); //=> true\r\n */\r\n\r\nvar eqBy =\r\n/*#__PURE__*/\r\n_curry3(function eqBy(f, x, y) {\r\n  return equals(f(x), f(y));\r\n});\r\n\r\nexport default eqBy;"]},"metadata":{},"sourceType":"module"}