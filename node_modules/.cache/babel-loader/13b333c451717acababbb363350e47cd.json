{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\n/**\r\n * Sorts a list according to a list of comparators.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.23.0\r\n * @category Relation\r\n * @sig [(a, a) -> Number] -> [a] -> [a]\r\n * @param {Array} functions A list of comparator functions.\r\n * @param {Array} list The list to sort.\r\n * @return {Array} A new list sorted according to the comarator functions.\r\n * @example\r\n *\r\n *      const alice = {\r\n *        name: 'alice',\r\n *        age: 40\r\n *      };\r\n *      const bob = {\r\n *        name: 'bob',\r\n *        age: 30\r\n *      };\r\n *      const clara = {\r\n *        name: 'clara',\r\n *        age: 40\r\n *      };\r\n *      const people = [clara, bob, alice];\r\n *      const ageNameSort = R.sortWith([\r\n *        R.descend(R.prop('age')),\r\n *        R.ascend(R.prop('name'))\r\n *      ]);\r\n *      ageNameSort(people); //=> [alice, clara, bob]\r\n */\n\nvar sortWith = /*#__PURE__*/_curry2(function sortWith(fns, list) {\n  return Array.prototype.slice.call(list, 0).sort(function (a, b) {\n    var result = 0;\n    var i = 0;\n\n    while (result === 0 && i < fns.length) {\n      result = fns[i](a, b);\n      i += 1;\n    }\n\n    return result;\n  });\n});\n\nexport default sortWith;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/sortWith.js"],"names":["_curry2","sortWith","fns","list","Array","prototype","slice","call","sort","a","b","result","i","length"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,QAAQ,GACZ,aACAD,OAAO,CAAC,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,IAAvB,EAA6B;AACnC,SAAOC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BJ,IAA3B,EAAiC,CAAjC,EAAoCK,IAApC,CAAyC,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC9D,QAAIC,MAAM,GAAG,CAAb;AACA,QAAIC,CAAC,GAAG,CAAR;;AAEA,WAAOD,MAAM,KAAK,CAAX,IAAgBC,CAAC,GAAGV,GAAG,CAACW,MAA/B,EAAuC;AACrCF,MAAAA,MAAM,GAAGT,GAAG,CAACU,CAAD,CAAH,CAAOH,CAAP,EAAUC,CAAV,CAAT;AACAE,MAAAA,CAAC,IAAI,CAAL;AACD;;AAED,WAAOD,MAAP;AACD,GAVM,CAAP;AAWD,CAZM,CAFP;;AAgBA,eAAeV,QAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\n/**\r\n * Sorts a list according to a list of comparators.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.23.0\r\n * @category Relation\r\n * @sig [(a, a) -> Number] -> [a] -> [a]\r\n * @param {Array} functions A list of comparator functions.\r\n * @param {Array} list The list to sort.\r\n * @return {Array} A new list sorted according to the comarator functions.\r\n * @example\r\n *\r\n *      const alice = {\r\n *        name: 'alice',\r\n *        age: 40\r\n *      };\r\n *      const bob = {\r\n *        name: 'bob',\r\n *        age: 30\r\n *      };\r\n *      const clara = {\r\n *        name: 'clara',\r\n *        age: 40\r\n *      };\r\n *      const people = [clara, bob, alice];\r\n *      const ageNameSort = R.sortWith([\r\n *        R.descend(R.prop('age')),\r\n *        R.ascend(R.prop('name'))\r\n *      ]);\r\n *      ageNameSort(people); //=> [alice, clara, bob]\r\n */\r\n\r\nvar sortWith =\r\n/*#__PURE__*/\r\n_curry2(function sortWith(fns, list) {\r\n  return Array.prototype.slice.call(list, 0).sort(function (a, b) {\r\n    var result = 0;\r\n    var i = 0;\r\n\r\n    while (result === 0 && i < fns.length) {\r\n      result = fns[i](a, b);\r\n      i += 1;\r\n    }\r\n\r\n    return result;\r\n  });\r\n});\r\n\r\nexport default sortWith;"]},"metadata":{},"sourceType":"module"}