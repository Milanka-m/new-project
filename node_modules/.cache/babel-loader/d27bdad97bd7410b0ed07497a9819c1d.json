{"ast":null,"code":"import _curry3 from \"./internal/_curry3.js\";\nimport equals from \"./equals.js\";\nimport path from \"./path.js\";\n/**\r\n * Determines whether a nested path on an object has a specific value, in\r\n * [`R.equals`](#equals) terms. Most likely used to filter a list.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.7.0\r\n * @category Relation\r\n * @typedefn Idx = String | Int\r\n * @sig [Idx] -> a -> {a} -> Boolean\r\n * @param {Array} path The path of the nested property to use\r\n * @param {*} val The value to compare the nested property with\r\n * @param {Object} obj The object to check the nested property in\r\n * @return {Boolean} `true` if the value equals the nested object property,\r\n *         `false` otherwise.\r\n * @example\r\n *\r\n *      const user1 = { address: { zipCode: 90210 } };\r\n *      const user2 = { address: { zipCode: 55555 } };\r\n *      const user3 = { name: 'Bob' };\r\n *      const users = [ user1, user2, user3 ];\r\n *      const isFamous = R.pathEq(['address', 'zipCode'], 90210);\r\n *      R.filter(isFamous, users); //=> [ user1 ]\r\n */\n\nvar pathEq = /*#__PURE__*/_curry3(function pathEq(_path, val, obj) {\n  return equals(path(_path, obj), val);\n});\n\nexport default pathEq;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/pathEq.js"],"names":["_curry3","equals","path","pathEq","_path","val","obj"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,MAAM,GACV,aACAH,OAAO,CAAC,SAASG,MAAT,CAAgBC,KAAhB,EAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AACvC,SAAOL,MAAM,CAACC,IAAI,CAACE,KAAD,EAAQE,GAAR,CAAL,EAAmBD,GAAnB,CAAb;AACD,CAFM,CAFP;;AAMA,eAAeF,MAAf","sourcesContent":["import _curry3 from \"./internal/_curry3.js\";\r\nimport equals from \"./equals.js\";\r\nimport path from \"./path.js\";\r\n/**\r\n * Determines whether a nested path on an object has a specific value, in\r\n * [`R.equals`](#equals) terms. Most likely used to filter a list.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.7.0\r\n * @category Relation\r\n * @typedefn Idx = String | Int\r\n * @sig [Idx] -> a -> {a} -> Boolean\r\n * @param {Array} path The path of the nested property to use\r\n * @param {*} val The value to compare the nested property with\r\n * @param {Object} obj The object to check the nested property in\r\n * @return {Boolean} `true` if the value equals the nested object property,\r\n *         `false` otherwise.\r\n * @example\r\n *\r\n *      const user1 = { address: { zipCode: 90210 } };\r\n *      const user2 = { address: { zipCode: 55555 } };\r\n *      const user3 = { name: 'Bob' };\r\n *      const users = [ user1, user2, user3 ];\r\n *      const isFamous = R.pathEq(['address', 'zipCode'], 90210);\r\n *      R.filter(isFamous, users); //=> [ user1 ]\r\n */\r\n\r\nvar pathEq =\r\n/*#__PURE__*/\r\n_curry3(function pathEq(_path, val, obj) {\r\n  return equals(path(_path, obj), val);\r\n});\r\n\r\nexport default pathEq;"]},"metadata":{},"sourceType":"module"}