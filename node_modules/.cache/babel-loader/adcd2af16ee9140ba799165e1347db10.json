{"ast":null,"code":"var _classCallCheck = require(\"D:\\\\Lianok\\\\dev\\\\new-project\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\classCallCheck.js\").default;\n\nvar _createClass = require(\"D:\\\\Lianok\\\\dev\\\\new-project\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\createClass.js\").default;\n\nvar ANY = Symbol('SemVer ANY'); // hoisted class for cyclic dependency\n\nvar Comparator = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function Comparator(comp, options) {\n    _classCallCheck(this, Comparator);\n\n    options = parseOptions(options);\n\n    if (comp instanceof Comparator) {\n      if (comp.loose === !!options.loose) {\n        return comp;\n      } else {\n        comp = comp.value;\n      }\n    }\n\n    debug('comparator', comp, options);\n    this.options = options;\n    this.loose = !!options.loose;\n    this.parse(comp);\n\n    if (this.semver === ANY) {\n      this.value = '';\n    } else {\n      this.value = this.operator + this.semver.version;\n    }\n\n    debug('comp', this);\n  }\n\n  _createClass(Comparator, [{\n    key: \"parse\",\n    value: function parse(comp) {\n      var r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];\n      var m = comp.match(r);\n\n      if (!m) {\n        throw new TypeError(\"Invalid comparator: \".concat(comp));\n      }\n\n      this.operator = m[1] !== undefined ? m[1] : '';\n\n      if (this.operator === '=') {\n        this.operator = '';\n      } // if it literally is just '>' or '' then allow anything.\n\n\n      if (!m[2]) {\n        this.semver = ANY;\n      } else {\n        this.semver = new SemVer(m[2], this.options.loose);\n      }\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.value;\n    }\n  }, {\n    key: \"test\",\n    value: function test(version) {\n      debug('Comparator.test', version, this.options.loose);\n\n      if (this.semver === ANY || version === ANY) {\n        return true;\n      }\n\n      if (typeof version === 'string') {\n        try {\n          version = new SemVer(version, this.options);\n        } catch (er) {\n          return false;\n        }\n      }\n\n      return cmp(version, this.operator, this.semver, this.options);\n    }\n  }, {\n    key: \"intersects\",\n    value: function intersects(comp, options) {\n      if (!(comp instanceof Comparator)) {\n        throw new TypeError('a Comparator is required');\n      }\n\n      if (!options || typeof options !== 'object') {\n        options = {\n          loose: !!options,\n          includePrerelease: false\n        };\n      }\n\n      if (this.operator === '') {\n        if (this.value === '') {\n          return true;\n        }\n\n        return new Range(comp.value, options).test(this.value);\n      } else if (comp.operator === '') {\n        if (comp.value === '') {\n          return true;\n        }\n\n        return new Range(this.value, options).test(comp.semver);\n      }\n\n      var sameDirectionIncreasing = (this.operator === '>=' || this.operator === '>') && (comp.operator === '>=' || comp.operator === '>');\n      var sameDirectionDecreasing = (this.operator === '<=' || this.operator === '<') && (comp.operator === '<=' || comp.operator === '<');\n      var sameSemVer = this.semver.version === comp.semver.version;\n      var differentDirectionsInclusive = (this.operator === '>=' || this.operator === '<=') && (comp.operator === '>=' || comp.operator === '<=');\n      var oppositeDirectionsLessThan = cmp(this.semver, '<', comp.semver, options) && (this.operator === '>=' || this.operator === '>') && (comp.operator === '<=' || comp.operator === '<');\n      var oppositeDirectionsGreaterThan = cmp(this.semver, '>', comp.semver, options) && (this.operator === '<=' || this.operator === '<') && (comp.operator === '>=' || comp.operator === '>');\n      return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;\n    }\n  }], [{\n    key: \"ANY\",\n    get: function get() {\n      return ANY;\n    }\n  }]);\n\n  return Comparator;\n}();\n\nmodule.exports = Comparator;\n\nvar parseOptions = require('../internal/parse-options');\n\nvar _require = require('../internal/re'),\n    re = _require.re,\n    t = _require.t;\n\nvar cmp = require('../functions/cmp');\n\nvar debug = require('../internal/debug');\n\nvar SemVer = require('./semver');\n\nvar Range = require('./range');","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/@ledgerhq/devices/node_modules/semver/classes/comparator.js"],"names":["ANY","Symbol","Comparator","comp","options","parseOptions","loose","value","debug","parse","semver","operator","version","r","re","t","COMPARATORLOOSE","COMPARATOR","m","match","TypeError","undefined","SemVer","er","cmp","includePrerelease","Range","test","sameDirectionIncreasing","sameDirectionDecreasing","sameSemVer","differentDirectionsInclusive","oppositeDirectionsLessThan","oppositeDirectionsGreaterThan","module","exports","require"],"mappings":"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","sourcesContent":["const ANY = Symbol('SemVer ANY')\r\n// hoisted class for cyclic dependency\r\nclass Comparator {\r\n  static get ANY () {\r\n    return ANY\r\n  }\r\n  constructor (comp, options) {\r\n    options = parseOptions(options)\r\n\r\n    if (comp instanceof Comparator) {\r\n      if (comp.loose === !!options.loose) {\r\n        return comp\r\n      } else {\r\n        comp = comp.value\r\n      }\r\n    }\r\n\r\n    debug('comparator', comp, options)\r\n    this.options = options\r\n    this.loose = !!options.loose\r\n    this.parse(comp)\r\n\r\n    if (this.semver === ANY) {\r\n      this.value = ''\r\n    } else {\r\n      this.value = this.operator + this.semver.version\r\n    }\r\n\r\n    debug('comp', this)\r\n  }\r\n\r\n  parse (comp) {\r\n    const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]\r\n    const m = comp.match(r)\r\n\r\n    if (!m) {\r\n      throw new TypeError(`Invalid comparator: ${comp}`)\r\n    }\r\n\r\n    this.operator = m[1] !== undefined ? m[1] : ''\r\n    if (this.operator === '=') {\r\n      this.operator = ''\r\n    }\r\n\r\n    // if it literally is just '>' or '' then allow anything.\r\n    if (!m[2]) {\r\n      this.semver = ANY\r\n    } else {\r\n      this.semver = new SemVer(m[2], this.options.loose)\r\n    }\r\n  }\r\n\r\n  toString () {\r\n    return this.value\r\n  }\r\n\r\n  test (version) {\r\n    debug('Comparator.test', version, this.options.loose)\r\n\r\n    if (this.semver === ANY || version === ANY) {\r\n      return true\r\n    }\r\n\r\n    if (typeof version === 'string') {\r\n      try {\r\n        version = new SemVer(version, this.options)\r\n      } catch (er) {\r\n        return false\r\n      }\r\n    }\r\n\r\n    return cmp(version, this.operator, this.semver, this.options)\r\n  }\r\n\r\n  intersects (comp, options) {\r\n    if (!(comp instanceof Comparator)) {\r\n      throw new TypeError('a Comparator is required')\r\n    }\r\n\r\n    if (!options || typeof options !== 'object') {\r\n      options = {\r\n        loose: !!options,\r\n        includePrerelease: false\r\n      }\r\n    }\r\n\r\n    if (this.operator === '') {\r\n      if (this.value === '') {\r\n        return true\r\n      }\r\n      return new Range(comp.value, options).test(this.value)\r\n    } else if (comp.operator === '') {\r\n      if (comp.value === '') {\r\n        return true\r\n      }\r\n      return new Range(this.value, options).test(comp.semver)\r\n    }\r\n\r\n    const sameDirectionIncreasing =\r\n      (this.operator === '>=' || this.operator === '>') &&\r\n      (comp.operator === '>=' || comp.operator === '>')\r\n    const sameDirectionDecreasing =\r\n      (this.operator === '<=' || this.operator === '<') &&\r\n      (comp.operator === '<=' || comp.operator === '<')\r\n    const sameSemVer = this.semver.version === comp.semver.version\r\n    const differentDirectionsInclusive =\r\n      (this.operator === '>=' || this.operator === '<=') &&\r\n      (comp.operator === '>=' || comp.operator === '<=')\r\n    const oppositeDirectionsLessThan =\r\n      cmp(this.semver, '<', comp.semver, options) &&\r\n      (this.operator === '>=' || this.operator === '>') &&\r\n        (comp.operator === '<=' || comp.operator === '<')\r\n    const oppositeDirectionsGreaterThan =\r\n      cmp(this.semver, '>', comp.semver, options) &&\r\n      (this.operator === '<=' || this.operator === '<') &&\r\n        (comp.operator === '>=' || comp.operator === '>')\r\n\r\n    return (\r\n      sameDirectionIncreasing ||\r\n      sameDirectionDecreasing ||\r\n      (sameSemVer && differentDirectionsInclusive) ||\r\n      oppositeDirectionsLessThan ||\r\n      oppositeDirectionsGreaterThan\r\n    )\r\n  }\r\n}\r\n\r\nmodule.exports = Comparator\r\n\r\nconst parseOptions = require('../internal/parse-options')\r\nconst {re, t} = require('../internal/re')\r\nconst cmp = require('../functions/cmp')\r\nconst debug = require('../internal/debug')\r\nconst SemVer = require('./semver')\r\nconst Range = require('./range')\r\n"]},"metadata":{},"sourceType":"script"}