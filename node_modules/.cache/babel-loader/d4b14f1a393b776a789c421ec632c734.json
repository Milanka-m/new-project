{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport TransportWebHid from '@ledgerhq/hw-transport-webhid';\nimport { BaseSignerWalletAdapter, WalletConnectionError, WalletDisconnectedError, WalletDisconnectionError, WalletNotConnectedError, WalletPublicKeyError, WalletSignTransactionError } from '@solana/wallet-adapter-base';\nimport { getDerivationPath, getPublicKey, signTransaction } from './util';\nexport class LedgerWalletAdapter extends BaseSignerWalletAdapter {\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    this._disconnected = () => {\n      const transport = this._transport;\n\n      if (transport) {\n        transport.off('disconnect', this._disconnected);\n        this._transport = null;\n        this._publicKey = null;\n        this.emit('error', new WalletDisconnectedError());\n        this.emit('disconnect');\n      }\n    };\n\n    this._derivationPath = config.derivationPath || getDerivationPath(0, 0);\n    this._connecting = false;\n    this._transport = null;\n    this._publicKey = null;\n  }\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  get ready() {\n    return typeof window !== 'undefined' && !!navigator.hid;\n  }\n\n  get connecting() {\n    return this._connecting;\n  }\n\n  get connected() {\n    return !!this._transport;\n  }\n\n  connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (this.connected || this.connecting) return;\n        this._connecting = true;\n        let transport;\n\n        try {\n          transport = yield TransportWebHid.create();\n        } catch (error) {\n          throw new WalletConnectionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        let publicKey;\n\n        try {\n          publicKey = yield getPublicKey(transport, this._derivationPath);\n        } catch (error) {\n          throw new WalletPublicKeyError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        transport.on('disconnect', this._disconnected);\n        this._transport = transport;\n        this._publicKey = publicKey;\n        this.emit('connect');\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      } finally {\n        this._connecting = false;\n      }\n    });\n  }\n\n  disconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const transport = this._transport;\n\n      if (transport) {\n        transport.off('disconnect', this._disconnected);\n        this._transport = null;\n        this._publicKey = null;\n\n        try {\n          yield transport.close();\n        } catch (error) {\n          this.emit('error', new WalletDisconnectionError(error === null || error === void 0 ? void 0 : error.message, error));\n        }\n      }\n\n      this.emit('disconnect');\n    });\n  }\n\n  signTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const transport = this._transport;\n        const publicKey = this._publicKey;\n        if (!transport || !publicKey) throw new WalletNotConnectedError();\n\n        try {\n          const signature = yield signTransaction(transport, transaction, this._derivationPath);\n          transaction.addSignature(publicKey, signature);\n        } catch (error) {\n          throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        return transaction;\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n  signAllTransactions(transactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const transport = this._transport;\n        const publicKey = this._publicKey;\n        if (!transport || !publicKey) throw new WalletNotConnectedError();\n\n        try {\n          const derivationPath = this._derivationPath;\n\n          for (const transaction of transactions) {\n            const signature = yield signTransaction(transport, transaction, derivationPath);\n            transaction.addSignature(publicKey, signature);\n          }\n        } catch (error) {\n          throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        return transactions;\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["../src/adapter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport TransportWebHid from '@ledgerhq/hw-transport-webhid';\r\nimport { BaseSignerWalletAdapter, WalletConnectionError, WalletDisconnectedError, WalletDisconnectionError, WalletNotConnectedError, WalletPublicKeyError, WalletSignTransactionError, } from '@solana/wallet-adapter-base';\r\nimport { getDerivationPath, getPublicKey, signTransaction } from './util';\r\nexport class LedgerWalletAdapter extends BaseSignerWalletAdapter {\r\n    constructor(config = {}) {\r\n        super();\r\n        this._disconnected = () => {\r\n            const transport = this._transport;\r\n            if (transport) {\r\n                transport.off('disconnect', this._disconnected);\r\n                this._transport = null;\r\n                this._publicKey = null;\r\n                this.emit('error', new WalletDisconnectedError());\r\n                this.emit('disconnect');\r\n            }\r\n        };\r\n        this._derivationPath = config.derivationPath || getDerivationPath(0, 0);\r\n        this._connecting = false;\r\n        this._transport = null;\r\n        this._publicKey = null;\r\n    }\r\n    get publicKey() {\r\n        return this._publicKey;\r\n    }\r\n    get ready() {\r\n        return typeof window !== 'undefined' && !!navigator.hid;\r\n    }\r\n    get connecting() {\r\n        return this._connecting;\r\n    }\r\n    get connected() {\r\n        return !!this._transport;\r\n    }\r\n    connect() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                if (this.connected || this.connecting)\r\n                    return;\r\n                this._connecting = true;\r\n                let transport;\r\n                try {\r\n                    transport = yield TransportWebHid.create();\r\n                }\r\n                catch (error) {\r\n                    throw new WalletConnectionError(error === null || error === void 0 ? void 0 : error.message, error);\r\n                }\r\n                let publicKey;\r\n                try {\r\n                    publicKey = yield getPublicKey(transport, this._derivationPath);\r\n                }\r\n                catch (error) {\r\n                    throw new WalletPublicKeyError(error === null || error === void 0 ? void 0 : error.message, error);\r\n                }\r\n                transport.on('disconnect', this._disconnected);\r\n                this._transport = transport;\r\n                this._publicKey = publicKey;\r\n                this.emit('connect');\r\n            }\r\n            catch (error) {\r\n                this.emit('error', error);\r\n                throw error;\r\n            }\r\n            finally {\r\n                this._connecting = false;\r\n            }\r\n        });\r\n    }\r\n    disconnect() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const transport = this._transport;\r\n            if (transport) {\r\n                transport.off('disconnect', this._disconnected);\r\n                this._transport = null;\r\n                this._publicKey = null;\r\n                try {\r\n                    yield transport.close();\r\n                }\r\n                catch (error) {\r\n                    this.emit('error', new WalletDisconnectionError(error === null || error === void 0 ? void 0 : error.message, error));\r\n                }\r\n            }\r\n            this.emit('disconnect');\r\n        });\r\n    }\r\n    signTransaction(transaction) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const transport = this._transport;\r\n                const publicKey = this._publicKey;\r\n                if (!transport || !publicKey)\r\n                    throw new WalletNotConnectedError();\r\n                try {\r\n                    const signature = yield signTransaction(transport, transaction, this._derivationPath);\r\n                    transaction.addSignature(publicKey, signature);\r\n                }\r\n                catch (error) {\r\n                    throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\r\n                }\r\n                return transaction;\r\n            }\r\n            catch (error) {\r\n                this.emit('error', error);\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    signAllTransactions(transactions) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const transport = this._transport;\r\n                const publicKey = this._publicKey;\r\n                if (!transport || !publicKey)\r\n                    throw new WalletNotConnectedError();\r\n                try {\r\n                    const derivationPath = this._derivationPath;\r\n                    for (const transaction of transactions) {\r\n                        const signature = yield signTransaction(transport, transaction, derivationPath);\r\n                        transaction.addSignature(publicKey, signature);\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\r\n                }\r\n                return transactions;\r\n            }\r\n            catch (error) {\r\n                this.emit('error', error);\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=adapter.js.map"]},"metadata":{},"sourceType":"module"}