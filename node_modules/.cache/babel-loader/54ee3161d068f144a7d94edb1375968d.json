{"ast":null,"code":"import _classCallCheck from \"D:\\\\Lianok\\\\dev\\\\new-project\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\Lianok\\\\dev\\\\new-project\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _assertThisInitialized from \"D:\\\\Lianok\\\\dev\\\\new-project\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\assertThisInitialized.js\";\nimport _inherits from \"D:\\\\Lianok\\\\dev\\\\new-project\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\nimport _createSuper from \"D:\\\\Lianok\\\\dev\\\\new-project\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createSuper.js\";\nimport _regeneratorRuntime from \"D:\\\\Lianok\\\\dev\\\\new-project\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport Wallet from '@project-serum/sol-wallet-adapter';\nimport { BaseMessageSignerWalletAdapter, pollUntilReady, WalletAdapterNetwork, WalletConnectionError, WalletDisconnectedError, WalletDisconnectionError, WalletError, WalletNotConnectedError, WalletNotFoundError, WalletSignMessageError, WalletSignTransactionError, WalletTimeoutError, WalletWindowBlockedError, WalletWindowClosedError } from '@solana/wallet-adapter-base';\nexport var SolletWalletAdapter = /*#__PURE__*/function (_BaseMessageSignerWal) {\n  _inherits(SolletWalletAdapter, _BaseMessageSignerWal);\n\n  var _super = _createSuper(SolletWalletAdapter);\n\n  function SolletWalletAdapter() {\n    var _this;\n\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, SolletWalletAdapter);\n\n    _this = _super.call(this);\n\n    _this._disconnected = function () {\n      var wallet = _this._wallet;\n\n      if (wallet) {\n        wallet.off('disconnect', _this._disconnected);\n        _this._wallet = null;\n\n        _this.emit('error', new WalletDisconnectedError());\n\n        _this.emit('disconnect');\n      }\n    };\n\n    _this._provider = config.provider || (typeof window === 'undefined' ? undefined : window.sollet);\n    _this._network = config.network || WalletAdapterNetwork.Mainnet;\n    _this._connecting = false;\n    _this._wallet = null;\n    if (!_this.ready) pollUntilReady(_assertThisInitialized(_this), config.pollInterval || 1000, config.pollCount || 3);\n    return _this;\n  }\n\n  _createClass(SolletWalletAdapter, [{\n    key: \"publicKey\",\n    get: function get() {\n      var _a;\n\n      return ((_a = this._wallet) === null || _a === void 0 ? void 0 : _a.publicKey) || null;\n    }\n  }, {\n    key: \"ready\",\n    get: function get() {\n      var _a;\n\n      return typeof this._provider === 'string' || typeof window !== 'undefined' && typeof ((_a = window.sollet) === null || _a === void 0 ? void 0 : _a.postMessage) === 'function';\n    }\n  }, {\n    key: \"connecting\",\n    get: function get() {\n      return this._connecting;\n    }\n  }, {\n    key: \"connected\",\n    get: function get() {\n      var _a;\n\n      return !!((_a = this._wallet) === null || _a === void 0 ? void 0 : _a.connected);\n    }\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var provider, wallet, handleDisconnect, timeout, interval;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n\n                if (!(this.connected || this.connecting)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                this._connecting = true;\n                provider = this._provider || typeof window !== 'undefined' && window.sollet;\n\n                if (provider) {\n                  _context.next = 7;\n                  break;\n                }\n\n                throw new WalletNotFoundError();\n\n              case 7:\n                _context.prev = 7;\n                wallet = new Wallet(provider, this._network); // HACK: sol-wallet-adapter doesn't reject or emit an event if the popup or extension is closed or blocked\n\n                handleDisconnect = wallet.handleDisconnect;\n                _context.prev = 10;\n                _context.next = 13;\n                return new Promise(function (resolve, reject) {\n                  var connect = function connect() {\n                    if (timeout) clearTimeout(timeout);\n                    wallet.off('connect', connect);\n                    resolve();\n                  };\n\n                  wallet.handleDisconnect = function () {\n                    wallet.off('connect', connect);\n                    reject(new WalletWindowClosedError());\n\n                    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                      args[_key] = arguments[_key];\n                    }\n\n                    return handleDisconnect.apply(wallet, args);\n                  };\n\n                  wallet.on('connect', connect);\n                  wallet.connect().catch(function (reason) {\n                    wallet.off('connect', connect);\n                    reject(reason);\n                  });\n\n                  if (typeof provider === 'string') {\n                    var count = 0;\n                    interval = setInterval(function () {\n                      var popup = wallet._popup;\n\n                      if (popup) {\n                        if (popup.closed) reject(new WalletWindowClosedError());\n                      } else {\n                        if (count > 50) reject(new WalletWindowBlockedError());\n                      }\n\n                      count++;\n                    }, 100);\n                  } else {\n                    // HACK: sol-wallet-adapter doesn't reject or emit an event if the extension is closed or ignored\n                    timeout = setTimeout(function () {\n                      return reject(new WalletTimeoutError());\n                    }, 10000);\n                  }\n                });\n\n              case 13:\n                _context.prev = 13;\n                wallet.handleDisconnect = handleDisconnect;\n                if (interval) clearInterval(interval);\n                return _context.finish(13);\n\n              case 17:\n                _context.next = 24;\n                break;\n\n              case 19:\n                _context.prev = 19;\n                _context.t0 = _context[\"catch\"](7);\n\n                if (!(_context.t0 instanceof WalletError)) {\n                  _context.next = 23;\n                  break;\n                }\n\n                throw _context.t0;\n\n              case 23:\n                throw new WalletConnectionError(_context.t0 === null || _context.t0 === void 0 ? void 0 : _context.t0.message, _context.t0);\n\n              case 24:\n                wallet.on('disconnect', this._disconnected);\n                this._wallet = wallet;\n                this.emit('connect');\n                _context.next = 33;\n                break;\n\n              case 29:\n                _context.prev = 29;\n                _context.t1 = _context[\"catch\"](0);\n                this.emit('error', _context.t1);\n                throw _context.t1;\n\n              case 33:\n                _context.prev = 33;\n                this._connecting = false;\n                return _context.finish(33);\n\n              case 36:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 29, 33, 36], [7, 19], [10,, 13, 17]]);\n      }));\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var wallet, handleDisconnect;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                wallet = this._wallet;\n\n                if (!wallet) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                wallet.off('disconnect', this._disconnected);\n                this._wallet = null; // HACK: sol-wallet-adapter doesn't reliably fulfill its promise or emit an event on disconnect\n\n                handleDisconnect = wallet.handleDisconnect;\n                _context2.prev = 5;\n                _context2.next = 8;\n                return new Promise(function (resolve, reject) {\n                  var timeout = setTimeout(function () {\n                    return resolve();\n                  }, 250);\n\n                  wallet.handleDisconnect = function () {\n                    clearTimeout(timeout);\n                    resolve(); // HACK: sol-wallet-adapter rejects with an uncaught promise error\n\n                    // HACK: sol-wallet-adapter rejects with an uncaught promise error\n                    wallet._responsePromises = new Map();\n\n                    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                      args[_key2] = arguments[_key2];\n                    }\n\n                    return handleDisconnect.apply(wallet, args);\n                  };\n\n                  wallet.disconnect().then(function () {\n                    clearTimeout(timeout);\n                    resolve();\n                  }, function (error) {\n                    clearTimeout(timeout); // HACK: sol-wallet-adapter rejects with an error on disconnect\n\n                    // HACK: sol-wallet-adapter rejects with an error on disconnect\n                    if ((error === null || error === void 0 ? void 0 : error.message) === 'Wallet disconnected') {\n                      resolve();\n                    } else {\n                      reject(error);\n                    }\n                  });\n                });\n\n              case 8:\n                _context2.next = 13;\n                break;\n\n              case 10:\n                _context2.prev = 10;\n                _context2.t0 = _context2[\"catch\"](5);\n                this.emit('error', new WalletDisconnectionError(_context2.t0 === null || _context2.t0 === void 0 ? void 0 : _context2.t0.message, _context2.t0));\n\n              case 13:\n                _context2.prev = 13;\n                wallet.handleDisconnect = handleDisconnect;\n                return _context2.finish(13);\n\n              case 16:\n                this.emit('disconnect');\n\n              case 17:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[5, 10, 13, 16]]);\n      }));\n    }\n  }, {\n    key: \"signTransaction\",\n    value: function signTransaction(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var wallet;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                wallet = this._wallet;\n\n                if (wallet) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                throw new WalletNotConnectedError();\n\n              case 4:\n                _context3.prev = 4;\n                _context3.next = 7;\n                return wallet.signTransaction(transaction);\n\n              case 7:\n                _context3.t0 = _context3.sent;\n\n                if (_context3.t0) {\n                  _context3.next = 10;\n                  break;\n                }\n\n                _context3.t0 = transaction;\n\n              case 10:\n                return _context3.abrupt(\"return\", _context3.t0);\n\n              case 13:\n                _context3.prev = 13;\n                _context3.t1 = _context3[\"catch\"](4);\n                throw new WalletSignTransactionError(_context3.t1 === null || _context3.t1 === void 0 ? void 0 : _context3.t1.message, _context3.t1);\n\n              case 16:\n                _context3.next = 22;\n                break;\n\n              case 18:\n                _context3.prev = 18;\n                _context3.t2 = _context3[\"catch\"](0);\n                this.emit('error', _context3.t2);\n                throw _context3.t2;\n\n              case 22:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 18], [4, 13]]);\n      }));\n    }\n  }, {\n    key: \"signAllTransactions\",\n    value: function signAllTransactions(transactions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var wallet;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                wallet = this._wallet;\n\n                if (wallet) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                throw new WalletNotConnectedError();\n\n              case 4:\n                _context4.prev = 4;\n                _context4.next = 7;\n                return wallet.signAllTransactions(transactions);\n\n              case 7:\n                _context4.t0 = _context4.sent;\n\n                if (_context4.t0) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                _context4.t0 = transactions;\n\n              case 10:\n                return _context4.abrupt(\"return\", _context4.t0);\n\n              case 13:\n                _context4.prev = 13;\n                _context4.t1 = _context4[\"catch\"](4);\n                throw new WalletSignTransactionError(_context4.t1 === null || _context4.t1 === void 0 ? void 0 : _context4.t1.message, _context4.t1);\n\n              case 16:\n                _context4.next = 22;\n                break;\n\n              case 18:\n                _context4.prev = 18;\n                _context4.t2 = _context4[\"catch\"](0);\n                this.emit('error', _context4.t2);\n                throw _context4.t2;\n\n              case 22:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 18], [4, 13]]);\n      }));\n    }\n  }, {\n    key: \"signMessage\",\n    value: function signMessage(message) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var wallet, _yield$wallet$sign, signature;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                wallet = this._wallet;\n\n                if (wallet) {\n                  _context5.next = 4;\n                  break;\n                }\n\n                throw new WalletNotConnectedError();\n\n              case 4:\n                _context5.prev = 4;\n                _context5.next = 7;\n                return wallet.sign(message, 'utf8');\n\n              case 7:\n                _yield$wallet$sign = _context5.sent;\n                signature = _yield$wallet$sign.signature;\n                return _context5.abrupt(\"return\", Uint8Array.from(signature));\n\n              case 12:\n                _context5.prev = 12;\n                _context5.t0 = _context5[\"catch\"](4);\n                throw new WalletSignMessageError(_context5.t0 === null || _context5.t0 === void 0 ? void 0 : _context5.t0.message, _context5.t0);\n\n              case 15:\n                _context5.next = 21;\n                break;\n\n              case 17:\n                _context5.prev = 17;\n                _context5.t1 = _context5[\"catch\"](0);\n                this.emit('error', _context5.t1);\n                throw _context5.t1;\n\n              case 21:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[0, 17], [4, 12]]);\n      }));\n    }\n  }]);\n\n  return SolletWalletAdapter;\n}(BaseMessageSignerWalletAdapter);","map":{"version":3,"sources":["../src/adapter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport Wallet from '@project-serum/sol-wallet-adapter';\r\nimport { BaseMessageSignerWalletAdapter, pollUntilReady, WalletAdapterNetwork, WalletConnectionError, WalletDisconnectedError, WalletDisconnectionError, WalletError, WalletNotConnectedError, WalletNotFoundError, WalletSignMessageError, WalletSignTransactionError, WalletTimeoutError, WalletWindowBlockedError, WalletWindowClosedError, } from '@solana/wallet-adapter-base';\r\nexport class SolletWalletAdapter extends BaseMessageSignerWalletAdapter {\r\n    constructor(config = {}) {\r\n        super();\r\n        this._disconnected = () => {\r\n            const wallet = this._wallet;\r\n            if (wallet) {\r\n                wallet.off('disconnect', this._disconnected);\r\n                this._wallet = null;\r\n                this.emit('error', new WalletDisconnectedError());\r\n                this.emit('disconnect');\r\n            }\r\n        };\r\n        this._provider = config.provider || (typeof window === 'undefined' ? undefined : window.sollet);\r\n        this._network = config.network || WalletAdapterNetwork.Mainnet;\r\n        this._connecting = false;\r\n        this._wallet = null;\r\n        if (!this.ready)\r\n            pollUntilReady(this, config.pollInterval || 1000, config.pollCount || 3);\r\n    }\r\n    get publicKey() {\r\n        var _a;\r\n        return ((_a = this._wallet) === null || _a === void 0 ? void 0 : _a.publicKey) || null;\r\n    }\r\n    get ready() {\r\n        var _a;\r\n        return (typeof this._provider === 'string' ||\r\n            (typeof window !== 'undefined' && typeof ((_a = window.sollet) === null || _a === void 0 ? void 0 : _a.postMessage) === 'function'));\r\n    }\r\n    get connecting() {\r\n        return this._connecting;\r\n    }\r\n    get connected() {\r\n        var _a;\r\n        return !!((_a = this._wallet) === null || _a === void 0 ? void 0 : _a.connected);\r\n    }\r\n    connect() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                if (this.connected || this.connecting)\r\n                    return;\r\n                this._connecting = true;\r\n                const provider = this._provider || (typeof window !== 'undefined' && window.sollet);\r\n                if (!provider)\r\n                    throw new WalletNotFoundError();\r\n                let wallet;\r\n                try {\r\n                    wallet = new Wallet(provider, this._network);\r\n                    // HACK: sol-wallet-adapter doesn't reject or emit an event if the popup or extension is closed or blocked\r\n                    const handleDisconnect = wallet.handleDisconnect;\r\n                    let timeout;\r\n                    let interval;\r\n                    try {\r\n                        yield new Promise((resolve, reject) => {\r\n                            const connect = () => {\r\n                                if (timeout)\r\n                                    clearTimeout(timeout);\r\n                                wallet.off('connect', connect);\r\n                                resolve();\r\n                            };\r\n                            wallet.handleDisconnect = (...args) => {\r\n                                wallet.off('connect', connect);\r\n                                reject(new WalletWindowClosedError());\r\n                                return handleDisconnect.apply(wallet, args);\r\n                            };\r\n                            wallet.on('connect', connect);\r\n                            wallet.connect().catch((reason) => {\r\n                                wallet.off('connect', connect);\r\n                                reject(reason);\r\n                            });\r\n                            if (typeof provider === 'string') {\r\n                                let count = 0;\r\n                                interval = setInterval(() => {\r\n                                    const popup = wallet._popup;\r\n                                    if (popup) {\r\n                                        if (popup.closed)\r\n                                            reject(new WalletWindowClosedError());\r\n                                    }\r\n                                    else {\r\n                                        if (count > 50)\r\n                                            reject(new WalletWindowBlockedError());\r\n                                    }\r\n                                    count++;\r\n                                }, 100);\r\n                            }\r\n                            else {\r\n                                // HACK: sol-wallet-adapter doesn't reject or emit an event if the extension is closed or ignored\r\n                                timeout = setTimeout(() => reject(new WalletTimeoutError()), 10000);\r\n                            }\r\n                        });\r\n                    }\r\n                    finally {\r\n                        wallet.handleDisconnect = handleDisconnect;\r\n                        if (interval)\r\n                            clearInterval(interval);\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    if (error instanceof WalletError)\r\n                        throw error;\r\n                    throw new WalletConnectionError(error === null || error === void 0 ? void 0 : error.message, error);\r\n                }\r\n                wallet.on('disconnect', this._disconnected);\r\n                this._wallet = wallet;\r\n                this.emit('connect');\r\n            }\r\n            catch (error) {\r\n                this.emit('error', error);\r\n                throw error;\r\n            }\r\n            finally {\r\n                this._connecting = false;\r\n            }\r\n        });\r\n    }\r\n    disconnect() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const wallet = this._wallet;\r\n            if (wallet) {\r\n                wallet.off('disconnect', this._disconnected);\r\n                this._wallet = null;\r\n                // HACK: sol-wallet-adapter doesn't reliably fulfill its promise or emit an event on disconnect\r\n                const handleDisconnect = wallet.handleDisconnect;\r\n                try {\r\n                    yield new Promise((resolve, reject) => {\r\n                        const timeout = setTimeout(() => resolve(), 250);\r\n                        wallet.handleDisconnect = (...args) => {\r\n                            clearTimeout(timeout);\r\n                            resolve();\r\n                            // HACK: sol-wallet-adapter rejects with an uncaught promise error\r\n                            wallet._responsePromises = new Map();\r\n                            return handleDisconnect.apply(wallet, args);\r\n                        };\r\n                        wallet.disconnect().then(() => {\r\n                            clearTimeout(timeout);\r\n                            resolve();\r\n                        }, (error) => {\r\n                            clearTimeout(timeout);\r\n                            // HACK: sol-wallet-adapter rejects with an error on disconnect\r\n                            if ((error === null || error === void 0 ? void 0 : error.message) === 'Wallet disconnected') {\r\n                                resolve();\r\n                            }\r\n                            else {\r\n                                reject(error);\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n                catch (error) {\r\n                    this.emit('error', new WalletDisconnectionError(error === null || error === void 0 ? void 0 : error.message, error));\r\n                }\r\n                finally {\r\n                    wallet.handleDisconnect = handleDisconnect;\r\n                }\r\n            }\r\n            this.emit('disconnect');\r\n        });\r\n    }\r\n    signTransaction(transaction) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const wallet = this._wallet;\r\n                if (!wallet)\r\n                    throw new WalletNotConnectedError();\r\n                try {\r\n                    return (yield wallet.signTransaction(transaction)) || transaction;\r\n                }\r\n                catch (error) {\r\n                    throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.emit('error', error);\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    signAllTransactions(transactions) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const wallet = this._wallet;\r\n                if (!wallet)\r\n                    throw new WalletNotConnectedError();\r\n                try {\r\n                    return (yield wallet.signAllTransactions(transactions)) || transactions;\r\n                }\r\n                catch (error) {\r\n                    throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.emit('error', error);\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    signMessage(message) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const wallet = this._wallet;\r\n                if (!wallet)\r\n                    throw new WalletNotConnectedError();\r\n                try {\r\n                    const { signature } = yield wallet.sign(message, 'utf8');\r\n                    return Uint8Array.from(signature);\r\n                }\r\n                catch (error) {\r\n                    throw new WalletSignMessageError(error === null || error === void 0 ? void 0 : error.message, error);\r\n                }\r\n            }\r\n            catch (error) {\r\n                this.emit('error', error);\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=adapter.js.map"]},"metadata":{},"sourceType":"module"}