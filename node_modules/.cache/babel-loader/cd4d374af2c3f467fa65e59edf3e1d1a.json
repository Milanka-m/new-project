{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport keys from \"./keys.js\";\n/**\r\n * Iterate over an input `object`, calling a provided function `fn` for each\r\n * key and value in the object.\r\n *\r\n * `fn` receives three argument: *(value, key, obj)*.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.23.0\r\n * @category Object\r\n * @sig ((a, String, StrMap a) -> Any) -> StrMap a -> StrMap a\r\n * @param {Function} fn The function to invoke. Receives three argument, `value`, `key`, `obj`.\r\n * @param {Object} obj The object to iterate over.\r\n * @return {Object} The original object.\r\n * @example\r\n *\r\n *      const printKeyConcatValue = (value, key) => console.log(key + ':' + value);\r\n *      R.forEachObjIndexed(printKeyConcatValue, {x: 1, y: 2}); //=> {x: 1, y: 2}\r\n *      // logs x:1\r\n *      // logs y:2\r\n * @symb R.forEachObjIndexed(f, {x: a, y: b}) = {x: a, y: b}\r\n */\n\nvar forEachObjIndexed = /*#__PURE__*/_curry2(function forEachObjIndexed(fn, obj) {\n  var keyList = keys(obj);\n  var idx = 0;\n\n  while (idx < keyList.length) {\n    var key = keyList[idx];\n    fn(obj[key], key, obj);\n    idx += 1;\n  }\n\n  return obj;\n});\n\nexport default forEachObjIndexed;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/forEachObjIndexed.js"],"names":["_curry2","keys","forEachObjIndexed","fn","obj","keyList","idx","length","key"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,iBAAiB,GACrB,aACAF,OAAO,CAAC,SAASE,iBAAT,CAA2BC,EAA3B,EAA+BC,GAA/B,EAAoC;AAC1C,MAAIC,OAAO,GAAGJ,IAAI,CAACG,GAAD,CAAlB;AACA,MAAIE,GAAG,GAAG,CAAV;;AAEA,SAAOA,GAAG,GAAGD,OAAO,CAACE,MAArB,EAA6B;AAC3B,QAAIC,GAAG,GAAGH,OAAO,CAACC,GAAD,CAAjB;AACAH,IAAAA,EAAE,CAACC,GAAG,CAACI,GAAD,CAAJ,EAAWA,GAAX,EAAgBJ,GAAhB,CAAF;AACAE,IAAAA,GAAG,IAAI,CAAP;AACD;;AAED,SAAOF,GAAP;AACD,CAXM,CAFP;;AAeA,eAAeF,iBAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\nimport keys from \"./keys.js\";\r\n/**\r\n * Iterate over an input `object`, calling a provided function `fn` for each\r\n * key and value in the object.\r\n *\r\n * `fn` receives three argument: *(value, key, obj)*.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.23.0\r\n * @category Object\r\n * @sig ((a, String, StrMap a) -> Any) -> StrMap a -> StrMap a\r\n * @param {Function} fn The function to invoke. Receives three argument, `value`, `key`, `obj`.\r\n * @param {Object} obj The object to iterate over.\r\n * @return {Object} The original object.\r\n * @example\r\n *\r\n *      const printKeyConcatValue = (value, key) => console.log(key + ':' + value);\r\n *      R.forEachObjIndexed(printKeyConcatValue, {x: 1, y: 2}); //=> {x: 1, y: 2}\r\n *      // logs x:1\r\n *      // logs y:2\r\n * @symb R.forEachObjIndexed(f, {x: a, y: b}) = {x: a, y: b}\r\n */\r\n\r\nvar forEachObjIndexed =\r\n/*#__PURE__*/\r\n_curry2(function forEachObjIndexed(fn, obj) {\r\n  var keyList = keys(obj);\r\n  var idx = 0;\r\n\r\n  while (idx < keyList.length) {\r\n    var key = keyList[idx];\r\n    fn(obj[key], key, obj);\r\n    idx += 1;\r\n  }\r\n\r\n  return obj;\r\n});\r\n\r\nexport default forEachObjIndexed;"]},"metadata":{},"sourceType":"module"}