{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\Lianok\\\\dev\\\\new-project\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport _regeneratorRuntime from \"D:\\\\Lianok\\\\dev\\\\new-project\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport { useCallback } from 'react';\nimport logger from '../logger';\n\nvar useUserInteraction = function useUserInteraction(_ref, state, dispatch) {\n  var wallet = _ref.wallet;\n  var refreshIntervalId = state.refreshIntervalId;\n  /**\r\n   * handle the user initiating an issuance request\r\n   */\n\n  var requestGatewayToken = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            logger.debug('requestGatewayToken called');\n\n            if (!(!wallet || !wallet.publicKey)) {\n              _context.next = 4;\n              break;\n            }\n\n            logger.error('No wallet connected');\n            return _context.abrupt(\"return\");\n\n          case 4:\n            // We should stop polling when showing a modal dialog\n            // and restart the polling when the user taps ok\n            // or cancel\n            if (refreshIntervalId) {\n              dispatch({\n                type: 'refresh_clear_interval'\n              });\n              clearInterval(refreshIntervalId);\n            }\n\n            dispatch({\n              type: 'userInteraction_check_gatewayToken_status',\n              token: state.gatewayToken\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), [refreshIntervalId, state.gatewayToken]);\n  return {\n    requestGatewayToken: requestGatewayToken\n  };\n};\n\nexport default useUserInteraction;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/@civic/solana-gateway-react/dist/esm/useHooks/useUserInteraction.js"],"names":["useCallback","logger","useUserInteraction","state","dispatch","wallet","refreshIntervalId","requestGatewayToken","debug","publicKey","error","type","clearInterval","token","gatewayToken"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,OAAOC,MAAP,MAAmB,WAAnB;;AACA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,OAAaC,KAAb,EAAoBC,QAApB,EAAiC;AAAA,MAA9BC,MAA8B,QAA9BA,MAA8B;AACxD,MAAQC,iBAAR,GAA8BH,KAA9B,CAAQG,iBAAR;AACA;AACJ;AACA;;AACI,MAAMC,mBAAmB,GAAGP,WAAW,wEAAC;AAAA;AAAA;AAAA;AAAA;AACpCC,YAAAA,MAAM,CAACO,KAAP,CAAa,4BAAb;;AADoC,kBAEhC,CAACH,MAAD,IAAW,CAACA,MAAM,CAACI,SAFa;AAAA;AAAA;AAAA;;AAGhCR,YAAAA,MAAM,CAACS,KAAP,CAAa,qBAAb;AAHgC;;AAAA;AAMpC;AACA;AACA;AACA,gBAAIJ,iBAAJ,EAAuB;AACnBF,cAAAA,QAAQ,CAAC;AAAEO,gBAAAA,IAAI,EAAE;AAAR,eAAD,CAAR;AACAC,cAAAA,aAAa,CAACN,iBAAD,CAAb;AACH;;AACDF,YAAAA,QAAQ,CAAC;AAAEO,cAAAA,IAAI,EAAE,2CAAR;AAAqDE,cAAAA,KAAK,EAAEV,KAAK,CAACW;AAAlE,aAAD,CAAR;;AAboC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,IAcpC,CAACR,iBAAD,EAAoBH,KAAK,CAACW,YAA1B,CAdoC,CAAvC;AAeA,SAAO;AACHP,IAAAA,mBAAmB,EAAnBA;AADG,GAAP;AAGH,CAvBD;;AAwBA,eAAeL,kBAAf","sourcesContent":["import { useCallback } from 'react';\r\nimport logger from '../logger';\r\nconst useUserInteraction = ({ wallet }, state, dispatch) => {\r\n    const { refreshIntervalId } = state;\r\n    /**\r\n     * handle the user initiating an issuance request\r\n     */\r\n    const requestGatewayToken = useCallback(async () => {\r\n        logger.debug('requestGatewayToken called');\r\n        if (!wallet || !wallet.publicKey) {\r\n            logger.error('No wallet connected');\r\n            return;\r\n        }\r\n        // We should stop polling when showing a modal dialog\r\n        // and restart the polling when the user taps ok\r\n        // or cancel\r\n        if (refreshIntervalId) {\r\n            dispatch({ type: 'refresh_clear_interval' });\r\n            clearInterval(refreshIntervalId);\r\n        }\r\n        dispatch({ type: 'userInteraction_check_gatewayToken_status', token: state.gatewayToken });\r\n    }, [refreshIntervalId, state.gatewayToken]);\r\n    return {\r\n        requestGatewayToken,\r\n    };\r\n};\r\nexport default useUserInteraction;\r\n"]},"metadata":{},"sourceType":"module"}