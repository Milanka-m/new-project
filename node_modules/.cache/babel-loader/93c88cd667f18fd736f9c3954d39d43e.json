{"ast":null,"code":"import _curry1 from \"./internal/_curry1.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xdropRepeatsWith from \"./internal/_xdropRepeatsWith.js\";\nimport dropRepeatsWith from \"./dropRepeatsWith.js\";\nimport equals from \"./equals.js\";\n/**\r\n * Returns a new list without any consecutively repeating elements.\r\n * [`R.equals`](#equals) is used to determine equality.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.14.0\r\n * @category List\r\n * @sig [a] -> [a]\r\n * @param {Array} list The array to consider.\r\n * @return {Array} `list` without repeating elements.\r\n * @see R.transduce\r\n * @example\r\n *\r\n *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]\r\n */\n\nvar dropRepeats = /*#__PURE__*/_curry1( /*#__PURE__*/_dispatchable([], /*#__PURE__*/_xdropRepeatsWith(equals), /*#__PURE__*/dropRepeatsWith(equals)));\n\nexport default dropRepeats;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/dropRepeats.js"],"names":["_curry1","_dispatchable","_xdropRepeatsWith","dropRepeatsWith","equals","dropRepeats"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,iBAAP,MAA8B,iCAA9B;AACA,OAAOC,eAAP,MAA4B,sBAA5B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,WAAW,GACf,aACAL,OAAO,EACP,aACAC,aAAa,CAAC,EAAD,EACb,aACAC,iBAAiB,CAACE,MAAD,CAFJ,EAGb,aACAD,eAAe,CAACC,MAAD,CAJF,CAFN,CAFP;;AAUA,eAAeC,WAAf","sourcesContent":["import _curry1 from \"./internal/_curry1.js\";\r\nimport _dispatchable from \"./internal/_dispatchable.js\";\r\nimport _xdropRepeatsWith from \"./internal/_xdropRepeatsWith.js\";\r\nimport dropRepeatsWith from \"./dropRepeatsWith.js\";\r\nimport equals from \"./equals.js\";\r\n/**\r\n * Returns a new list without any consecutively repeating elements.\r\n * [`R.equals`](#equals) is used to determine equality.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.14.0\r\n * @category List\r\n * @sig [a] -> [a]\r\n * @param {Array} list The array to consider.\r\n * @return {Array} `list` without repeating elements.\r\n * @see R.transduce\r\n * @example\r\n *\r\n *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]\r\n */\r\n\r\nvar dropRepeats =\r\n/*#__PURE__*/\r\n_curry1(\r\n/*#__PURE__*/\r\n_dispatchable([],\r\n/*#__PURE__*/\r\n_xdropRepeatsWith(equals),\r\n/*#__PURE__*/\r\ndropRepeatsWith(equals)));\r\n\r\nexport default dropRepeats;"]},"metadata":{},"sourceType":"module"}