{"ast":null,"code":"// Packages\nvar retrier = require('retry');\n\nfunction retry(fn, opts) {\n  function run(resolve, reject) {\n    var options = opts || {};\n    var op; // Default `randomize` to true\n\n    if (!('randomize' in options)) {\n      options.randomize = true;\n    }\n\n    op = retrier.operation(options); // We allow the user to abort retrying\n    // this makes sense in the cases where\n    // knowledge is obtained that retrying\n    // would be futile (e.g.: auth errors)\n\n    function bail(err) {\n      reject(err || new Error('Aborted'));\n    }\n\n    function onError(err, num) {\n      if (err.bail) {\n        bail(err);\n        return;\n      }\n\n      if (!op.retry(err)) {\n        reject(op.mainError());\n      } else if (options.onRetry) {\n        options.onRetry(err, num);\n      }\n    }\n\n    function runAttempt(num) {\n      var val;\n\n      try {\n        val = fn(bail, num);\n      } catch (err) {\n        onError(err, num);\n        return;\n      }\n\n      Promise.resolve(val).then(resolve).catch(function catchIt(err) {\n        onError(err, num);\n      });\n    }\n\n    op.attempt(runAttempt);\n  }\n\n  return new Promise(run);\n}\n\nmodule.exports = retry;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/async-retry/lib/index.js"],"names":["retrier","require","retry","fn","opts","run","resolve","reject","options","op","randomize","operation","bail","err","Error","onError","num","mainError","onRetry","runAttempt","val","Promise","then","catch","catchIt","attempt","module","exports"],"mappings":"AAAA;AACA,IAAIA,OAAO,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,SAASC,KAAT,CAAeC,EAAf,EAAmBC,IAAnB,EAAyB;AACvB,WAASC,GAAT,CAAaC,OAAb,EAAsBC,MAAtB,EAA8B;AAC5B,QAAIC,OAAO,GAAGJ,IAAI,IAAI,EAAtB;AACA,QAAIK,EAAJ,CAF4B,CAI5B;;AACA,QAAI,EAAE,eAAeD,OAAjB,CAAJ,EAA+B;AAC7BA,MAAAA,OAAO,CAACE,SAAR,GAAoB,IAApB;AACD;;AAEDD,IAAAA,EAAE,GAAGT,OAAO,CAACW,SAAR,CAAkBH,OAAlB,CAAL,CAT4B,CAW5B;AACA;AACA;AACA;;AAEA,aAASI,IAAT,CAAcC,GAAd,EAAmB;AACjBN,MAAAA,MAAM,CAACM,GAAG,IAAI,IAAIC,KAAJ,CAAU,SAAV,CAAR,CAAN;AACD;;AAED,aAASC,OAAT,CAAiBF,GAAjB,EAAsBG,GAAtB,EAA2B;AACzB,UAAIH,GAAG,CAACD,IAAR,EAAc;AACZA,QAAAA,IAAI,CAACC,GAAD,CAAJ;AACA;AACD;;AAED,UAAI,CAACJ,EAAE,CAACP,KAAH,CAASW,GAAT,CAAL,EAAoB;AAClBN,QAAAA,MAAM,CAACE,EAAE,CAACQ,SAAH,EAAD,CAAN;AACD,OAFD,MAEO,IAAIT,OAAO,CAACU,OAAZ,EAAqB;AAC1BV,QAAAA,OAAO,CAACU,OAAR,CAAgBL,GAAhB,EAAqBG,GAArB;AACD;AACF;;AAED,aAASG,UAAT,CAAoBH,GAApB,EAAyB;AACvB,UAAII,GAAJ;;AAEA,UAAI;AACFA,QAAAA,GAAG,GAAGjB,EAAE,CAACS,IAAD,EAAOI,GAAP,CAAR;AACD,OAFD,CAEE,OAAOH,GAAP,EAAY;AACZE,QAAAA,OAAO,CAACF,GAAD,EAAMG,GAAN,CAAP;AACA;AACD;;AAEDK,MAAAA,OAAO,CAACf,OAAR,CAAgBc,GAAhB,EACGE,IADH,CACQhB,OADR,EAEGiB,KAFH,CAES,SAASC,OAAT,CAAiBX,GAAjB,EAAsB;AAC3BE,QAAAA,OAAO,CAACF,GAAD,EAAMG,GAAN,CAAP;AACD,OAJH;AAKD;;AAEDP,IAAAA,EAAE,CAACgB,OAAH,CAAWN,UAAX;AACD;;AAED,SAAO,IAAIE,OAAJ,CAAYhB,GAAZ,CAAP;AACD;;AAEDqB,MAAM,CAACC,OAAP,GAAiBzB,KAAjB","sourcesContent":["// Packages\r\nvar retrier = require('retry');\r\n\r\nfunction retry(fn, opts) {\r\n  function run(resolve, reject) {\r\n    var options = opts || {};\r\n    var op;\r\n\r\n    // Default `randomize` to true\r\n    if (!('randomize' in options)) {\r\n      options.randomize = true;\r\n    }\r\n\r\n    op = retrier.operation(options);\r\n\r\n    // We allow the user to abort retrying\r\n    // this makes sense in the cases where\r\n    // knowledge is obtained that retrying\r\n    // would be futile (e.g.: auth errors)\r\n\r\n    function bail(err) {\r\n      reject(err || new Error('Aborted'));\r\n    }\r\n\r\n    function onError(err, num) {\r\n      if (err.bail) {\r\n        bail(err);\r\n        return;\r\n      }\r\n\r\n      if (!op.retry(err)) {\r\n        reject(op.mainError());\r\n      } else if (options.onRetry) {\r\n        options.onRetry(err, num);\r\n      }\r\n    }\r\n\r\n    function runAttempt(num) {\r\n      var val;\r\n\r\n      try {\r\n        val = fn(bail, num);\r\n      } catch (err) {\r\n        onError(err, num);\r\n        return;\r\n      }\r\n\r\n      Promise.resolve(val)\r\n        .then(resolve)\r\n        .catch(function catchIt(err) {\r\n          onError(err, num);\r\n        });\r\n    }\r\n\r\n    op.attempt(runAttempt);\r\n  }\r\n\r\n  return new Promise(run);\r\n}\r\n\r\nmodule.exports = retry;\r\n"]},"metadata":{},"sourceType":"script"}