{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport equals from \"./equals.js\";\nimport map from \"./map.js\";\nimport where from \"./where.js\";\n/**\r\n * Takes a spec object and a test object; returns true if the test satisfies\r\n * the spec, false otherwise. An object satisfies the spec if, for each of the\r\n * spec's own properties, accessing that property of the object gives the same\r\n * value (in [`R.equals`](#equals) terms) as accessing that property of the\r\n * spec.\r\n *\r\n * `whereEq` is a specialization of [`where`](#where).\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.14.0\r\n * @category Object\r\n * @sig {String: *} -> {String: *} -> Boolean\r\n * @param {Object} spec\r\n * @param {Object} testObj\r\n * @return {Boolean}\r\n * @see R.propEq, R.where\r\n * @example\r\n *\r\n *      // pred :: Object -> Boolean\r\n *      const pred = R.whereEq({a: 1, b: 2});\r\n *\r\n *      pred({a: 1});              //=> false\r\n *      pred({a: 1, b: 2});        //=> true\r\n *      pred({a: 1, b: 2, c: 3});  //=> true\r\n *      pred({a: 1, b: 1});        //=> false\r\n */\n\nvar whereEq = /*#__PURE__*/_curry2(function whereEq(spec, testObj) {\n  return where(map(equals, spec), testObj);\n});\n\nexport default whereEq;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/whereEq.js"],"names":["_curry2","equals","map","where","whereEq","spec","testObj"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,OAAO,GACX,aACAJ,OAAO,CAAC,SAASI,OAAT,CAAiBC,IAAjB,EAAuBC,OAAvB,EAAgC;AACtC,SAAOH,KAAK,CAACD,GAAG,CAACD,MAAD,EAASI,IAAT,CAAJ,EAAoBC,OAApB,CAAZ;AACD,CAFM,CAFP;;AAMA,eAAeF,OAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\nimport equals from \"./equals.js\";\r\nimport map from \"./map.js\";\r\nimport where from \"./where.js\";\r\n/**\r\n * Takes a spec object and a test object; returns true if the test satisfies\r\n * the spec, false otherwise. An object satisfies the spec if, for each of the\r\n * spec's own properties, accessing that property of the object gives the same\r\n * value (in [`R.equals`](#equals) terms) as accessing that property of the\r\n * spec.\r\n *\r\n * `whereEq` is a specialization of [`where`](#where).\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.14.0\r\n * @category Object\r\n * @sig {String: *} -> {String: *} -> Boolean\r\n * @param {Object} spec\r\n * @param {Object} testObj\r\n * @return {Boolean}\r\n * @see R.propEq, R.where\r\n * @example\r\n *\r\n *      // pred :: Object -> Boolean\r\n *      const pred = R.whereEq({a: 1, b: 2});\r\n *\r\n *      pred({a: 1});              //=> false\r\n *      pred({a: 1, b: 2});        //=> true\r\n *      pred({a: 1, b: 2, c: 3});  //=> true\r\n *      pred({a: 1, b: 1});        //=> false\r\n */\r\n\r\nvar whereEq =\r\n/*#__PURE__*/\r\n_curry2(function whereEq(spec, testObj) {\r\n  return where(map(equals, spec), testObj);\r\n});\r\n\r\nexport default whereEq;"]},"metadata":{},"sourceType":"module"}