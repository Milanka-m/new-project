{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport slice from \"./slice.js\";\n/**\r\n * Returns a new list containing the last `n` elements of a given list, passing\r\n * each value to the supplied predicate function, and terminating when the\r\n * predicate function returns `false`. Excludes the element that caused the\r\n * predicate function to fail. The predicate function is passed one argument:\r\n * *(value)*.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.16.0\r\n * @category List\r\n * @sig (a -> Boolean) -> [a] -> [a]\r\n * @sig (a -> Boolean) -> String -> String\r\n * @param {Function} fn The function called per iteration.\r\n * @param {Array} xs The collection to iterate over.\r\n * @return {Array} A new array.\r\n * @see R.dropLastWhile, R.addIndex\r\n * @example\r\n *\r\n *      const isNotOne = x => x !== 1;\r\n *\r\n *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]\r\n *\r\n *      R.takeLastWhile(x => x !== 'R' , 'Ramda'); //=> 'amda'\r\n */\n\nvar takeLastWhile = /*#__PURE__*/_curry2(function takeLastWhile(fn, xs) {\n  var idx = xs.length - 1;\n\n  while (idx >= 0 && fn(xs[idx])) {\n    idx -= 1;\n  }\n\n  return slice(idx + 1, Infinity, xs);\n});\n\nexport default takeLastWhile;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/takeLastWhile.js"],"names":["_curry2","slice","takeLastWhile","fn","xs","idx","length","Infinity"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,aAAa,GACjB,aACAF,OAAO,CAAC,SAASE,aAAT,CAAuBC,EAAvB,EAA2BC,EAA3B,EAA+B;AACrC,MAAIC,GAAG,GAAGD,EAAE,CAACE,MAAH,GAAY,CAAtB;;AAEA,SAAOD,GAAG,IAAI,CAAP,IAAYF,EAAE,CAACC,EAAE,CAACC,GAAD,CAAH,CAArB,EAAgC;AAC9BA,IAAAA,GAAG,IAAI,CAAP;AACD;;AAED,SAAOJ,KAAK,CAACI,GAAG,GAAG,CAAP,EAAUE,QAAV,EAAoBH,EAApB,CAAZ;AACD,CARM,CAFP;;AAYA,eAAeF,aAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\nimport slice from \"./slice.js\";\r\n/**\r\n * Returns a new list containing the last `n` elements of a given list, passing\r\n * each value to the supplied predicate function, and terminating when the\r\n * predicate function returns `false`. Excludes the element that caused the\r\n * predicate function to fail. The predicate function is passed one argument:\r\n * *(value)*.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.16.0\r\n * @category List\r\n * @sig (a -> Boolean) -> [a] -> [a]\r\n * @sig (a -> Boolean) -> String -> String\r\n * @param {Function} fn The function called per iteration.\r\n * @param {Array} xs The collection to iterate over.\r\n * @return {Array} A new array.\r\n * @see R.dropLastWhile, R.addIndex\r\n * @example\r\n *\r\n *      const isNotOne = x => x !== 1;\r\n *\r\n *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]\r\n *\r\n *      R.takeLastWhile(x => x !== 'R' , 'Ramda'); //=> 'amda'\r\n */\r\n\r\nvar takeLastWhile =\r\n/*#__PURE__*/\r\n_curry2(function takeLastWhile(fn, xs) {\r\n  var idx = xs.length - 1;\r\n\r\n  while (idx >= 0 && fn(xs[idx])) {\r\n    idx -= 1;\r\n  }\r\n\r\n  return slice(idx + 1, Infinity, xs);\r\n});\r\n\r\nexport default takeLastWhile;"]},"metadata":{},"sourceType":"module"}