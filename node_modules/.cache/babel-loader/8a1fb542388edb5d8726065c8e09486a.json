{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport _map from \"./internal/_map.js\";\nimport curryN from \"./curryN.js\";\nimport max from \"./max.js\";\nimport pluck from \"./pluck.js\";\nimport reduce from \"./reduce.js\";\n/**\r\n * Accepts a converging function and a list of branching functions and returns\r\n * a new function. The arity of the new function is the same as the arity of\r\n * the longest branching function. When invoked, this new function is applied\r\n * to some arguments, and each branching function is applied to those same\r\n * arguments. The results of each branching function are passed as arguments\r\n * to the converging function to produce the return value.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.4.2\r\n * @category Function\r\n * @sig ((x1, x2, ...) -> z) -> [((a, b, ...) -> x1), ((a, b, ...) -> x2), ...] -> (a -> b -> ... -> z)\r\n * @param {Function} after A function. `after` will be invoked with the return values of\r\n *        `fn1` and `fn2` as its arguments.\r\n * @param {Array} functions A list of functions.\r\n * @return {Function} A new function.\r\n * @see R.useWith\r\n * @example\r\n *\r\n *      const average = R.converge(R.divide, [R.sum, R.length])\r\n *      average([1, 2, 3, 4, 5, 6, 7]) //=> 4\r\n *\r\n *      const strangeConcat = R.converge(R.concat, [R.toUpper, R.toLower])\r\n *      strangeConcat(\"Yodel\") //=> \"YODELyodel\"\r\n *\r\n * @symb R.converge(f, [g, h])(a, b) = f(g(a, b), h(a, b))\r\n */\n\nvar converge = /*#__PURE__*/_curry2(function converge(after, fns) {\n  return curryN(reduce(max, 0, pluck('length', fns)), function () {\n    var args = arguments;\n    var context = this;\n    return after.apply(context, _map(function (fn) {\n      return fn.apply(context, args);\n    }, fns));\n  });\n});\n\nexport default converge;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/converge.js"],"names":["_curry2","_map","curryN","max","pluck","reduce","converge","after","fns","args","arguments","context","apply","fn"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,QAAQ,GACZ,aACAN,OAAO,CAAC,SAASM,QAAT,CAAkBC,KAAlB,EAAyBC,GAAzB,EAA8B;AACpC,SAAON,MAAM,CAACG,MAAM,CAACF,GAAD,EAAM,CAAN,EAASC,KAAK,CAAC,QAAD,EAAWI,GAAX,CAAd,CAAP,EAAuC,YAAY;AAC9D,QAAIC,IAAI,GAAGC,SAAX;AACA,QAAIC,OAAO,GAAG,IAAd;AACA,WAAOJ,KAAK,CAACK,KAAN,CAAYD,OAAZ,EAAqBV,IAAI,CAAC,UAAUY,EAAV,EAAc;AAC7C,aAAOA,EAAE,CAACD,KAAH,CAASD,OAAT,EAAkBF,IAAlB,CAAP;AACD,KAF+B,EAE7BD,GAF6B,CAAzB,CAAP;AAGD,GANY,CAAb;AAOD,CARM,CAFP;;AAYA,eAAeF,QAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\nimport _map from \"./internal/_map.js\";\r\nimport curryN from \"./curryN.js\";\r\nimport max from \"./max.js\";\r\nimport pluck from \"./pluck.js\";\r\nimport reduce from \"./reduce.js\";\r\n/**\r\n * Accepts a converging function and a list of branching functions and returns\r\n * a new function. The arity of the new function is the same as the arity of\r\n * the longest branching function. When invoked, this new function is applied\r\n * to some arguments, and each branching function is applied to those same\r\n * arguments. The results of each branching function are passed as arguments\r\n * to the converging function to produce the return value.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.4.2\r\n * @category Function\r\n * @sig ((x1, x2, ...) -> z) -> [((a, b, ...) -> x1), ((a, b, ...) -> x2), ...] -> (a -> b -> ... -> z)\r\n * @param {Function} after A function. `after` will be invoked with the return values of\r\n *        `fn1` and `fn2` as its arguments.\r\n * @param {Array} functions A list of functions.\r\n * @return {Function} A new function.\r\n * @see R.useWith\r\n * @example\r\n *\r\n *      const average = R.converge(R.divide, [R.sum, R.length])\r\n *      average([1, 2, 3, 4, 5, 6, 7]) //=> 4\r\n *\r\n *      const strangeConcat = R.converge(R.concat, [R.toUpper, R.toLower])\r\n *      strangeConcat(\"Yodel\") //=> \"YODELyodel\"\r\n *\r\n * @symb R.converge(f, [g, h])(a, b) = f(g(a, b), h(a, b))\r\n */\r\n\r\nvar converge =\r\n/*#__PURE__*/\r\n_curry2(function converge(after, fns) {\r\n  return curryN(reduce(max, 0, pluck('length', fns)), function () {\r\n    var args = arguments;\r\n    var context = this;\r\n    return after.apply(context, _map(function (fn) {\r\n      return fn.apply(context, args);\r\n    }, fns));\r\n  });\r\n});\r\n\r\nexport default converge;"]},"metadata":{},"sourceType":"module"}