{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport _assertPromise from \"./internal/_assertPromise.js\";\n/**\r\n * Returns the result of applying the onSuccess function to the value inside\r\n * a successfully resolved promise. This is useful for working with promises\r\n * inside function compositions.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.27.1\r\n * @category Function\r\n * @sig (a -> b) -> (Promise e a) -> (Promise e b)\r\n * @sig (a -> (Promise e b)) -> (Promise e a) -> (Promise e b)\r\n * @param {Function} onSuccess The function to apply. Can return a value or a promise of a value.\r\n * @param {Promise} p\r\n * @return {Promise} The result of calling `p.then(onSuccess)`\r\n * @see R.otherwise\r\n * @example\r\n *\r\n *      var makeQuery = (email) => ({ query: { email }});\r\n *\r\n *      //getMemberName :: String -> Promise ({firstName, lastName})\r\n *      var getMemberName = R.pipe(\r\n *        makeQuery,\r\n *        fetchMember,\r\n *        R.andThen(R.pick(['firstName', 'lastName']))\r\n *      );\r\n */\n\nvar andThen = /*#__PURE__*/_curry2(function andThen(f, p) {\n  _assertPromise('andThen', p);\n\n  return p.then(f);\n});\n\nexport default andThen;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/andThen.js"],"names":["_curry2","_assertPromise","andThen","f","p","then"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,OAAO,GACX,aACAF,OAAO,CAAC,SAASE,OAAT,CAAiBC,CAAjB,EAAoBC,CAApB,EAAuB;AAC7BH,EAAAA,cAAc,CAAC,SAAD,EAAYG,CAAZ,CAAd;;AAEA,SAAOA,CAAC,CAACC,IAAF,CAAOF,CAAP,CAAP;AACD,CAJM,CAFP;;AAQA,eAAeD,OAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\nimport _assertPromise from \"./internal/_assertPromise.js\";\r\n/**\r\n * Returns the result of applying the onSuccess function to the value inside\r\n * a successfully resolved promise. This is useful for working with promises\r\n * inside function compositions.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.27.1\r\n * @category Function\r\n * @sig (a -> b) -> (Promise e a) -> (Promise e b)\r\n * @sig (a -> (Promise e b)) -> (Promise e a) -> (Promise e b)\r\n * @param {Function} onSuccess The function to apply. Can return a value or a promise of a value.\r\n * @param {Promise} p\r\n * @return {Promise} The result of calling `p.then(onSuccess)`\r\n * @see R.otherwise\r\n * @example\r\n *\r\n *      var makeQuery = (email) => ({ query: { email }});\r\n *\r\n *      //getMemberName :: String -> Promise ({firstName, lastName})\r\n *      var getMemberName = R.pipe(\r\n *        makeQuery,\r\n *        fetchMember,\r\n *        R.andThen(R.pick(['firstName', 'lastName']))\r\n *      );\r\n */\r\n\r\nvar andThen =\r\n/*#__PURE__*/\r\n_curry2(function andThen(f, p) {\r\n  _assertPromise('andThen', p);\r\n\r\n  return p.then(f);\r\n});\r\n\r\nexport default andThen;"]},"metadata":{},"sourceType":"module"}