{"ast":null,"code":"import curryN from \"./curryN.js\";\nimport _curry1 from \"./internal/_curry1.js\";\n/**\r\n * Creates a thunk out of a function. A thunk delays a calculation until\r\n * its result is needed, providing lazy evaluation of arguments.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.26.0\r\n * @category Function\r\n * @sig ((a, b, ..., j) -> k) -> (a, b, ..., j) -> (() -> k)\r\n * @param {Function} fn A function to wrap in a thunk\r\n * @return {Function} Expects arguments for `fn` and returns a new function\r\n *  that, when called, applies those arguments to `fn`.\r\n * @see R.partial, R.partialRight\r\n * @example\r\n *\r\n *      R.thunkify(R.identity)(42)(); //=> 42\r\n *      R.thunkify((a, b) => a + b)(25, 17)(); //=> 42\r\n */\n\nvar thunkify = /*#__PURE__*/_curry1(function thunkify(fn) {\n  return curryN(fn.length, function createThunk() {\n    var fnArgs = arguments;\n    return function invokeThunk() {\n      return fn.apply(this, fnArgs);\n    };\n  });\n});\n\nexport default thunkify;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/thunkify.js"],"names":["curryN","_curry1","thunkify","fn","length","createThunk","fnArgs","arguments","invokeThunk","apply"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,QAAQ,GACZ,aACAD,OAAO,CAAC,SAASC,QAAT,CAAkBC,EAAlB,EAAsB;AAC5B,SAAOH,MAAM,CAACG,EAAE,CAACC,MAAJ,EAAY,SAASC,WAAT,GAAuB;AAC9C,QAAIC,MAAM,GAAGC,SAAb;AACA,WAAO,SAASC,WAAT,GAAuB;AAC5B,aAAOL,EAAE,CAACM,KAAH,CAAS,IAAT,EAAeH,MAAf,CAAP;AACD,KAFD;AAGD,GALY,CAAb;AAMD,CAPM,CAFP;;AAWA,eAAeJ,QAAf","sourcesContent":["import curryN from \"./curryN.js\";\r\nimport _curry1 from \"./internal/_curry1.js\";\r\n/**\r\n * Creates a thunk out of a function. A thunk delays a calculation until\r\n * its result is needed, providing lazy evaluation of arguments.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.26.0\r\n * @category Function\r\n * @sig ((a, b, ..., j) -> k) -> (a, b, ..., j) -> (() -> k)\r\n * @param {Function} fn A function to wrap in a thunk\r\n * @return {Function} Expects arguments for `fn` and returns a new function\r\n *  that, when called, applies those arguments to `fn`.\r\n * @see R.partial, R.partialRight\r\n * @example\r\n *\r\n *      R.thunkify(R.identity)(42)(); //=> 42\r\n *      R.thunkify((a, b) => a + b)(25, 17)(); //=> 42\r\n */\r\n\r\nvar thunkify =\r\n/*#__PURE__*/\r\n_curry1(function thunkify(fn) {\r\n  return curryN(fn.length, function createThunk() {\r\n    var fnArgs = arguments;\r\n    return function invokeThunk() {\r\n      return fn.apply(this, fnArgs);\r\n    };\r\n  });\r\n});\r\n\r\nexport default thunkify;"]},"metadata":{},"sourceType":"module"}