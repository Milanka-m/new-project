{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport _isArray from \"./internal/_isArray.js\";\nimport _isFunction from \"./internal/_isFunction.js\";\nimport _isString from \"./internal/_isString.js\";\nimport toString from \"./toString.js\";\n/**\r\n * Returns the result of concatenating the given lists or strings.\r\n *\r\n * Note: `R.concat` expects both arguments to be of the same type,\r\n * unlike the native `Array.prototype.concat` method. It will throw\r\n * an error if you `concat` an Array with a non-Array value.\r\n *\r\n * Dispatches to the `concat` method of the first argument, if present.\r\n * Can also concatenate two members of a [fantasy-land\r\n * compatible semigroup](https://github.com/fantasyland/fantasy-land#semigroup).\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category List\r\n * @sig [a] -> [a] -> [a]\r\n * @sig String -> String -> String\r\n * @param {Array|String} firstList The first list\r\n * @param {Array|String} secondList The second list\r\n * @return {Array|String} A list consisting of the elements of `firstList` followed by the elements of\r\n * `secondList`.\r\n *\r\n * @example\r\n *\r\n *      R.concat('ABC', 'DEF'); // 'ABCDEF'\r\n *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\r\n *      R.concat([], []); //=> []\r\n */\n\nvar concat = /*#__PURE__*/_curry2(function concat(a, b) {\n  if (_isArray(a)) {\n    if (_isArray(b)) {\n      return a.concat(b);\n    }\n\n    throw new TypeError(toString(b) + ' is not an array');\n  }\n\n  if (_isString(a)) {\n    if (_isString(b)) {\n      return a + b;\n    }\n\n    throw new TypeError(toString(b) + ' is not a string');\n  }\n\n  if (a != null && _isFunction(a['fantasy-land/concat'])) {\n    return a['fantasy-land/concat'](b);\n  }\n\n  if (a != null && _isFunction(a.concat)) {\n    return a.concat(b);\n  }\n\n  throw new TypeError(toString(a) + ' does not have a method named \"concat\" or \"fantasy-land/concat\"');\n});\n\nexport default concat;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/concat.js"],"names":["_curry2","_isArray","_isFunction","_isString","toString","concat","a","b","TypeError"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,MAAM,GACV,aACAL,OAAO,CAAC,SAASK,MAAT,CAAgBC,CAAhB,EAAmBC,CAAnB,EAAsB;AAC5B,MAAIN,QAAQ,CAACK,CAAD,CAAZ,EAAiB;AACf,QAAIL,QAAQ,CAACM,CAAD,CAAZ,EAAiB;AACf,aAAOD,CAAC,CAACD,MAAF,CAASE,CAAT,CAAP;AACD;;AAED,UAAM,IAAIC,SAAJ,CAAcJ,QAAQ,CAACG,CAAD,CAAR,GAAc,kBAA5B,CAAN;AACD;;AAED,MAAIJ,SAAS,CAACG,CAAD,CAAb,EAAkB;AAChB,QAAIH,SAAS,CAACI,CAAD,CAAb,EAAkB;AAChB,aAAOD,CAAC,GAAGC,CAAX;AACD;;AAED,UAAM,IAAIC,SAAJ,CAAcJ,QAAQ,CAACG,CAAD,CAAR,GAAc,kBAA5B,CAAN;AACD;;AAED,MAAID,CAAC,IAAI,IAAL,IAAaJ,WAAW,CAACI,CAAC,CAAC,qBAAD,CAAF,CAA5B,EAAwD;AACtD,WAAOA,CAAC,CAAC,qBAAD,CAAD,CAAyBC,CAAzB,CAAP;AACD;;AAED,MAAID,CAAC,IAAI,IAAL,IAAaJ,WAAW,CAACI,CAAC,CAACD,MAAH,CAA5B,EAAwC;AACtC,WAAOC,CAAC,CAACD,MAAF,CAASE,CAAT,CAAP;AACD;;AAED,QAAM,IAAIC,SAAJ,CAAcJ,QAAQ,CAACE,CAAD,CAAR,GAAc,iEAA5B,CAAN;AACD,CA1BM,CAFP;;AA8BA,eAAeD,MAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\nimport _isArray from \"./internal/_isArray.js\";\r\nimport _isFunction from \"./internal/_isFunction.js\";\r\nimport _isString from \"./internal/_isString.js\";\r\nimport toString from \"./toString.js\";\r\n/**\r\n * Returns the result of concatenating the given lists or strings.\r\n *\r\n * Note: `R.concat` expects both arguments to be of the same type,\r\n * unlike the native `Array.prototype.concat` method. It will throw\r\n * an error if you `concat` an Array with a non-Array value.\r\n *\r\n * Dispatches to the `concat` method of the first argument, if present.\r\n * Can also concatenate two members of a [fantasy-land\r\n * compatible semigroup](https://github.com/fantasyland/fantasy-land#semigroup).\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category List\r\n * @sig [a] -> [a] -> [a]\r\n * @sig String -> String -> String\r\n * @param {Array|String} firstList The first list\r\n * @param {Array|String} secondList The second list\r\n * @return {Array|String} A list consisting of the elements of `firstList` followed by the elements of\r\n * `secondList`.\r\n *\r\n * @example\r\n *\r\n *      R.concat('ABC', 'DEF'); // 'ABCDEF'\r\n *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\r\n *      R.concat([], []); //=> []\r\n */\r\n\r\nvar concat =\r\n/*#__PURE__*/\r\n_curry2(function concat(a, b) {\r\n  if (_isArray(a)) {\r\n    if (_isArray(b)) {\r\n      return a.concat(b);\r\n    }\r\n\r\n    throw new TypeError(toString(b) + ' is not an array');\r\n  }\r\n\r\n  if (_isString(a)) {\r\n    if (_isString(b)) {\r\n      return a + b;\r\n    }\r\n\r\n    throw new TypeError(toString(b) + ' is not a string');\r\n  }\r\n\r\n  if (a != null && _isFunction(a['fantasy-land/concat'])) {\r\n    return a['fantasy-land/concat'](b);\r\n  }\r\n\r\n  if (a != null && _isFunction(a.concat)) {\r\n    return a.concat(b);\r\n  }\r\n\r\n  throw new TypeError(toString(a) + ' does not have a method named \"concat\" or \"fantasy-land/concat\"');\r\n});\r\n\r\nexport default concat;"]},"metadata":{},"sourceType":"module"}