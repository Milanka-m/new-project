{"ast":null,"code":"import curry from \"./curry.js\";\n/**\r\n * Returns the result of calling its first argument with the remaining\r\n * arguments. This is occasionally useful as a converging function for\r\n * [`R.converge`](#converge): the first branch can produce a function while the\r\n * remaining branches produce values to be passed to that function as its\r\n * arguments.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.9.0\r\n * @category Function\r\n * @sig (*... -> a),*... -> a\r\n * @param {Function} fn The function to apply to the remaining arguments.\r\n * @param {...*} args Any number of positional arguments.\r\n * @return {*}\r\n * @see R.apply\r\n * @example\r\n *\r\n *      R.call(R.add, 1, 2); //=> 3\r\n *\r\n *      const indentN = R.pipe(R.repeat(' '),\r\n *                           R.join(''),\r\n *                           R.replace(/^(?!$)/gm));\r\n *\r\n *      const format = R.converge(R.call, [\r\n *                                  R.pipe(R.prop('indent'), indentN),\r\n *                                  R.prop('value')\r\n *                              ]);\r\n *\r\n *      format({indent: 2, value: 'foo\\nbar\\nbaz\\n'}); //=> '  foo\\n  bar\\n  baz\\n'\r\n * @symb R.call(f, a, b) = f(a, b)\r\n */\n\nvar call = /*#__PURE__*/curry(function call(fn) {\n  return fn.apply(this, Array.prototype.slice.call(arguments, 1));\n});\nexport default call;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/call.js"],"names":["curry","call","fn","apply","Array","prototype","slice","arguments"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,IAAI,GACR,aACAD,KAAK,CAAC,SAASC,IAAT,CAAcC,EAAd,EAAkB;AACtB,SAAOA,EAAE,CAACC,KAAH,CAAS,IAAT,EAAeC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBL,IAAtB,CAA2BM,SAA3B,EAAsC,CAAtC,CAAf,CAAP;AACD,CAFI,CAFL;AAKA,eAAeN,IAAf","sourcesContent":["import curry from \"./curry.js\";\r\n/**\r\n * Returns the result of calling its first argument with the remaining\r\n * arguments. This is occasionally useful as a converging function for\r\n * [`R.converge`](#converge): the first branch can produce a function while the\r\n * remaining branches produce values to be passed to that function as its\r\n * arguments.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.9.0\r\n * @category Function\r\n * @sig (*... -> a),*... -> a\r\n * @param {Function} fn The function to apply to the remaining arguments.\r\n * @param {...*} args Any number of positional arguments.\r\n * @return {*}\r\n * @see R.apply\r\n * @example\r\n *\r\n *      R.call(R.add, 1, 2); //=> 3\r\n *\r\n *      const indentN = R.pipe(R.repeat(' '),\r\n *                           R.join(''),\r\n *                           R.replace(/^(?!$)/gm));\r\n *\r\n *      const format = R.converge(R.call, [\r\n *                                  R.pipe(R.prop('indent'), indentN),\r\n *                                  R.prop('value')\r\n *                              ]);\r\n *\r\n *      format({indent: 2, value: 'foo\\nbar\\nbaz\\n'}); //=> '  foo\\n  bar\\n  baz\\n'\r\n * @symb R.call(f, a, b) = f(a, b)\r\n */\r\n\r\nvar call =\r\n/*#__PURE__*/\r\ncurry(function call(fn) {\r\n  return fn.apply(this, Array.prototype.slice.call(arguments, 1));\r\n});\r\nexport default call;"]},"metadata":{},"sourceType":"module"}