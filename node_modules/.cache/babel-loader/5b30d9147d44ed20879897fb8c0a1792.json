{"ast":null,"code":"import _checkForMethod from \"./internal/_checkForMethod.js\";\nimport _curry2 from \"./internal/_curry2.js\";\n/**\r\n * Iterate over an input `list`, calling a provided function `fn` for each\r\n * element in the list.\r\n *\r\n * `fn` receives one argument: *(value)*.\r\n *\r\n * Note: `R.forEach` does not skip deleted or unassigned indices (sparse\r\n * arrays), unlike the native `Array.prototype.forEach` method. For more\r\n * details on this behavior, see:\r\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\r\n *\r\n * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns\r\n * the original array. In some libraries this function is named `each`.\r\n *\r\n * Dispatches to the `forEach` method of the second argument, if present.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.1\r\n * @category List\r\n * @sig (a -> *) -> [a] -> [a]\r\n * @param {Function} fn The function to invoke. Receives one argument, `value`.\r\n * @param {Array} list The list to iterate over.\r\n * @return {Array} The original list.\r\n * @see R.addIndex\r\n * @example\r\n *\r\n *      const printXPlusFive = x => console.log(x + 5);\r\n *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\r\n *      // logs 6\r\n *      // logs 7\r\n *      // logs 8\r\n * @symb R.forEach(f, [a, b, c]) = [a, b, c]\r\n */\n\nvar forEach = /*#__PURE__*/_curry2( /*#__PURE__*/_checkForMethod('forEach', function forEach(fn, list) {\n  var len = list.length;\n  var idx = 0;\n\n  while (idx < len) {\n    fn(list[idx]);\n    idx += 1;\n  }\n\n  return list;\n}));\n\nexport default forEach;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/forEach.js"],"names":["_checkForMethod","_curry2","forEach","fn","list","len","length","idx"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,+BAA5B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,OAAO,GACX,aACAD,OAAO,EACP,aACAD,eAAe,CAAC,SAAD,EAAY,SAASE,OAAT,CAAiBC,EAAjB,EAAqBC,IAArB,EAA2B;AACpD,MAAIC,GAAG,GAAGD,IAAI,CAACE,MAAf;AACA,MAAIC,GAAG,GAAG,CAAV;;AAEA,SAAOA,GAAG,GAAGF,GAAb,EAAkB;AAChBF,IAAAA,EAAE,CAACC,IAAI,CAACG,GAAD,CAAL,CAAF;AACAA,IAAAA,GAAG,IAAI,CAAP;AACD;;AAED,SAAOH,IAAP;AACD,CAVc,CAFR,CAFP;;AAgBA,eAAeF,OAAf","sourcesContent":["import _checkForMethod from \"./internal/_checkForMethod.js\";\r\nimport _curry2 from \"./internal/_curry2.js\";\r\n/**\r\n * Iterate over an input `list`, calling a provided function `fn` for each\r\n * element in the list.\r\n *\r\n * `fn` receives one argument: *(value)*.\r\n *\r\n * Note: `R.forEach` does not skip deleted or unassigned indices (sparse\r\n * arrays), unlike the native `Array.prototype.forEach` method. For more\r\n * details on this behavior, see:\r\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\r\n *\r\n * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns\r\n * the original array. In some libraries this function is named `each`.\r\n *\r\n * Dispatches to the `forEach` method of the second argument, if present.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.1\r\n * @category List\r\n * @sig (a -> *) -> [a] -> [a]\r\n * @param {Function} fn The function to invoke. Receives one argument, `value`.\r\n * @param {Array} list The list to iterate over.\r\n * @return {Array} The original list.\r\n * @see R.addIndex\r\n * @example\r\n *\r\n *      const printXPlusFive = x => console.log(x + 5);\r\n *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\r\n *      // logs 6\r\n *      // logs 7\r\n *      // logs 8\r\n * @symb R.forEach(f, [a, b, c]) = [a, b, c]\r\n */\r\n\r\nvar forEach =\r\n/*#__PURE__*/\r\n_curry2(\r\n/*#__PURE__*/\r\n_checkForMethod('forEach', function forEach(fn, list) {\r\n  var len = list.length;\r\n  var idx = 0;\r\n\r\n  while (idx < len) {\r\n    fn(list[idx]);\r\n    idx += 1;\r\n  }\r\n\r\n  return list;\r\n}));\r\n\r\nexport default forEach;"]},"metadata":{},"sourceType":"module"}