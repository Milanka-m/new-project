{"ast":null,"code":"import _curry1 from \"./internal/_curry1.js\";\n/**\r\n * Makes a comparator function out of a function that reports whether the first\r\n * element is less than the second.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Function\r\n * @sig ((a, b) -> Boolean) -> ((a, b) -> Number)\r\n * @param {Function} pred A predicate function of arity two which will return `true` if the first argument\r\n * is less than the second, `false` otherwise\r\n * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`\r\n * @example\r\n *\r\n *      const byAge = R.comparator((a, b) => a.age < b.age);\r\n *      const people = [\r\n *        { name: 'Emma', age: 70 },\r\n *        { name: 'Peter', age: 78 },\r\n *        { name: 'Mikhail', age: 62 },\r\n *      ];\r\n *      const peopleByIncreasingAge = R.sort(byAge, people);\r\n *        //=> [{ name: 'Mikhail', age: 62 },{ name: 'Emma', age: 70 }, { name: 'Peter', age: 78 }]\r\n */\n\nvar comparator = /*#__PURE__*/_curry1(function comparator(pred) {\n  return function (a, b) {\n    return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;\n  };\n});\n\nexport default comparator;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/comparator.js"],"names":["_curry1","comparator","pred","a","b"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,UAAU,GACd,aACAD,OAAO,CAAC,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AAChC,SAAO,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACrB,WAAOF,IAAI,CAACC,CAAD,EAAIC,CAAJ,CAAJ,GAAa,CAAC,CAAd,GAAkBF,IAAI,CAACE,CAAD,EAAID,CAAJ,CAAJ,GAAa,CAAb,GAAiB,CAA1C;AACD,GAFD;AAGD,CAJM,CAFP;;AAQA,eAAeF,UAAf","sourcesContent":["import _curry1 from \"./internal/_curry1.js\";\r\n/**\r\n * Makes a comparator function out of a function that reports whether the first\r\n * element is less than the second.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Function\r\n * @sig ((a, b) -> Boolean) -> ((a, b) -> Number)\r\n * @param {Function} pred A predicate function of arity two which will return `true` if the first argument\r\n * is less than the second, `false` otherwise\r\n * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`\r\n * @example\r\n *\r\n *      const byAge = R.comparator((a, b) => a.age < b.age);\r\n *      const people = [\r\n *        { name: 'Emma', age: 70 },\r\n *        { name: 'Peter', age: 78 },\r\n *        { name: 'Mikhail', age: 62 },\r\n *      ];\r\n *      const peopleByIncreasingAge = R.sort(byAge, people);\r\n *        //=> [{ name: 'Mikhail', age: 62 },{ name: 'Emma', age: 70 }, { name: 'Peter', age: 78 }]\r\n */\r\n\r\nvar comparator =\r\n/*#__PURE__*/\r\n_curry1(function comparator(pred) {\r\n  return function (a, b) {\r\n    return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;\r\n  };\r\n});\r\n\r\nexport default comparator;"]},"metadata":{},"sourceType":"module"}