{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport length from \"./length.js\";\nimport slice from \"./slice.js\";\n/**\r\n * Splits a given list or string at a given index.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.19.0\r\n * @category List\r\n * @sig Number -> [a] -> [[a], [a]]\r\n * @sig Number -> String -> [String, String]\r\n * @param {Number} index The index where the array/string is split.\r\n * @param {Array|String} array The array/string to be split.\r\n * @return {Array}\r\n * @example\r\n *\r\n *      R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]\r\n *      R.splitAt(5, 'hello world');      //=> ['hello', ' world']\r\n *      R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']\r\n */\n\nvar splitAt = /*#__PURE__*/_curry2(function splitAt(index, array) {\n  return [slice(0, index, array), slice(index, length(array), array)];\n});\n\nexport default splitAt;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/splitAt.js"],"names":["_curry2","length","slice","splitAt","index","array"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,OAAO,GACX,aACAH,OAAO,CAAC,SAASG,OAAT,CAAiBC,KAAjB,EAAwBC,KAAxB,EAA+B;AACrC,SAAO,CAACH,KAAK,CAAC,CAAD,EAAIE,KAAJ,EAAWC,KAAX,CAAN,EAAyBH,KAAK,CAACE,KAAD,EAAQH,MAAM,CAACI,KAAD,CAAd,EAAuBA,KAAvB,CAA9B,CAAP;AACD,CAFM,CAFP;;AAMA,eAAeF,OAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\nimport length from \"./length.js\";\r\nimport slice from \"./slice.js\";\r\n/**\r\n * Splits a given list or string at a given index.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.19.0\r\n * @category List\r\n * @sig Number -> [a] -> [[a], [a]]\r\n * @sig Number -> String -> [String, String]\r\n * @param {Number} index The index where the array/string is split.\r\n * @param {Array|String} array The array/string to be split.\r\n * @return {Array}\r\n * @example\r\n *\r\n *      R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]\r\n *      R.splitAt(5, 'hello world');      //=> ['hello', ' world']\r\n *      R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']\r\n */\r\n\r\nvar splitAt =\r\n/*#__PURE__*/\r\n_curry2(function splitAt(index, array) {\r\n  return [slice(0, index, array), slice(index, length(array), array)];\r\n});\r\n\r\nexport default splitAt;"]},"metadata":{},"sourceType":"module"}