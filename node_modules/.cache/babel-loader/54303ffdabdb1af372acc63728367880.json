{"ast":null,"code":"import pipeP from \"./pipeP.js\";\nimport reverse from \"./reverse.js\";\n/**\r\n * Performs right-to-left composition of one or more Promise-returning\r\n * functions. The last arguments may have any arity; the remaining\r\n * arguments must be unary.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.10.0\r\n * @category Function\r\n * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)\r\n * @param {...Function} functions The functions to compose\r\n * @return {Function}\r\n * @see R.pipeP\r\n * @deprecated since v0.26.0\r\n * @example\r\n *\r\n *      const db = {\r\n *        users: {\r\n *          JOE: {\r\n *            name: 'Joe',\r\n *            followers: ['STEVE', 'SUZY']\r\n *          }\r\n *        }\r\n *      }\r\n *\r\n *      // We'll pretend to do a db lookup which returns a promise\r\n *      const lookupUser = (userId) => Promise.resolve(db.users[userId])\r\n *      const lookupFollowers = (user) => Promise.resolve(user.followers)\r\n *      lookupUser('JOE').then(lookupFollowers)\r\n *\r\n *      //  followersForUser :: String -> Promise [UserId]\r\n *      const followersForUser = R.composeP(lookupFollowers, lookupUser);\r\n *      followersForUser('JOE').then(followers => console.log('Followers:', followers))\r\n *      // Followers: [\"STEVE\",\"SUZY\"]\r\n */\n\nexport default function composeP() {\n  if (arguments.length === 0) {\n    throw new Error('composeP requires at least one argument');\n  }\n\n  return pipeP.apply(this, reverse(arguments));\n}","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/composeP.js"],"names":["pipeP","reverse","composeP","arguments","length","Error","apply"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,QAAT,GAAoB;AACjC,MAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAED,SAAOL,KAAK,CAACM,KAAN,CAAY,IAAZ,EAAkBL,OAAO,CAACE,SAAD,CAAzB,CAAP;AACD","sourcesContent":["import pipeP from \"./pipeP.js\";\r\nimport reverse from \"./reverse.js\";\r\n/**\r\n * Performs right-to-left composition of one or more Promise-returning\r\n * functions. The last arguments may have any arity; the remaining\r\n * arguments must be unary.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.10.0\r\n * @category Function\r\n * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)\r\n * @param {...Function} functions The functions to compose\r\n * @return {Function}\r\n * @see R.pipeP\r\n * @deprecated since v0.26.0\r\n * @example\r\n *\r\n *      const db = {\r\n *        users: {\r\n *          JOE: {\r\n *            name: 'Joe',\r\n *            followers: ['STEVE', 'SUZY']\r\n *          }\r\n *        }\r\n *      }\r\n *\r\n *      // We'll pretend to do a db lookup which returns a promise\r\n *      const lookupUser = (userId) => Promise.resolve(db.users[userId])\r\n *      const lookupFollowers = (user) => Promise.resolve(user.followers)\r\n *      lookupUser('JOE').then(lookupFollowers)\r\n *\r\n *      //  followersForUser :: String -> Promise [UserId]\r\n *      const followersForUser = R.composeP(lookupFollowers, lookupUser);\r\n *      followersForUser('JOE').then(followers => console.log('Followers:', followers))\r\n *      // Followers: [\"STEVE\",\"SUZY\"]\r\n */\r\n\r\nexport default function composeP() {\r\n  if (arguments.length === 0) {\r\n    throw new Error('composeP requires at least one argument');\r\n  }\r\n\r\n  return pipeP.apply(this, reverse(arguments));\r\n}"]},"metadata":{},"sourceType":"module"}