{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport _isFunction from \"./internal/_isFunction.js\";\nimport lift from \"./lift.js\";\nimport or from \"./or.js\";\n/**\r\n * A function wrapping calls to the two functions in an `||` operation,\r\n * returning the result of the first function if it is truth-y and the result\r\n * of the second function otherwise. Note that this is short-circuited,\r\n * meaning that the second function will not be invoked if the first returns a\r\n * truth-y value.\r\n *\r\n * In addition to functions, `R.either` also accepts any fantasy-land compatible\r\n * applicative functor.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.12.0\r\n * @category Logic\r\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\r\n * @param {Function} f a predicate\r\n * @param {Function} g another predicate\r\n * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.\r\n * @see R.or\r\n * @example\r\n *\r\n *      const gt10 = x => x > 10;\r\n *      const even = x => x % 2 === 0;\r\n *      const f = R.either(gt10, even);\r\n *      f(101); //=> true\r\n *      f(8); //=> true\r\n *\r\n *      R.either(Maybe.Just(false), Maybe.Just(55)); // => Maybe.Just(55)\r\n *      R.either([false, false, 'a'], [11]) // => [11, 11, \"a\"]\r\n */\n\nvar either = /*#__PURE__*/_curry2(function either(f, g) {\n  return _isFunction(f) ? function _either() {\n    return f.apply(this, arguments) || g.apply(this, arguments);\n  } : lift(or)(f, g);\n});\n\nexport default either;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/either.js"],"names":["_curry2","_isFunction","lift","or","either","f","g","_either","apply","arguments"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,EAAP,MAAe,SAAf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,MAAM,GACV,aACAJ,OAAO,CAAC,SAASI,MAAT,CAAgBC,CAAhB,EAAmBC,CAAnB,EAAsB;AAC5B,SAAOL,WAAW,CAACI,CAAD,CAAX,GAAiB,SAASE,OAAT,GAAmB;AACzC,WAAOF,CAAC,CAACG,KAAF,CAAQ,IAAR,EAAcC,SAAd,KAA4BH,CAAC,CAACE,KAAF,CAAQ,IAAR,EAAcC,SAAd,CAAnC;AACD,GAFM,GAEHP,IAAI,CAACC,EAAD,CAAJ,CAASE,CAAT,EAAYC,CAAZ,CAFJ;AAGD,CAJM,CAFP;;AAQA,eAAeF,MAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\nimport _isFunction from \"./internal/_isFunction.js\";\r\nimport lift from \"./lift.js\";\r\nimport or from \"./or.js\";\r\n/**\r\n * A function wrapping calls to the two functions in an `||` operation,\r\n * returning the result of the first function if it is truth-y and the result\r\n * of the second function otherwise. Note that this is short-circuited,\r\n * meaning that the second function will not be invoked if the first returns a\r\n * truth-y value.\r\n *\r\n * In addition to functions, `R.either` also accepts any fantasy-land compatible\r\n * applicative functor.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.12.0\r\n * @category Logic\r\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\r\n * @param {Function} f a predicate\r\n * @param {Function} g another predicate\r\n * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.\r\n * @see R.or\r\n * @example\r\n *\r\n *      const gt10 = x => x > 10;\r\n *      const even = x => x % 2 === 0;\r\n *      const f = R.either(gt10, even);\r\n *      f(101); //=> true\r\n *      f(8); //=> true\r\n *\r\n *      R.either(Maybe.Just(false), Maybe.Just(55)); // => Maybe.Just(55)\r\n *      R.either([false, false, 'a'], [11]) // => [11, 11, \"a\"]\r\n */\r\n\r\nvar either =\r\n/*#__PURE__*/\r\n_curry2(function either(f, g) {\r\n  return _isFunction(f) ? function _either() {\r\n    return f.apply(this, arguments) || g.apply(this, arguments);\r\n  } : lift(or)(f, g);\r\n});\r\n\r\nexport default either;"]},"metadata":{},"sourceType":"module"}