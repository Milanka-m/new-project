{"ast":null,"code":"var _createForOfIteratorHelper = require(\"D:\\\\Lianok\\\\dev\\\\new-project\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\createForOfIteratorHelper.js\").default;\n\nvar Range = require('../classes/range.js');\n\nvar Comparator = require('../classes/comparator.js');\n\nvar ANY = Comparator.ANY;\n\nvar satisfies = require('../functions/satisfies.js');\n\nvar compare = require('../functions/compare.js'); // Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:\n// - Every simple range `r1, r2, ...` is a null set, OR\n// - Every simple range `r1, r2, ...` which is not a null set is a subset of\n//   some `R1, R2, ...`\n//\n// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:\n// - If c is only the ANY comparator\n//   - If C is only the ANY comparator, return true\n//   - Else if in prerelease mode, return false\n//   - else replace c with `[>=0.0.0]`\n// - If C is only the ANY comparator\n//   - if in prerelease mode, return true\n//   - else replace C with `[>=0.0.0]`\n// - Let EQ be the set of = comparators in c\n// - If EQ is more than one, return true (null set)\n// - Let GT be the highest > or >= comparator in c\n// - Let LT be the lowest < or <= comparator in c\n// - If GT and LT, and GT.semver > LT.semver, return true (null set)\n// - If any C is a = range, and GT or LT are set, return false\n// - If EQ\n//   - If GT, and EQ does not satisfy GT, return true (null set)\n//   - If LT, and EQ does not satisfy LT, return true (null set)\n//   - If EQ satisfies every C, return true\n//   - Else return false\n// - If GT\n//   - If GT.semver is lower than any > or >= comp in C, return false\n//   - If GT is >=, and GT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the GT.semver tuple, return false\n// - If LT\n//   - If LT.semver is greater than any < or <= comp in C, return false\n//   - If LT is <=, and LT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the LT.semver tuple, return false\n// - Else return true\n\n\nvar subset = function subset(sub, dom) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (sub === dom) return true;\n  sub = new Range(sub, options);\n  dom = new Range(dom, options);\n  var sawNonNull = false;\n\n  var _iterator = _createForOfIteratorHelper(sub.set),\n      _step;\n\n  try {\n    OUTER: for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var simpleSub = _step.value;\n\n      var _iterator2 = _createForOfIteratorHelper(dom.set),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var simpleDom = _step2.value;\n          var isSub = simpleSubset(simpleSub, simpleDom, options);\n          sawNonNull = sawNonNull || isSub !== null;\n          if (isSub) continue OUTER;\n        } // the null set is a subset of everything, but null simple ranges in\n        // a complex range should be ignored.  so if we saw a non-null range,\n        // then we know this isn't a subset, but if EVERY simple range was null,\n        // then it is a subset.\n\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      if (sawNonNull) return false;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return true;\n};\n\nvar simpleSubset = function simpleSubset(sub, dom, options) {\n  if (sub === dom) return true;\n\n  if (sub.length === 1 && sub[0].semver === ANY) {\n    if (dom.length === 1 && dom[0].semver === ANY) return true;else if (options.includePrerelease) sub = [new Comparator('>=0.0.0-0')];else sub = [new Comparator('>=0.0.0')];\n  }\n\n  if (dom.length === 1 && dom[0].semver === ANY) {\n    if (options.includePrerelease) return true;else dom = [new Comparator('>=0.0.0')];\n  }\n\n  var eqSet = new Set();\n  var gt, lt;\n\n  var _iterator3 = _createForOfIteratorHelper(sub),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var c = _step3.value;\n      if (c.operator === '>' || c.operator === '>=') gt = higherGT(gt, c, options);else if (c.operator === '<' || c.operator === '<=') lt = lowerLT(lt, c, options);else eqSet.add(c.semver);\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  if (eqSet.size > 1) return null;\n  var gtltComp;\n\n  if (gt && lt) {\n    gtltComp = compare(gt.semver, lt.semver, options);\n    if (gtltComp > 0) return null;else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) return null;\n  } // will iterate one or zero times\n\n\n  var _iterator4 = _createForOfIteratorHelper(eqSet),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var eq = _step4.value;\n      if (gt && !satisfies(eq, String(gt), options)) return null;\n      if (lt && !satisfies(eq, String(lt), options)) return null;\n\n      var _iterator6 = _createForOfIteratorHelper(dom),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _c = _step6.value;\n          if (!satisfies(eq, String(_c), options)) return false;\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      return true;\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  var higher, lower;\n  var hasDomLT, hasDomGT; // if the subset has a prerelease, we need a comparator in the superset\n  // with the same tuple and a prerelease, or it's not a subset\n\n  var needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;\n  var needDomGTPre = gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false; // exception: <1.2.3-0 is the same as <1.2.3\n\n  if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {\n    needDomLTPre = false;\n  }\n\n  var _iterator5 = _createForOfIteratorHelper(dom),\n      _step5;\n\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var _c2 = _step5.value;\n      hasDomGT = hasDomGT || _c2.operator === '>' || _c2.operator === '>=';\n      hasDomLT = hasDomLT || _c2.operator === '<' || _c2.operator === '<=';\n\n      if (gt) {\n        if (needDomGTPre) {\n          if (_c2.semver.prerelease && _c2.semver.prerelease.length && _c2.semver.major === needDomGTPre.major && _c2.semver.minor === needDomGTPre.minor && _c2.semver.patch === needDomGTPre.patch) {\n            needDomGTPre = false;\n          }\n        }\n\n        if (_c2.operator === '>' || _c2.operator === '>=') {\n          higher = higherGT(gt, _c2, options);\n          if (higher === _c2 && higher !== gt) return false;\n        } else if (gt.operator === '>=' && !satisfies(gt.semver, String(_c2), options)) return false;\n      }\n\n      if (lt) {\n        if (needDomLTPre) {\n          if (_c2.semver.prerelease && _c2.semver.prerelease.length && _c2.semver.major === needDomLTPre.major && _c2.semver.minor === needDomLTPre.minor && _c2.semver.patch === needDomLTPre.patch) {\n            needDomLTPre = false;\n          }\n        }\n\n        if (_c2.operator === '<' || _c2.operator === '<=') {\n          lower = lowerLT(lt, _c2, options);\n          if (lower === _c2 && lower !== lt) return false;\n        } else if (lt.operator === '<=' && !satisfies(lt.semver, String(_c2), options)) return false;\n      }\n\n      if (!_c2.operator && (lt || gt) && gtltComp !== 0) return false;\n    } // if there was a < or >, and nothing in the dom, then must be false\n    // UNLESS it was limited by another range in the other direction.\n    // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0\n\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n\n  if (gt && hasDomLT && !lt && gtltComp !== 0) return false;\n  if (lt && hasDomGT && !gt && gtltComp !== 0) return false; // we needed a prerelease range in a specific tuple, but didn't get one\n  // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,\n  // because it includes prereleases in the 1.2.3 tuple\n\n  if (needDomGTPre || needDomLTPre) return false;\n  return true;\n}; // >=1.2.3 is lower than >1.2.3\n\n\nvar higherGT = function higherGT(a, b, options) {\n  if (!a) return b;\n  var comp = compare(a.semver, b.semver, options);\n  return comp > 0 ? a : comp < 0 ? b : b.operator === '>' && a.operator === '>=' ? b : a;\n}; // <=1.2.3 is higher than <1.2.3\n\n\nvar lowerLT = function lowerLT(a, b, options) {\n  if (!a) return b;\n  var comp = compare(a.semver, b.semver, options);\n  return comp < 0 ? a : comp > 0 ? b : b.operator === '<' && a.operator === '<=' ? b : a;\n};\n\nmodule.exports = subset;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/@ledgerhq/devices/node_modules/semver/ranges/subset.js"],"names":["Range","require","Comparator","ANY","satisfies","compare","subset","sub","dom","options","sawNonNull","set","OUTER","simpleSub","simpleDom","isSub","simpleSubset","length","semver","includePrerelease","eqSet","Set","gt","lt","c","operator","higherGT","lowerLT","add","size","gtltComp","eq","String","higher","lower","hasDomLT","hasDomGT","needDomLTPre","prerelease","needDomGTPre","major","minor","patch","a","b","comp","module","exports"],"mappings":"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","sourcesContent":["const Range = require('../classes/range.js')\r\nconst Comparator = require('../classes/comparator.js')\r\nconst { ANY } = Comparator\r\nconst satisfies = require('../functions/satisfies.js')\r\nconst compare = require('../functions/compare.js')\r\n\r\n// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:\r\n// - Every simple range `r1, r2, ...` is a null set, OR\r\n// - Every simple range `r1, r2, ...` which is not a null set is a subset of\r\n//   some `R1, R2, ...`\r\n//\r\n// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:\r\n// - If c is only the ANY comparator\r\n//   - If C is only the ANY comparator, return true\r\n//   - Else if in prerelease mode, return false\r\n//   - else replace c with `[>=0.0.0]`\r\n// - If C is only the ANY comparator\r\n//   - if in prerelease mode, return true\r\n//   - else replace C with `[>=0.0.0]`\r\n// - Let EQ be the set of = comparators in c\r\n// - If EQ is more than one, return true (null set)\r\n// - Let GT be the highest > or >= comparator in c\r\n// - Let LT be the lowest < or <= comparator in c\r\n// - If GT and LT, and GT.semver > LT.semver, return true (null set)\r\n// - If any C is a = range, and GT or LT are set, return false\r\n// - If EQ\r\n//   - If GT, and EQ does not satisfy GT, return true (null set)\r\n//   - If LT, and EQ does not satisfy LT, return true (null set)\r\n//   - If EQ satisfies every C, return true\r\n//   - Else return false\r\n// - If GT\r\n//   - If GT.semver is lower than any > or >= comp in C, return false\r\n//   - If GT is >=, and GT.semver does not satisfy every C, return false\r\n//   - If GT.semver has a prerelease, and not in prerelease mode\r\n//     - If no C has a prerelease and the GT.semver tuple, return false\r\n// - If LT\r\n//   - If LT.semver is greater than any < or <= comp in C, return false\r\n//   - If LT is <=, and LT.semver does not satisfy every C, return false\r\n//   - If GT.semver has a prerelease, and not in prerelease mode\r\n//     - If no C has a prerelease and the LT.semver tuple, return false\r\n// - Else return true\r\n\r\nconst subset = (sub, dom, options = {}) => {\r\n  if (sub === dom)\r\n    return true\r\n\r\n  sub = new Range(sub, options)\r\n  dom = new Range(dom, options)\r\n  let sawNonNull = false\r\n\r\n  OUTER: for (const simpleSub of sub.set) {\r\n    for (const simpleDom of dom.set) {\r\n      const isSub = simpleSubset(simpleSub, simpleDom, options)\r\n      sawNonNull = sawNonNull || isSub !== null\r\n      if (isSub)\r\n        continue OUTER\r\n    }\r\n    // the null set is a subset of everything, but null simple ranges in\r\n    // a complex range should be ignored.  so if we saw a non-null range,\r\n    // then we know this isn't a subset, but if EVERY simple range was null,\r\n    // then it is a subset.\r\n    if (sawNonNull)\r\n      return false\r\n  }\r\n  return true\r\n}\r\n\r\nconst simpleSubset = (sub, dom, options) => {\r\n  if (sub === dom)\r\n    return true\r\n\r\n  if (sub.length === 1 && sub[0].semver === ANY) {\r\n    if (dom.length === 1 && dom[0].semver === ANY)\r\n      return true\r\n    else if (options.includePrerelease)\r\n      sub = [ new Comparator('>=0.0.0-0') ]\r\n    else\r\n      sub = [ new Comparator('>=0.0.0') ]\r\n  }\r\n\r\n  if (dom.length === 1 && dom[0].semver === ANY) {\r\n    if (options.includePrerelease)\r\n      return true\r\n    else\r\n      dom = [ new Comparator('>=0.0.0') ]\r\n  }\r\n\r\n  const eqSet = new Set()\r\n  let gt, lt\r\n  for (const c of sub) {\r\n    if (c.operator === '>' || c.operator === '>=')\r\n      gt = higherGT(gt, c, options)\r\n    else if (c.operator === '<' || c.operator === '<=')\r\n      lt = lowerLT(lt, c, options)\r\n    else\r\n      eqSet.add(c.semver)\r\n  }\r\n\r\n  if (eqSet.size > 1)\r\n    return null\r\n\r\n  let gtltComp\r\n  if (gt && lt) {\r\n    gtltComp = compare(gt.semver, lt.semver, options)\r\n    if (gtltComp > 0)\r\n      return null\r\n    else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<='))\r\n      return null\r\n  }\r\n\r\n  // will iterate one or zero times\r\n  for (const eq of eqSet) {\r\n    if (gt && !satisfies(eq, String(gt), options))\r\n      return null\r\n\r\n    if (lt && !satisfies(eq, String(lt), options))\r\n      return null\r\n\r\n    for (const c of dom) {\r\n      if (!satisfies(eq, String(c), options))\r\n        return false\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  let higher, lower\r\n  let hasDomLT, hasDomGT\r\n  // if the subset has a prerelease, we need a comparator in the superset\r\n  // with the same tuple and a prerelease, or it's not a subset\r\n  let needDomLTPre = lt &&\r\n    !options.includePrerelease &&\r\n    lt.semver.prerelease.length ? lt.semver : false\r\n  let needDomGTPre = gt &&\r\n    !options.includePrerelease &&\r\n    gt.semver.prerelease.length ? gt.semver : false\r\n  // exception: <1.2.3-0 is the same as <1.2.3\r\n  if (needDomLTPre && needDomLTPre.prerelease.length === 1 &&\r\n      lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {\r\n    needDomLTPre = false\r\n  }\r\n\r\n  for (const c of dom) {\r\n    hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>='\r\n    hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<='\r\n    if (gt) {\r\n      if (needDomGTPre) {\r\n        if (c.semver.prerelease && c.semver.prerelease.length &&\r\n            c.semver.major === needDomGTPre.major &&\r\n            c.semver.minor === needDomGTPre.minor &&\r\n            c.semver.patch === needDomGTPre.patch) {\r\n          needDomGTPre = false\r\n        }\r\n      }\r\n      if (c.operator === '>' || c.operator === '>=') {\r\n        higher = higherGT(gt, c, options)\r\n        if (higher === c && higher !== gt)\r\n          return false\r\n      } else if (gt.operator === '>=' && !satisfies(gt.semver, String(c), options))\r\n        return false\r\n    }\r\n    if (lt) {\r\n      if (needDomLTPre) {\r\n        if (c.semver.prerelease && c.semver.prerelease.length &&\r\n            c.semver.major === needDomLTPre.major &&\r\n            c.semver.minor === needDomLTPre.minor &&\r\n            c.semver.patch === needDomLTPre.patch) {\r\n          needDomLTPre = false\r\n        }\r\n      }\r\n      if (c.operator === '<' || c.operator === '<=') {\r\n        lower = lowerLT(lt, c, options)\r\n        if (lower === c && lower !== lt)\r\n          return false\r\n      } else if (lt.operator === '<=' && !satisfies(lt.semver, String(c), options))\r\n        return false\r\n    }\r\n    if (!c.operator && (lt || gt) && gtltComp !== 0)\r\n      return false\r\n  }\r\n\r\n  // if there was a < or >, and nothing in the dom, then must be false\r\n  // UNLESS it was limited by another range in the other direction.\r\n  // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0\r\n  if (gt && hasDomLT && !lt && gtltComp !== 0)\r\n    return false\r\n\r\n  if (lt && hasDomGT && !gt && gtltComp !== 0)\r\n    return false\r\n\r\n  // we needed a prerelease range in a specific tuple, but didn't get one\r\n  // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,\r\n  // because it includes prereleases in the 1.2.3 tuple\r\n  if (needDomGTPre || needDomLTPre)\r\n    return false\r\n\r\n  return true\r\n}\r\n\r\n// >=1.2.3 is lower than >1.2.3\r\nconst higherGT = (a, b, options) => {\r\n  if (!a)\r\n    return b\r\n  const comp = compare(a.semver, b.semver, options)\r\n  return comp > 0 ? a\r\n    : comp < 0 ? b\r\n    : b.operator === '>' && a.operator === '>=' ? b\r\n    : a\r\n}\r\n\r\n// <=1.2.3 is higher than <1.2.3\r\nconst lowerLT = (a, b, options) => {\r\n  if (!a)\r\n    return b\r\n  const comp = compare(a.semver, b.semver, options)\r\n  return comp < 0 ? a\r\n    : comp > 0 ? b\r\n    : b.operator === '<' && a.operator === '<=' ? b\r\n    : a\r\n}\r\n\r\nmodule.exports = subset\r\n"]},"metadata":{},"sourceType":"script"}