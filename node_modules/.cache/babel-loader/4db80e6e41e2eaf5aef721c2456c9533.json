{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xany from \"./internal/_xany.js\";\n/**\r\n * Returns `true` if at least one of the elements of the list match the predicate,\r\n * `false` otherwise.\r\n *\r\n * Dispatches to the `any` method of the second argument, if present.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category List\r\n * @sig (a -> Boolean) -> [a] -> Boolean\r\n * @param {Function} fn The predicate function.\r\n * @param {Array} list The array to consider.\r\n * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`\r\n *         otherwise.\r\n * @see R.all, R.none, R.transduce\r\n * @example\r\n *\r\n *      const lessThan0 = R.flip(R.lt)(0);\r\n *      const lessThan2 = R.flip(R.lt)(2);\r\n *      R.any(lessThan0)([1, 2]); //=> false\r\n *      R.any(lessThan2)([1, 2]); //=> true\r\n */\n\nvar any = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['any'], _xany, function any(fn, list) {\n  var idx = 0;\n\n  while (idx < list.length) {\n    if (fn(list[idx])) {\n      return true;\n    }\n\n    idx += 1;\n  }\n\n  return false;\n}));\n\nexport default any;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/any.js"],"names":["_curry2","_dispatchable","_xany","any","fn","list","idx","length"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,GAAG,GACP,aACAH,OAAO,EACP,aACAC,aAAa,CAAC,CAAC,KAAD,CAAD,EAAUC,KAAV,EAAiB,SAASC,GAAT,CAAaC,EAAb,EAAiBC,IAAjB,EAAuB;AACnD,MAAIC,GAAG,GAAG,CAAV;;AAEA,SAAOA,GAAG,GAAGD,IAAI,CAACE,MAAlB,EAA0B;AACxB,QAAIH,EAAE,CAACC,IAAI,CAACC,GAAD,CAAL,CAAN,EAAmB;AACjB,aAAO,IAAP;AACD;;AAEDA,IAAAA,GAAG,IAAI,CAAP;AACD;;AAED,SAAO,KAAP;AACD,CAZY,CAFN,CAFP;;AAkBA,eAAeH,GAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\nimport _dispatchable from \"./internal/_dispatchable.js\";\r\nimport _xany from \"./internal/_xany.js\";\r\n/**\r\n * Returns `true` if at least one of the elements of the list match the predicate,\r\n * `false` otherwise.\r\n *\r\n * Dispatches to the `any` method of the second argument, if present.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category List\r\n * @sig (a -> Boolean) -> [a] -> Boolean\r\n * @param {Function} fn The predicate function.\r\n * @param {Array} list The array to consider.\r\n * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`\r\n *         otherwise.\r\n * @see R.all, R.none, R.transduce\r\n * @example\r\n *\r\n *      const lessThan0 = R.flip(R.lt)(0);\r\n *      const lessThan2 = R.flip(R.lt)(2);\r\n *      R.any(lessThan0)([1, 2]); //=> false\r\n *      R.any(lessThan2)([1, 2]); //=> true\r\n */\r\n\r\nvar any =\r\n/*#__PURE__*/\r\n_curry2(\r\n/*#__PURE__*/\r\n_dispatchable(['any'], _xany, function any(fn, list) {\r\n  var idx = 0;\r\n\r\n  while (idx < list.length) {\r\n    if (fn(list[idx])) {\r\n      return true;\r\n    }\r\n\r\n    idx += 1;\r\n  }\r\n\r\n  return false;\r\n}));\r\n\r\nexport default any;"]},"metadata":{},"sourceType":"module"}