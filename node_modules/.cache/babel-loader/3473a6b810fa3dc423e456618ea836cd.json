{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport mergeDeepWithKey from \"./mergeDeepWithKey.js\";\n/**\r\n * Creates a new object with the own properties of the first object merged with\r\n * the own properties of the second object. If a key exists in both objects:\r\n * - and both values are objects, the two values will be recursively merged\r\n * - otherwise the value from the second object will be used.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.24.0\r\n * @category Object\r\n * @sig {a} -> {a} -> {a}\r\n * @param {Object} lObj\r\n * @param {Object} rObj\r\n * @return {Object}\r\n * @see R.merge, R.mergeDeepLeft, R.mergeDeepWith, R.mergeDeepWithKey\r\n * @example\r\n *\r\n *      R.mergeDeepRight({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},\r\n *                       { age: 40, contact: { email: 'baa@example.com' }});\r\n *      //=> { name: 'fred', age: 40, contact: { email: 'baa@example.com' }}\r\n */\n\nvar mergeDeepRight = /*#__PURE__*/_curry2(function mergeDeepRight(lObj, rObj) {\n  return mergeDeepWithKey(function (k, lVal, rVal) {\n    return rVal;\n  }, lObj, rObj);\n});\n\nexport default mergeDeepRight;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/mergeDeepRight.js"],"names":["_curry2","mergeDeepWithKey","mergeDeepRight","lObj","rObj","k","lVal","rVal"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,gBAAP,MAA6B,uBAA7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,cAAc,GAClB,aACAF,OAAO,CAAC,SAASE,cAAT,CAAwBC,IAAxB,EAA8BC,IAA9B,EAAoC;AAC1C,SAAOH,gBAAgB,CAAC,UAAUI,CAAV,EAAaC,IAAb,EAAmBC,IAAnB,EAAyB;AAC/C,WAAOA,IAAP;AACD,GAFsB,EAEpBJ,IAFoB,EAEdC,IAFc,CAAvB;AAGD,CAJM,CAFP;;AAQA,eAAeF,cAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\nimport mergeDeepWithKey from \"./mergeDeepWithKey.js\";\r\n/**\r\n * Creates a new object with the own properties of the first object merged with\r\n * the own properties of the second object. If a key exists in both objects:\r\n * - and both values are objects, the two values will be recursively merged\r\n * - otherwise the value from the second object will be used.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.24.0\r\n * @category Object\r\n * @sig {a} -> {a} -> {a}\r\n * @param {Object} lObj\r\n * @param {Object} rObj\r\n * @return {Object}\r\n * @see R.merge, R.mergeDeepLeft, R.mergeDeepWith, R.mergeDeepWithKey\r\n * @example\r\n *\r\n *      R.mergeDeepRight({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},\r\n *                       { age: 40, contact: { email: 'baa@example.com' }});\r\n *      //=> { name: 'fred', age: 40, contact: { email: 'baa@example.com' }}\r\n */\r\n\r\nvar mergeDeepRight =\r\n/*#__PURE__*/\r\n_curry2(function mergeDeepRight(lObj, rObj) {\r\n  return mergeDeepWithKey(function (k, lVal, rVal) {\r\n    return rVal;\r\n  }, lObj, rObj);\r\n});\r\n\r\nexport default mergeDeepRight;"]},"metadata":{},"sourceType":"module"}