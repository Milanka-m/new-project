{"ast":null,"code":"import _curryN from \"./internal/_curryN.js\";\nimport _reduce from \"./internal/_reduce.js\";\nimport _reduced from \"./internal/_reduced.js\";\n/**\r\n * Like [`reduce`](#reduce), `reduceWhile` returns a single item by iterating\r\n * through the list, successively calling the iterator function. `reduceWhile`\r\n * also takes a predicate that is evaluated before each step. If the predicate\r\n * returns `false`, it \"short-circuits\" the iteration and returns the current\r\n * value of the accumulator.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.22.0\r\n * @category List\r\n * @sig ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a\r\n * @param {Function} pred The predicate. It is passed the accumulator and the\r\n *        current element.\r\n * @param {Function} fn The iterator function. Receives two values, the\r\n *        accumulator and the current element.\r\n * @param {*} a The accumulator value.\r\n * @param {Array} list The list to iterate over.\r\n * @return {*} The final, accumulated value.\r\n * @see R.reduce, R.reduced\r\n * @example\r\n *\r\n *      const isOdd = (acc, x) => x % 2 === 1;\r\n *      const xs = [1, 3, 5, 60, 777, 800];\r\n *      R.reduceWhile(isOdd, R.add, 0, xs); //=> 9\r\n *\r\n *      const ys = [2, 4, 6]\r\n *      R.reduceWhile(isOdd, R.add, 111, ys); //=> 111\r\n */\n\nvar reduceWhile = /*#__PURE__*/_curryN(4, [], function _reduceWhile(pred, fn, a, list) {\n  return _reduce(function (acc, x) {\n    return pred(acc, x) ? fn(acc, x) : _reduced(acc);\n  }, a, list);\n});\n\nexport default reduceWhile;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/reduceWhile.js"],"names":["_curryN","_reduce","_reduced","reduceWhile","_reduceWhile","pred","fn","a","list","acc","x"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,WAAW,GACf,aACAH,OAAO,CAAC,CAAD,EAAI,EAAJ,EAAQ,SAASI,YAAT,CAAsBC,IAAtB,EAA4BC,EAA5B,EAAgCC,CAAhC,EAAmCC,IAAnC,EAAyC;AACtD,SAAOP,OAAO,CAAC,UAAUQ,GAAV,EAAeC,CAAf,EAAkB;AAC/B,WAAOL,IAAI,CAACI,GAAD,EAAMC,CAAN,CAAJ,GAAeJ,EAAE,CAACG,GAAD,EAAMC,CAAN,CAAjB,GAA4BR,QAAQ,CAACO,GAAD,CAA3C;AACD,GAFa,EAEXF,CAFW,EAERC,IAFQ,CAAd;AAGD,CAJM,CAFP;;AAQA,eAAeL,WAAf","sourcesContent":["import _curryN from \"./internal/_curryN.js\";\r\nimport _reduce from \"./internal/_reduce.js\";\r\nimport _reduced from \"./internal/_reduced.js\";\r\n/**\r\n * Like [`reduce`](#reduce), `reduceWhile` returns a single item by iterating\r\n * through the list, successively calling the iterator function. `reduceWhile`\r\n * also takes a predicate that is evaluated before each step. If the predicate\r\n * returns `false`, it \"short-circuits\" the iteration and returns the current\r\n * value of the accumulator.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.22.0\r\n * @category List\r\n * @sig ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a\r\n * @param {Function} pred The predicate. It is passed the accumulator and the\r\n *        current element.\r\n * @param {Function} fn The iterator function. Receives two values, the\r\n *        accumulator and the current element.\r\n * @param {*} a The accumulator value.\r\n * @param {Array} list The list to iterate over.\r\n * @return {*} The final, accumulated value.\r\n * @see R.reduce, R.reduced\r\n * @example\r\n *\r\n *      const isOdd = (acc, x) => x % 2 === 1;\r\n *      const xs = [1, 3, 5, 60, 777, 800];\r\n *      R.reduceWhile(isOdd, R.add, 0, xs); //=> 9\r\n *\r\n *      const ys = [2, 4, 6]\r\n *      R.reduceWhile(isOdd, R.add, 111, ys); //=> 111\r\n */\r\n\r\nvar reduceWhile =\r\n/*#__PURE__*/\r\n_curryN(4, [], function _reduceWhile(pred, fn, a, list) {\r\n  return _reduce(function (acc, x) {\r\n    return pred(acc, x) ? fn(acc, x) : _reduced(acc);\r\n  }, a, list);\r\n});\r\n\r\nexport default reduceWhile;"]},"metadata":{},"sourceType":"module"}