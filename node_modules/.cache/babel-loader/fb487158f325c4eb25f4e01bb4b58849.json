{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xdropWhile from \"./internal/_xdropWhile.js\";\nimport slice from \"./slice.js\";\n/**\r\n * Returns a new list excluding the leading elements of a given list which\r\n * satisfy the supplied predicate function. It passes each value to the supplied\r\n * predicate function, skipping elements while the predicate function returns\r\n * `true`. The predicate function is applied to one argument: *(value)*.\r\n *\r\n * Dispatches to the `dropWhile` method of the second argument, if present.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.9.0\r\n * @category List\r\n * @sig (a -> Boolean) -> [a] -> [a]\r\n * @sig (a -> Boolean) -> String -> String\r\n * @param {Function} fn The function called per iteration.\r\n * @param {Array} xs The collection to iterate over.\r\n * @return {Array} A new array.\r\n * @see R.takeWhile, R.transduce, R.addIndex\r\n * @example\r\n *\r\n *      const lteTwo = x => x <= 2;\r\n *\r\n *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]\r\n *\r\n *      R.dropWhile(x => x !== 'd' , 'Ramda'); //=> 'da'\r\n */\n\nvar dropWhile = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['dropWhile'], _xdropWhile, function dropWhile(pred, xs) {\n  var idx = 0;\n  var len = xs.length;\n\n  while (idx < len && pred(xs[idx])) {\n    idx += 1;\n  }\n\n  return slice(idx, Infinity, xs);\n}));\n\nexport default dropWhile;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/dropWhile.js"],"names":["_curry2","_dispatchable","_xdropWhile","slice","dropWhile","pred","xs","idx","len","length","Infinity"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,SAAS,GACb,aACAJ,OAAO,EACP,aACAC,aAAa,CAAC,CAAC,WAAD,CAAD,EAAgBC,WAAhB,EAA6B,SAASE,SAAT,CAAmBC,IAAnB,EAAyBC,EAAzB,EAA6B;AACrE,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAGF,EAAE,CAACG,MAAb;;AAEA,SAAOF,GAAG,GAAGC,GAAN,IAAaH,IAAI,CAACC,EAAE,CAACC,GAAD,CAAH,CAAxB,EAAmC;AACjCA,IAAAA,GAAG,IAAI,CAAP;AACD;;AAED,SAAOJ,KAAK,CAACI,GAAD,EAAMG,QAAN,EAAgBJ,EAAhB,CAAZ;AACD,CATY,CAFN,CAFP;;AAeA,eAAeF,SAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\nimport _dispatchable from \"./internal/_dispatchable.js\";\r\nimport _xdropWhile from \"./internal/_xdropWhile.js\";\r\nimport slice from \"./slice.js\";\r\n/**\r\n * Returns a new list excluding the leading elements of a given list which\r\n * satisfy the supplied predicate function. It passes each value to the supplied\r\n * predicate function, skipping elements while the predicate function returns\r\n * `true`. The predicate function is applied to one argument: *(value)*.\r\n *\r\n * Dispatches to the `dropWhile` method of the second argument, if present.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.9.0\r\n * @category List\r\n * @sig (a -> Boolean) -> [a] -> [a]\r\n * @sig (a -> Boolean) -> String -> String\r\n * @param {Function} fn The function called per iteration.\r\n * @param {Array} xs The collection to iterate over.\r\n * @return {Array} A new array.\r\n * @see R.takeWhile, R.transduce, R.addIndex\r\n * @example\r\n *\r\n *      const lteTwo = x => x <= 2;\r\n *\r\n *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]\r\n *\r\n *      R.dropWhile(x => x !== 'd' , 'Ramda'); //=> 'da'\r\n */\r\n\r\nvar dropWhile =\r\n/*#__PURE__*/\r\n_curry2(\r\n/*#__PURE__*/\r\n_dispatchable(['dropWhile'], _xdropWhile, function dropWhile(pred, xs) {\r\n  var idx = 0;\r\n  var len = xs.length;\r\n\r\n  while (idx < len && pred(xs[idx])) {\r\n    idx += 1;\r\n  }\r\n\r\n  return slice(idx, Infinity, xs);\r\n}));\r\n\r\nexport default dropWhile;"]},"metadata":{},"sourceType":"module"}