{"ast":null,"code":"import _curry1 from \"./internal/_curry1.js\";\nimport converge from \"./converge.js\";\n/**\r\n * juxt applies a list of functions to a list of values.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.19.0\r\n * @category Function\r\n * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])\r\n * @param {Array} fns An array of functions\r\n * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.\r\n * @see R.applySpec\r\n * @example\r\n *\r\n *      const getRange = R.juxt([Math.min, Math.max]);\r\n *      getRange(3, 4, 9, -3); //=> [-3, 9]\r\n * @symb R.juxt([f, g, h])(a, b) = [f(a, b), g(a, b), h(a, b)]\r\n */\n\nvar juxt = /*#__PURE__*/_curry1(function juxt(fns) {\n  return converge(function () {\n    return Array.prototype.slice.call(arguments, 0);\n  }, fns);\n});\n\nexport default juxt;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/juxt.js"],"names":["_curry1","converge","juxt","fns","Array","prototype","slice","call","arguments"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,IAAI,GACR,aACAF,OAAO,CAAC,SAASE,IAAT,CAAcC,GAAd,EAAmB;AACzB,SAAOF,QAAQ,CAAC,YAAY;AAC1B,WAAOG,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,CAAP;AACD,GAFc,EAEZL,GAFY,CAAf;AAGD,CAJM,CAFP;;AAQA,eAAeD,IAAf","sourcesContent":["import _curry1 from \"./internal/_curry1.js\";\r\nimport converge from \"./converge.js\";\r\n/**\r\n * juxt applies a list of functions to a list of values.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.19.0\r\n * @category Function\r\n * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])\r\n * @param {Array} fns An array of functions\r\n * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.\r\n * @see R.applySpec\r\n * @example\r\n *\r\n *      const getRange = R.juxt([Math.min, Math.max]);\r\n *      getRange(3, 4, 9, -3); //=> [-3, 9]\r\n * @symb R.juxt([f, g, h])(a, b) = [f(a, b), g(a, b), h(a, b)]\r\n */\r\n\r\nvar juxt =\r\n/*#__PURE__*/\r\n_curry1(function juxt(fns) {\r\n  return converge(function () {\r\n    return Array.prototype.slice.call(arguments, 0);\r\n  }, fns);\r\n});\r\n\r\nexport default juxt;"]},"metadata":{},"sourceType":"module"}