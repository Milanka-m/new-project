{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\nimport _Set from \"./internal/_Set.js\";\n/**\r\n * Finds the set (i.e. no duplicates) of all elements in the first list not\r\n * contained in the second list. Objects and Arrays are compared in terms of\r\n * value equality, not reference equality.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Relation\r\n * @sig [*] -> [*] -> [*]\r\n * @param {Array} list1 The first list.\r\n * @param {Array} list2 The second list.\r\n * @return {Array} The elements in `list1` that are not in `list2`.\r\n * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith, R.without\r\n * @example\r\n *\r\n *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]\r\n *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]\r\n *      R.difference([{a: 1}, {b: 2}], [{a: 1}, {c: 3}]) //=> [{b: 2}]\r\n */\n\nvar difference = /*#__PURE__*/_curry2(function difference(first, second) {\n  var out = [];\n  var idx = 0;\n  var firstLen = first.length;\n  var secondLen = second.length;\n  var toFilterOut = new _Set();\n\n  for (var i = 0; i < secondLen; i += 1) {\n    toFilterOut.add(second[i]);\n  }\n\n  while (idx < firstLen) {\n    if (toFilterOut.add(first[idx])) {\n      out[out.length] = first[idx];\n    }\n\n    idx += 1;\n  }\n\n  return out;\n});\n\nexport default difference;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/difference.js"],"names":["_curry2","_Set","difference","first","second","out","idx","firstLen","length","secondLen","toFilterOut","i","add"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,UAAU,GACd,aACAF,OAAO,CAAC,SAASE,UAAT,CAAoBC,KAApB,EAA2BC,MAA3B,EAAmC;AACzC,MAAIC,GAAG,GAAG,EAAV;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,QAAQ,GAAGJ,KAAK,CAACK,MAArB;AACA,MAAIC,SAAS,GAAGL,MAAM,CAACI,MAAvB;AACA,MAAIE,WAAW,GAAG,IAAIT,IAAJ,EAAlB;;AAEA,OAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAApB,EAA+BE,CAAC,IAAI,CAApC,EAAuC;AACrCD,IAAAA,WAAW,CAACE,GAAZ,CAAgBR,MAAM,CAACO,CAAD,CAAtB;AACD;;AAED,SAAOL,GAAG,GAAGC,QAAb,EAAuB;AACrB,QAAIG,WAAW,CAACE,GAAZ,CAAgBT,KAAK,CAACG,GAAD,CAArB,CAAJ,EAAiC;AAC/BD,MAAAA,GAAG,CAACA,GAAG,CAACG,MAAL,CAAH,GAAkBL,KAAK,CAACG,GAAD,CAAvB;AACD;;AAEDA,IAAAA,GAAG,IAAI,CAAP;AACD;;AAED,SAAOD,GAAP;AACD,CApBM,CAFP;;AAwBA,eAAeH,UAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\nimport _Set from \"./internal/_Set.js\";\r\n/**\r\n * Finds the set (i.e. no duplicates) of all elements in the first list not\r\n * contained in the second list. Objects and Arrays are compared in terms of\r\n * value equality, not reference equality.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Relation\r\n * @sig [*] -> [*] -> [*]\r\n * @param {Array} list1 The first list.\r\n * @param {Array} list2 The second list.\r\n * @return {Array} The elements in `list1` that are not in `list2`.\r\n * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith, R.without\r\n * @example\r\n *\r\n *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]\r\n *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]\r\n *      R.difference([{a: 1}, {b: 2}], [{a: 1}, {c: 3}]) //=> [{b: 2}]\r\n */\r\n\r\nvar difference =\r\n/*#__PURE__*/\r\n_curry2(function difference(first, second) {\r\n  var out = [];\r\n  var idx = 0;\r\n  var firstLen = first.length;\r\n  var secondLen = second.length;\r\n  var toFilterOut = new _Set();\r\n\r\n  for (var i = 0; i < secondLen; i += 1) {\r\n    toFilterOut.add(second[i]);\r\n  }\r\n\r\n  while (idx < firstLen) {\r\n    if (toFilterOut.add(first[idx])) {\r\n      out[out.length] = first[idx];\r\n    }\r\n\r\n    idx += 1;\r\n  }\r\n\r\n  return out;\r\n});\r\n\r\nexport default difference;"]},"metadata":{},"sourceType":"module"}