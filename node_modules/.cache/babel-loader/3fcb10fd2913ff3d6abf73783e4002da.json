{"ast":null,"code":"import _includesWith from \"./internal/_includesWith.js\";\nimport _curry2 from \"./internal/_curry2.js\";\n/**\r\n * Returns a new list containing only one copy of each element in the original\r\n * list, based upon the value returned by applying the supplied predicate to\r\n * two list elements. Prefers the first item if two items compare equal based\r\n * on the predicate.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.2.0\r\n * @category List\r\n * @sig ((a, a) -> Boolean) -> [a] -> [a]\r\n * @param {Function} pred A predicate used to test whether two items are equal.\r\n * @param {Array} list The array to consider.\r\n * @return {Array} The list of unique items.\r\n * @example\r\n *\r\n *      const strEq = R.eqBy(String);\r\n *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]\r\n *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]\r\n *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]\r\n *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']\r\n */\n\nvar uniqWith = /*#__PURE__*/_curry2(function uniqWith(pred, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n  var item;\n\n  while (idx < len) {\n    item = list[idx];\n\n    if (!_includesWith(pred, item, result)) {\n      result[result.length] = item;\n    }\n\n    idx += 1;\n  }\n\n  return result;\n});\n\nexport default uniqWith;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/uniqWith.js"],"names":["_includesWith","_curry2","uniqWith","pred","list","idx","len","length","result","item"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,6BAA1B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,QAAQ,GACZ,aACAD,OAAO,CAAC,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,IAAxB,EAA8B;AACpC,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAGF,IAAI,CAACG,MAAf;AACA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,IAAJ;;AAEA,SAAOJ,GAAG,GAAGC,GAAb,EAAkB;AAChBG,IAAAA,IAAI,GAAGL,IAAI,CAACC,GAAD,CAAX;;AAEA,QAAI,CAACL,aAAa,CAACG,IAAD,EAAOM,IAAP,EAAaD,MAAb,CAAlB,EAAwC;AACtCA,MAAAA,MAAM,CAACA,MAAM,CAACD,MAAR,CAAN,GAAwBE,IAAxB;AACD;;AAEDJ,IAAAA,GAAG,IAAI,CAAP;AACD;;AAED,SAAOG,MAAP;AACD,CAjBM,CAFP;;AAqBA,eAAeN,QAAf","sourcesContent":["import _includesWith from \"./internal/_includesWith.js\";\r\nimport _curry2 from \"./internal/_curry2.js\";\r\n/**\r\n * Returns a new list containing only one copy of each element in the original\r\n * list, based upon the value returned by applying the supplied predicate to\r\n * two list elements. Prefers the first item if two items compare equal based\r\n * on the predicate.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.2.0\r\n * @category List\r\n * @sig ((a, a) -> Boolean) -> [a] -> [a]\r\n * @param {Function} pred A predicate used to test whether two items are equal.\r\n * @param {Array} list The array to consider.\r\n * @return {Array} The list of unique items.\r\n * @example\r\n *\r\n *      const strEq = R.eqBy(String);\r\n *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]\r\n *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]\r\n *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]\r\n *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']\r\n */\r\n\r\nvar uniqWith =\r\n/*#__PURE__*/\r\n_curry2(function uniqWith(pred, list) {\r\n  var idx = 0;\r\n  var len = list.length;\r\n  var result = [];\r\n  var item;\r\n\r\n  while (idx < len) {\r\n    item = list[idx];\r\n\r\n    if (!_includesWith(pred, item, result)) {\r\n      result[result.length] = item;\r\n    }\r\n\r\n    idx += 1;\r\n  }\r\n\r\n  return result;\r\n});\r\n\r\nexport default uniqWith;"]},"metadata":{},"sourceType":"module"}