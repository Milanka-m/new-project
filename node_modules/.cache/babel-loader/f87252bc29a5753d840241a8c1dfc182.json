{"ast":null,"code":"import _curry2 from \"./internal/_curry2.js\";\n/**\r\n * Applies function `fn` to the argument list `args`. This is useful for\r\n * creating a fixed-arity function from a variadic function. `fn` should be a\r\n * bound function if context is significant.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.7.0\r\n * @category Function\r\n * @sig (*... -> a) -> [*] -> a\r\n * @param {Function} fn The function which will be called with `args`\r\n * @param {Array} args The arguments to call `fn` with\r\n * @return {*} result The result, equivalent to `fn(...args)`\r\n * @see R.call, R.unapply\r\n * @example\r\n *\r\n *      const nums = [1, 2, 3, -99, 42, 6, 7];\r\n *      R.apply(Math.max, nums); //=> 42\r\n * @symb R.apply(f, [a, b, c]) = f(a, b, c)\r\n */\n\nvar apply = /*#__PURE__*/_curry2(function apply(fn, args) {\n  return fn.apply(this, args);\n});\n\nexport default apply;","map":{"version":3,"sources":["D:/Lianok/dev/new-project/node_modules/ramda/es/apply.js"],"names":["_curry2","apply","fn","args"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,KAAK,GACT,aACAD,OAAO,CAAC,SAASC,KAAT,CAAeC,EAAf,EAAmBC,IAAnB,EAAyB;AAC/B,SAAOD,EAAE,CAACD,KAAH,CAAS,IAAT,EAAeE,IAAf,CAAP;AACD,CAFM,CAFP;;AAMA,eAAeF,KAAf","sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\r\n/**\r\n * Applies function `fn` to the argument list `args`. This is useful for\r\n * creating a fixed-arity function from a variadic function. `fn` should be a\r\n * bound function if context is significant.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.7.0\r\n * @category Function\r\n * @sig (*... -> a) -> [*] -> a\r\n * @param {Function} fn The function which will be called with `args`\r\n * @param {Array} args The arguments to call `fn` with\r\n * @return {*} result The result, equivalent to `fn(...args)`\r\n * @see R.call, R.unapply\r\n * @example\r\n *\r\n *      const nums = [1, 2, 3, -99, 42, 6, 7];\r\n *      R.apply(Math.max, nums); //=> 42\r\n * @symb R.apply(f, [a, b, c]) = f(a, b, c)\r\n */\r\n\r\nvar apply =\r\n/*#__PURE__*/\r\n_curry2(function apply(fn, args) {\r\n  return fn.apply(this, args);\r\n});\r\n\r\nexport default apply;"]},"metadata":{},"sourceType":"module"}